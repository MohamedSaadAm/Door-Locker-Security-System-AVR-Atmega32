
Control_ECU1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000256a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  0000256a  000025fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800080  00800080  0000261e  2**0
                  ALLOC
  3 .stab         00002700  00000000  00000000  00002620  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001371  00000000  00000000  00004d20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000061d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006341  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009c24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009d84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a011  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a7df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 2d 0f 	jmp	0x1e5a	; 0x1e5a <__vector_4>
      14:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c7 0e 	jmp	0x1d8e	; 0x1d8e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__vector_9>
      28:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__vector_10>
      2c:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 38       	cpi	r26, 0x84	; 132
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 b3 12 	jmp	0x2566	; 0x2566 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7c 12 	jmp	0x24f8	; 0x24f8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 98 12 	jmp	0x2530	; 0x2530 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8c 12 	jmp	0x2518	; 0x2518 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void wait_seconds(void);


/******************************** Main ********************************/
int main()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	c7 54       	subi	r28, 0x47	; 71
     b50:	d0 40       	sbci	r29, 0x00	; 0
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
	uint8 password[5] , confirmPassword[5] , pass_confirmed=0 , operation,saved_pass[5],count=0,buzzer=0;
     b5c:	1a 8a       	std	Y+18, r1	; 0x12
     b5e:	18 8a       	std	Y+16, r1	; 0x10
     b60:	1f 86       	std	Y+15, r1	; 0x0f

	/* Create configuration structure for TIMER driver with
	 * initial value = 0 & compare value = 7813
	 * which generates an interrupt every one second
	 */
	TIMER_ConfigType TIMER_Config = {TIMER1,TIMER_COMPARE_MODE,F_CPU_1024,0,7813};
     b62:	ce 01       	movw	r24, r28
     b64:	82 96       	adiw	r24, 0x22	; 34
     b66:	9a af       	std	Y+58, r25	; 0x3a
     b68:	89 af       	std	Y+57, r24	; 0x39
     b6a:	e4 e7       	ldi	r30, 0x74	; 116
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	fc af       	std	Y+60, r31	; 0x3c
     b70:	eb af       	std	Y+59, r30	; 0x3b
     b72:	fb e0       	ldi	r31, 0x0B	; 11
     b74:	fd af       	std	Y+61, r31	; 0x3d
     b76:	eb ad       	ldd	r30, Y+59	; 0x3b
     b78:	fc ad       	ldd	r31, Y+60	; 0x3c
     b7a:	00 80       	ld	r0, Z
     b7c:	8b ad       	ldd	r24, Y+59	; 0x3b
     b7e:	9c ad       	ldd	r25, Y+60	; 0x3c
     b80:	01 96       	adiw	r24, 0x01	; 1
     b82:	9c af       	std	Y+60, r25	; 0x3c
     b84:	8b af       	std	Y+59, r24	; 0x3b
     b86:	e9 ad       	ldd	r30, Y+57	; 0x39
     b88:	fa ad       	ldd	r31, Y+58	; 0x3a
     b8a:	00 82       	st	Z, r0
     b8c:	89 ad       	ldd	r24, Y+57	; 0x39
     b8e:	9a ad       	ldd	r25, Y+58	; 0x3a
     b90:	01 96       	adiw	r24, 0x01	; 1
     b92:	9a af       	std	Y+58, r25	; 0x3a
     b94:	89 af       	std	Y+57, r24	; 0x39
     b96:	9d ad       	ldd	r25, Y+61	; 0x3d
     b98:	91 50       	subi	r25, 0x01	; 1
     b9a:	9d af       	std	Y+61, r25	; 0x3d
     b9c:	ed ad       	ldd	r30, Y+61	; 0x3d
     b9e:	ee 23       	and	r30, r30
     ba0:	51 f7       	brne	.-44     	; 0xb76 <main+0x30>
	/*
	 * define Uart struct
	 * 8 bits of data,Disable parity ,One stop bit ,Baud rate=9600
	 */
	UART_ConfigType Config={UART_8_BIT_PER_FRAME,UART_DISABLE_PARITY,UART_1_STOP_BIT,9600};
     ba2:	ce 01       	movw	r24, r28
     ba4:	8d 96       	adiw	r24, 0x2d	; 45
     ba6:	9f af       	std	Y+63, r25	; 0x3f
     ba8:	8e af       	std	Y+62, r24	; 0x3e
     baa:	ed e6       	ldi	r30, 0x6D	; 109
     bac:	f0 e0       	ldi	r31, 0x00	; 0
     bae:	22 96       	adiw	r28, 0x02	; 2
     bb0:	ff af       	std	Y+63, r31	; 0x3f
     bb2:	ee af       	std	Y+62, r30	; 0x3e
     bb4:	22 97       	sbiw	r28, 0x02	; 2
     bb6:	f7 e0       	ldi	r31, 0x07	; 7
     bb8:	23 96       	adiw	r28, 0x03	; 3
     bba:	ff af       	std	Y+63, r31	; 0x3f
     bbc:	23 97       	sbiw	r28, 0x03	; 3
     bbe:	22 96       	adiw	r28, 0x02	; 2
     bc0:	ee ad       	ldd	r30, Y+62	; 0x3e
     bc2:	ff ad       	ldd	r31, Y+63	; 0x3f
     bc4:	22 97       	sbiw	r28, 0x02	; 2
     bc6:	00 80       	ld	r0, Z
     bc8:	22 96       	adiw	r28, 0x02	; 2
     bca:	8e ad       	ldd	r24, Y+62	; 0x3e
     bcc:	9f ad       	ldd	r25, Y+63	; 0x3f
     bce:	22 97       	sbiw	r28, 0x02	; 2
     bd0:	01 96       	adiw	r24, 0x01	; 1
     bd2:	22 96       	adiw	r28, 0x02	; 2
     bd4:	9f af       	std	Y+63, r25	; 0x3f
     bd6:	8e af       	std	Y+62, r24	; 0x3e
     bd8:	22 97       	sbiw	r28, 0x02	; 2
     bda:	ee ad       	ldd	r30, Y+62	; 0x3e
     bdc:	ff ad       	ldd	r31, Y+63	; 0x3f
     bde:	00 82       	st	Z, r0
     be0:	8e ad       	ldd	r24, Y+62	; 0x3e
     be2:	9f ad       	ldd	r25, Y+63	; 0x3f
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	9f af       	std	Y+63, r25	; 0x3f
     be8:	8e af       	std	Y+62, r24	; 0x3e
     bea:	23 96       	adiw	r28, 0x03	; 3
     bec:	9f ad       	ldd	r25, Y+63	; 0x3f
     bee:	23 97       	sbiw	r28, 0x03	; 3
     bf0:	91 50       	subi	r25, 0x01	; 1
     bf2:	23 96       	adiw	r28, 0x03	; 3
     bf4:	9f af       	std	Y+63, r25	; 0x3f
     bf6:	23 97       	sbiw	r28, 0x03	; 3
     bf8:	23 96       	adiw	r28, 0x03	; 3
     bfa:	ef ad       	ldd	r30, Y+63	; 0x3f
     bfc:	23 97       	sbiw	r28, 0x03	; 3
     bfe:	ee 23       	and	r30, r30
     c00:	f1 f6       	brne	.-68     	; 0xbbe <main+0x78>

	TWI_ConfigType twi_config={40000,0x01};
     c02:	ce 01       	movw	r24, r28
     c04:	c4 96       	adiw	r24, 0x34	; 52
     c06:	25 96       	adiw	r28, 0x05	; 5
     c08:	9f af       	std	Y+63, r25	; 0x3f
     c0a:	8e af       	std	Y+62, r24	; 0x3e
     c0c:	25 97       	sbiw	r28, 0x05	; 5
     c0e:	e8 e6       	ldi	r30, 0x68	; 104
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	27 96       	adiw	r28, 0x07	; 7
     c14:	ff af       	std	Y+63, r31	; 0x3f
     c16:	ee af       	std	Y+62, r30	; 0x3e
     c18:	27 97       	sbiw	r28, 0x07	; 7
     c1a:	f5 e0       	ldi	r31, 0x05	; 5
     c1c:	28 96       	adiw	r28, 0x08	; 8
     c1e:	ff af       	std	Y+63, r31	; 0x3f
     c20:	28 97       	sbiw	r28, 0x08	; 8
     c22:	27 96       	adiw	r28, 0x07	; 7
     c24:	ee ad       	ldd	r30, Y+62	; 0x3e
     c26:	ff ad       	ldd	r31, Y+63	; 0x3f
     c28:	27 97       	sbiw	r28, 0x07	; 7
     c2a:	00 80       	ld	r0, Z
     c2c:	27 96       	adiw	r28, 0x07	; 7
     c2e:	8e ad       	ldd	r24, Y+62	; 0x3e
     c30:	9f ad       	ldd	r25, Y+63	; 0x3f
     c32:	27 97       	sbiw	r28, 0x07	; 7
     c34:	01 96       	adiw	r24, 0x01	; 1
     c36:	27 96       	adiw	r28, 0x07	; 7
     c38:	9f af       	std	Y+63, r25	; 0x3f
     c3a:	8e af       	std	Y+62, r24	; 0x3e
     c3c:	27 97       	sbiw	r28, 0x07	; 7
     c3e:	25 96       	adiw	r28, 0x05	; 5
     c40:	ee ad       	ldd	r30, Y+62	; 0x3e
     c42:	ff ad       	ldd	r31, Y+63	; 0x3f
     c44:	25 97       	sbiw	r28, 0x05	; 5
     c46:	00 82       	st	Z, r0
     c48:	25 96       	adiw	r28, 0x05	; 5
     c4a:	8e ad       	ldd	r24, Y+62	; 0x3e
     c4c:	9f ad       	ldd	r25, Y+63	; 0x3f
     c4e:	25 97       	sbiw	r28, 0x05	; 5
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	25 96       	adiw	r28, 0x05	; 5
     c54:	9f af       	std	Y+63, r25	; 0x3f
     c56:	8e af       	std	Y+62, r24	; 0x3e
     c58:	25 97       	sbiw	r28, 0x05	; 5
     c5a:	28 96       	adiw	r28, 0x08	; 8
     c5c:	9f ad       	ldd	r25, Y+63	; 0x3f
     c5e:	28 97       	sbiw	r28, 0x08	; 8
     c60:	91 50       	subi	r25, 0x01	; 1
     c62:	28 96       	adiw	r28, 0x08	; 8
     c64:	9f af       	std	Y+63, r25	; 0x3f
     c66:	28 97       	sbiw	r28, 0x08	; 8
     c68:	28 96       	adiw	r28, 0x08	; 8
     c6a:	ef ad       	ldd	r30, Y+63	; 0x3f
     c6c:	28 97       	sbiw	r28, 0x08	; 8
     c6e:	ee 23       	and	r30, r30
     c70:	c1 f6       	brne	.-80     	; 0xc22 <main+0xdc>

	SREG|=(1<<7);  //Enable I-bit
     c72:	af e5       	ldi	r26, 0x5F	; 95
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	ef e5       	ldi	r30, 0x5F	; 95
     c78:	f0 e0       	ldi	r31, 0x00	; 0
     c7a:	80 81       	ld	r24, Z
     c7c:	80 68       	ori	r24, 0x80	; 128
     c7e:	8c 93       	st	X, r24

	BUZZER_Init();  //Initialize buzzer
     c80:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <BUZZER_Init>

	DcMotor_Init();  //Initialize DC Motor
     c84:	0e 94 0b 0a 	call	0x1416	; 0x1416 <DcMotor_Init>

	UART_init(&Config);  //Initialize UART
     c88:	ce 01       	movw	r24, r28
     c8a:	8d 96       	adiw	r24, 0x2d	; 45
     c8c:	0e 94 3c 11 	call	0x2278	; 0x2278 <UART_init>

	TWI_init(&twi_config);  //Initialize I2C
     c90:	ce 01       	movw	r24, r28
     c92:	c4 96       	adiw	r24, 0x34	; 52
     c94:	0e 94 9d 10 	call	0x213a	; 0x213a <TWI_init>
     c98:	86 c0       	rjmp	.+268    	; 0xda6 <main+0x260>
	while(1){

		/****************************** Step 1 ******************************/
		while(pass_confirmed == 0)
		{
			receivePassword(password);
     c9a:	ce 01       	movw	r24, r28
     c9c:	43 96       	adiw	r24, 0x13	; 19
     c9e:	0e 94 8e 08 	call	0x111c	; 0x111c <receivePassword>

			receivePassword(confirmPassword);
     ca2:	ce 01       	movw	r24, r28
     ca4:	48 96       	adiw	r24, 0x18	; 24
     ca6:	0e 94 8e 08 	call	0x111c	; 0x111c <receivePassword>

			pass_confirmed = verifyPassword(password, confirmPassword);
     caa:	ce 01       	movw	r24, r28
     cac:	43 96       	adiw	r24, 0x13	; 19
     cae:	9e 01       	movw	r18, r28
     cb0:	28 5e       	subi	r18, 0xE8	; 232
     cb2:	3f 4f       	sbci	r19, 0xFF	; 255
     cb4:	b9 01       	movw	r22, r18
     cb6:	0e 94 b6 07 	call	0xf6c	; 0xf6c <verifyPassword>
     cba:	8a 8b       	std	Y+18, r24	; 0x12
			UART_sendByte(pass_confirmed);
     cbc:	8a 89       	ldd	r24, Y+18	; 0x12
     cbe:	0e 94 c8 11 	call	0x2390	; 0x2390 <UART_sendByte>
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	a2 e0       	ldi	r26, 0x02	; 2
     cc8:	b3 e4       	ldi	r27, 0x43	; 67
     cca:	8b 87       	std	Y+11, r24	; 0x0b
     ccc:	9c 87       	std	Y+12, r25	; 0x0c
     cce:	ad 87       	std	Y+13, r26	; 0x0d
     cd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd2:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd4:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	4a ef       	ldi	r20, 0xFA	; 250
     ce0:	54 e4       	ldi	r21, 0x44	; 68
     ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	8f 83       	std	Y+7, r24	; 0x07
     cec:	98 87       	std	Y+8, r25	; 0x08
     cee:	a9 87       	std	Y+9, r26	; 0x09
     cf0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cf2:	6f 81       	ldd	r22, Y+7	; 0x07
     cf4:	78 85       	ldd	r23, Y+8	; 0x08
     cf6:	89 85       	ldd	r24, Y+9	; 0x09
     cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	40 e8       	ldi	r20, 0x80	; 128
     d00:	5f e3       	ldi	r21, 0x3F	; 63
     d02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d06:	88 23       	and	r24, r24
     d08:	2c f4       	brge	.+10     	; 0xd14 <main+0x1ce>
		__ticks = 1;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	9e 83       	std	Y+6, r25	; 0x06
     d10:	8d 83       	std	Y+5, r24	; 0x05
     d12:	3f c0       	rjmp	.+126    	; 0xd92 <main+0x24c>
	else if (__tmp > 65535)
     d14:	6f 81       	ldd	r22, Y+7	; 0x07
     d16:	78 85       	ldd	r23, Y+8	; 0x08
     d18:	89 85       	ldd	r24, Y+9	; 0x09
     d1a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	3f ef       	ldi	r19, 0xFF	; 255
     d20:	4f e7       	ldi	r20, 0x7F	; 127
     d22:	57 e4       	ldi	r21, 0x47	; 71
     d24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d28:	18 16       	cp	r1, r24
     d2a:	4c f5       	brge	.+82     	; 0xd7e <main+0x238>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d2c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d30:	8d 85       	ldd	r24, Y+13	; 0x0d
     d32:	9e 85       	ldd	r25, Y+14	; 0x0e
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e2       	ldi	r20, 0x20	; 32
     d3a:	51 e4       	ldi	r21, 0x41	; 65
     d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	bc 01       	movw	r22, r24
     d46:	cd 01       	movw	r24, r26
     d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	9e 83       	std	Y+6, r25	; 0x06
     d52:	8d 83       	std	Y+5, r24	; 0x05
     d54:	0f c0       	rjmp	.+30     	; 0xd74 <main+0x22e>
     d56:	88 ec       	ldi	r24, 0xC8	; 200
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	9c 83       	std	Y+4, r25	; 0x04
     d5c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d5e:	8b 81       	ldd	r24, Y+3	; 0x03
     d60:	9c 81       	ldd	r25, Y+4	; 0x04
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <main+0x21c>
     d66:	9c 83       	std	Y+4, r25	; 0x04
     d68:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6a:	8d 81       	ldd	r24, Y+5	; 0x05
     d6c:	9e 81       	ldd	r25, Y+6	; 0x06
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	9e 83       	std	Y+6, r25	; 0x06
     d72:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d74:	8d 81       	ldd	r24, Y+5	; 0x05
     d76:	9e 81       	ldd	r25, Y+6	; 0x06
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	69 f7       	brne	.-38     	; 0xd56 <main+0x210>
     d7c:	14 c0       	rjmp	.+40     	; 0xda6 <main+0x260>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7e:	6f 81       	ldd	r22, Y+7	; 0x07
     d80:	78 85       	ldd	r23, Y+8	; 0x08
     d82:	89 85       	ldd	r24, Y+9	; 0x09
     d84:	9a 85       	ldd	r25, Y+10	; 0x0a
     d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	9e 83       	std	Y+6, r25	; 0x06
     d90:	8d 83       	std	Y+5, r24	; 0x05
     d92:	8d 81       	ldd	r24, Y+5	; 0x05
     d94:	9e 81       	ldd	r25, Y+6	; 0x06
     d96:	9a 83       	std	Y+2, r25	; 0x02
     d98:	89 83       	std	Y+1, r24	; 0x01
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <main+0x258>
     da2:	9a 83       	std	Y+2, r25	; 0x02
     da4:	89 83       	std	Y+1, r24	; 0x01
	TWI_init(&twi_config);  //Initialize I2C

	while(1){

		/****************************** Step 1 ******************************/
		while(pass_confirmed == 0)
     da6:	8a 89       	ldd	r24, Y+18	; 0x12
     da8:	88 23       	and	r24, r24
     daa:	09 f4       	brne	.+2      	; 0xdae <main+0x268>
     dac:	76 cf       	rjmp	.-276    	; 0xc9a <main+0x154>

			_delay_ms(130);
		}


		storePasswordeeprom(password);
     dae:	ce 01       	movw	r24, r28
     db0:	43 96       	adiw	r24, 0x13	; 19
     db2:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <storePasswordeeprom>
		/****************************** Step 2 ******************************/
		pass_confirmed=0;
     db6:	1a 8a       	std	Y+18, r1	; 0x12
		operation= UART_recieveByte();
     db8:	0e 94 df 11 	call	0x23be	; 0x23be <UART_recieveByte>
     dbc:	89 8b       	std	Y+17, r24	; 0x11
		/****************************** Step 3 ******************************/
		if(operation=='+')
     dbe:	89 89       	ldd	r24, Y+17	; 0x11
     dc0:	8b 32       	cpi	r24, 0x2B	; 43
     dc2:	09 f0       	breq	.+2      	; 0xdc6 <main+0x280>
     dc4:	8a c0       	rjmp	.+276    	; 0xeda <main+0x394>
     dc6:	84 c0       	rjmp	.+264    	; 0xed0 <main+0x38a>
		{
			while((!pass_confirmed)){
				receivePassword(password);
     dc8:	ce 01       	movw	r24, r28
     dca:	43 96       	adiw	r24, 0x13	; 19
     dcc:	0e 94 8e 08 	call	0x111c	; 0x111c <receivePassword>
				readPasswordeeprom(saved_pass);
     dd0:	ce 01       	movw	r24, r28
     dd2:	4d 96       	adiw	r24, 0x1d	; 29
     dd4:	0e 94 2d 09 	call	0x125a	; 0x125a <readPasswordeeprom>
				pass_confirmed = verifyPassword(password, confirmPassword);
     dd8:	ce 01       	movw	r24, r28
     dda:	43 96       	adiw	r24, 0x13	; 19
     ddc:	9e 01       	movw	r18, r28
     dde:	28 5e       	subi	r18, 0xE8	; 232
     de0:	3f 4f       	sbci	r19, 0xFF	; 255
     de2:	b9 01       	movw	r22, r18
     de4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <verifyPassword>
     de8:	8a 8b       	std	Y+18, r24	; 0x12
				UART_sendByte(pass_confirmed);
     dea:	8a 89       	ldd	r24, Y+18	; 0x12
     dec:	0e 94 c8 11 	call	0x2390	; 0x2390 <UART_sendByte>
				if(pass_confirmed)
     df0:	8a 89       	ldd	r24, Y+18	; 0x12
     df2:	88 23       	and	r24, r24
     df4:	09 f4       	brne	.+2      	; 0xdf8 <main+0x2b2>
     df6:	47 c0       	rjmp	.+142    	; 0xe86 <main+0x340>
				{

					count=0;
     df8:	18 8a       	std	Y+16, r1	; 0x10
					DcMotor_Rotate(CLOCKWISE);
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DcMotor_Rotate>
					TIMER_setCallBack(wait_seconds);
     e00:	8e ec       	ldi	r24, 0xCE	; 206
     e02:	99 e0       	ldi	r25, 0x09	; 9
     e04:	0e 94 44 10 	call	0x2088	; 0x2088 <TIMER_setCallBack>
					TIMER_Init(&TIMER_Config); // initialize timer1
     e08:	ce 01       	movw	r24, r28
     e0a:	82 96       	adiw	r24, 0x22	; 34
     e0c:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <TIMER_Init>
					seconds=15;
     e10:	8f e0       	ldi	r24, 0x0F	; 15
     e12:	80 93 83 00 	sts	0x0083, r24
					while(g_tick < seconds){};//wait 15 seconds
     e16:	90 91 80 00 	lds	r25, 0x0080
     e1a:	80 91 83 00 	lds	r24, 0x0083
     e1e:	98 17       	cp	r25, r24
     e20:	d0 f3       	brcs	.-12     	; 0xe16 <main+0x2d0>
					g_tick=0;
     e22:	10 92 80 00 	sts	0x0080, r1

					DcMotor_Rotate(STOP);
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DcMotor_Rotate>
					TIMER_setCallBack(wait_seconds);
     e2c:	8e ec       	ldi	r24, 0xCE	; 206
     e2e:	99 e0       	ldi	r25, 0x09	; 9
     e30:	0e 94 44 10 	call	0x2088	; 0x2088 <TIMER_setCallBack>
					TIMER_Init(&TIMER_Config); // initialize timer1
     e34:	ce 01       	movw	r24, r28
     e36:	82 96       	adiw	r24, 0x22	; 34
     e38:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <TIMER_Init>
					seconds=3;
     e3c:	83 e0       	ldi	r24, 0x03	; 3
     e3e:	80 93 83 00 	sts	0x0083, r24
					while(g_tick < seconds){};//wait 3 seconds
     e42:	90 91 80 00 	lds	r25, 0x0080
     e46:	80 91 83 00 	lds	r24, 0x0083
     e4a:	98 17       	cp	r25, r24
     e4c:	d0 f3       	brcs	.-12     	; 0xe42 <main+0x2fc>
					g_tick=0;
     e4e:	10 92 80 00 	sts	0x0080, r1


					DcMotor_Rotate(ANTI_CLOCKWISE);
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DcMotor_Rotate>
					TIMER_setCallBack(wait_seconds);
     e58:	8e ec       	ldi	r24, 0xCE	; 206
     e5a:	99 e0       	ldi	r25, 0x09	; 9
     e5c:	0e 94 44 10 	call	0x2088	; 0x2088 <TIMER_setCallBack>
					TIMER_Init(&TIMER_Config); // initialize timer1
     e60:	ce 01       	movw	r24, r28
     e62:	82 96       	adiw	r24, 0x22	; 34
     e64:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <TIMER_Init>
					seconds=15;
     e68:	8f e0       	ldi	r24, 0x0F	; 15
     e6a:	80 93 83 00 	sts	0x0083, r24
					while(g_tick < seconds){};//wait 15 seconds
     e6e:	90 91 80 00 	lds	r25, 0x0080
     e72:	80 91 83 00 	lds	r24, 0x0083
     e76:	98 17       	cp	r25, r24
     e78:	d0 f3       	brcs	.-12     	; 0xe6e <main+0x328>
					g_tick=0;
     e7a:	10 92 80 00 	sts	0x0080, r1

					DcMotor_Rotate(STOP);
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	0e 94 2b 0a 	call	0x1456	; 0x1456 <DcMotor_Rotate>
     e84:	25 c0       	rjmp	.+74     	; 0xed0 <main+0x38a>
				}
				else
				{
					count=UART_recieveByte();
     e86:	0e 94 df 11 	call	0x23be	; 0x23be <UART_recieveByte>
     e8a:	88 8b       	std	Y+16, r24	; 0x10
					if(count==3)
     e8c:	88 89       	ldd	r24, Y+16	; 0x10
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	f9 f4       	brne	.+62     	; 0xed0 <main+0x38a>
					{
						pass_confirmed=1;
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	8a 8b       	std	Y+18, r24	; 0x12
						buzzer=UART_recieveByte();
     e96:	0e 94 df 11 	call	0x23be	; 0x23be <UART_recieveByte>
     e9a:	8f 87       	std	Y+15, r24	; 0x0f
						if(buzzer)
     e9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e9e:	88 23       	and	r24, r24
     ea0:	b9 f0       	breq	.+46     	; 0xed0 <main+0x38a>
						{
							BUZZER_ON();
     ea2:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <BUZZER_ON>
							TIMER_setCallBack(wait_seconds);
     ea6:	8e ec       	ldi	r24, 0xCE	; 206
     ea8:	99 e0       	ldi	r25, 0x09	; 9
     eaa:	0e 94 44 10 	call	0x2088	; 0x2088 <TIMER_setCallBack>
							TIMER_Init(&TIMER_Config); // initialize timer1
     eae:	ce 01       	movw	r24, r28
     eb0:	82 96       	adiw	r24, 0x22	; 34
     eb2:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <TIMER_Init>
							seconds=60;
     eb6:	8c e3       	ldi	r24, 0x3C	; 60
     eb8:	80 93 83 00 	sts	0x0083, r24
							while(g_tick < seconds){};//wait 60 seconds
     ebc:	90 91 80 00 	lds	r25, 0x0080
     ec0:	80 91 83 00 	lds	r24, 0x0083
     ec4:	98 17       	cp	r25, r24
     ec6:	d0 f3       	brcs	.-12     	; 0xebc <main+0x376>
							g_tick=0;
     ec8:	10 92 80 00 	sts	0x0080, r1
							BUZZER_OFF();
     ecc:	0e 94 ff 09 	call	0x13fe	; 0x13fe <BUZZER_OFF>
		pass_confirmed=0;
		operation= UART_recieveByte();
		/****************************** Step 3 ******************************/
		if(operation=='+')
		{
			while((!pass_confirmed)){
     ed0:	8a 89       	ldd	r24, Y+18	; 0x12
     ed2:	88 23       	and	r24, r24
     ed4:	09 f4       	brne	.+2      	; 0xed8 <main+0x392>
     ed6:	78 cf       	rjmp	.-272    	; 0xdc8 <main+0x282>
     ed8:	66 cf       	rjmp	.-308    	; 0xda6 <main+0x260>
					}
				}
			}
		}
		/****************************** Step 4 ******************************/
		else if(operation=='-')
     eda:	89 89       	ldd	r24, Y+17	; 0x11
     edc:	8d 32       	cpi	r24, 0x2D	; 45
     ede:	09 f0       	breq	.+2      	; 0xee2 <main+0x39c>
     ee0:	62 cf       	rjmp	.-316    	; 0xda6 <main+0x260>
     ee2:	3f c0       	rjmp	.+126    	; 0xf62 <main+0x41c>
		{
			while( (!pass_confirmed)){
				receivePassword(password);
     ee4:	ce 01       	movw	r24, r28
     ee6:	43 96       	adiw	r24, 0x13	; 19
     ee8:	0e 94 8e 08 	call	0x111c	; 0x111c <receivePassword>
				readPasswordeeprom(saved_pass);
     eec:	ce 01       	movw	r24, r28
     eee:	4d 96       	adiw	r24, 0x1d	; 29
     ef0:	0e 94 2d 09 	call	0x125a	; 0x125a <readPasswordeeprom>
				pass_confirmed = verifyPassword(password, confirmPassword);
     ef4:	ce 01       	movw	r24, r28
     ef6:	43 96       	adiw	r24, 0x13	; 19
     ef8:	9e 01       	movw	r18, r28
     efa:	28 5e       	subi	r18, 0xE8	; 232
     efc:	3f 4f       	sbci	r19, 0xFF	; 255
     efe:	b9 01       	movw	r22, r18
     f00:	0e 94 b6 07 	call	0xf6c	; 0xf6c <verifyPassword>
     f04:	8a 8b       	std	Y+18, r24	; 0x12
				UART_sendByte(pass_confirmed);
     f06:	8a 89       	ldd	r24, Y+18	; 0x12
     f08:	0e 94 c8 11 	call	0x2390	; 0x2390 <UART_sendByte>
				if(pass_confirmed)
     f0c:	8a 89       	ldd	r24, Y+18	; 0x12
     f0e:	88 23       	and	r24, r24
     f10:	19 f0       	breq	.+6      	; 0xf18 <main+0x3d2>
				{
					count=0;
     f12:	18 8a       	std	Y+16, r1	; 0x10
					pass_confirmed=0;
     f14:	1a 8a       	std	Y+18, r1	; 0x12
     f16:	47 cf       	rjmp	.-370    	; 0xda6 <main+0x260>
					break;

				}
				else
				{
					count=UART_recieveByte();
     f18:	0e 94 df 11 	call	0x23be	; 0x23be <UART_recieveByte>
     f1c:	88 8b       	std	Y+16, r24	; 0x10
					if(count==3)
     f1e:	88 89       	ldd	r24, Y+16	; 0x10
     f20:	83 30       	cpi	r24, 0x03	; 3
     f22:	f9 f4       	brne	.+62     	; 0xf62 <main+0x41c>
					{
						pass_confirmed=1;
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	8a 8b       	std	Y+18, r24	; 0x12
						buzzer=UART_recieveByte();
     f28:	0e 94 df 11 	call	0x23be	; 0x23be <UART_recieveByte>
     f2c:	8f 87       	std	Y+15, r24	; 0x0f
						if(buzzer)
     f2e:	8f 85       	ldd	r24, Y+15	; 0x0f
     f30:	88 23       	and	r24, r24
     f32:	b9 f0       	breq	.+46     	; 0xf62 <main+0x41c>
						{
							BUZZER_ON();
     f34:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <BUZZER_ON>
							TIMER_setCallBack(wait_seconds);
     f38:	8e ec       	ldi	r24, 0xCE	; 206
     f3a:	99 e0       	ldi	r25, 0x09	; 9
     f3c:	0e 94 44 10 	call	0x2088	; 0x2088 <TIMER_setCallBack>
							TIMER_Init(&TIMER_Config); // initialize timer1
     f40:	ce 01       	movw	r24, r28
     f42:	82 96       	adiw	r24, 0x22	; 34
     f44:	0e 94 60 0f 	call	0x1ec0	; 0x1ec0 <TIMER_Init>
							seconds=60;
     f48:	8c e3       	ldi	r24, 0x3C	; 60
     f4a:	80 93 83 00 	sts	0x0083, r24
							while(g_tick < seconds){};//wait 60 seconds
     f4e:	90 91 80 00 	lds	r25, 0x0080
     f52:	80 91 83 00 	lds	r24, 0x0083
     f56:	98 17       	cp	r25, r24
     f58:	d0 f3       	brcs	.-12     	; 0xf4e <main+0x408>
							g_tick=0;
     f5a:	10 92 80 00 	sts	0x0080, r1
							BUZZER_OFF();
     f5e:	0e 94 ff 09 	call	0x13fe	; 0x13fe <BUZZER_OFF>
			}
		}
		/****************************** Step 4 ******************************/
		else if(operation=='-')
		{
			while( (!pass_confirmed)){
     f62:	8a 89       	ldd	r24, Y+18	; 0x12
     f64:	88 23       	and	r24, r24
     f66:	09 f4       	brne	.+2      	; 0xf6a <main+0x424>
     f68:	bd cf       	rjmp	.-134    	; 0xee4 <main+0x39e>
     f6a:	1d cf       	rjmp	.-454    	; 0xda6 <main+0x260>

00000f6c <verifyPassword>:

	}
}

uint8 verifyPassword (uint8 password[] , uint8 confirmPassword[])
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	00 d0       	rcall	.+0      	; 0xf72 <verifyPassword+0x6>
     f72:	00 d0       	rcall	.+0      	; 0xf74 <verifyPassword+0x8>
     f74:	00 d0       	rcall	.+0      	; 0xf76 <verifyPassword+0xa>
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	9b 83       	std	Y+3, r25	; 0x03
     f7c:	8a 83       	std	Y+2, r24	; 0x02
     f7e:	7d 83       	std	Y+5, r23	; 0x05
     f80:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;

	for (i=0 ; i<5 ; ++i)
     f82:	19 82       	std	Y+1, r1	; 0x01
     f84:	19 c0       	rjmp	.+50     	; 0xfb8 <verifyPassword+0x4c>
	{
		if (password[i] != confirmPassword[i])
     f86:	89 81       	ldd	r24, Y+1	; 0x01
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	9b 81       	ldd	r25, Y+3	; 0x03
     f90:	fc 01       	movw	r30, r24
     f92:	e2 0f       	add	r30, r18
     f94:	f3 1f       	adc	r31, r19
     f96:	40 81       	ld	r20, Z
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	9d 81       	ldd	r25, Y+5	; 0x05
     fa2:	fc 01       	movw	r30, r24
     fa4:	e2 0f       	add	r30, r18
     fa6:	f3 1f       	adc	r31, r19
     fa8:	80 81       	ld	r24, Z
     faa:	48 17       	cp	r20, r24
     fac:	11 f0       	breq	.+4      	; 0xfb2 <verifyPassword+0x46>
		{
			return 0;
     fae:	1e 82       	std	Y+6, r1	; 0x06
     fb0:	08 c0       	rjmp	.+16     	; 0xfc2 <verifyPassword+0x56>

uint8 verifyPassword (uint8 password[] , uint8 confirmPassword[])
{
	uint8 i;

	for (i=0 ; i<5 ; ++i)
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	8f 5f       	subi	r24, 0xFF	; 255
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	85 30       	cpi	r24, 0x05	; 5
     fbc:	20 f3       	brcs	.-56     	; 0xf86 <verifyPassword+0x1a>
		if (password[i] != confirmPassword[i])
		{
			return 0;
		}
	}
	return 1;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	8e 83       	std	Y+6, r24	; 0x06
     fc2:	8e 81       	ldd	r24, Y+6	; 0x06
}
     fc4:	26 96       	adiw	r28, 0x06	; 6
     fc6:	0f b6       	in	r0, 0x3f	; 63
     fc8:	f8 94       	cli
     fca:	de bf       	out	0x3e, r29	; 62
     fcc:	0f be       	out	0x3f, r0	; 63
     fce:	cd bf       	out	0x3d, r28	; 61
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <storePasswordeeprom>:
void storePasswordeeprom (uint8 password[])
{
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	61 97       	sbiw	r28, 0x11	; 17
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	99 8b       	std	Y+17, r25	; 0x11
     fec:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i=0 ; i<5 ; ++i)
     fee:	1f 86       	std	Y+15, r1	; 0x0f
     ff0:	88 c0       	rjmp	.+272    	; 0x1102 <storePasswordeeprom+0x12c>
	{
		EEPROM_writeByte ((0X0090 + i) , (password[i]));
     ff2:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	80 57       	subi	r24, 0x70	; 112
     ffa:	9f 4f       	sbci	r25, 0xFF	; 255
     ffc:	ac 01       	movw	r20, r24
     ffe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	88 89       	ldd	r24, Y+16	; 0x10
    1006:	99 89       	ldd	r25, Y+17	; 0x11
    1008:	fc 01       	movw	r30, r24
    100a:	e2 0f       	add	r30, r18
    100c:	f3 1f       	adc	r31, r19
    100e:	20 81       	ld	r18, Z
    1010:	ca 01       	movw	r24, r20
    1012:	62 2f       	mov	r22, r18
    1014:	0e 94 4f 0a 	call	0x149e	; 0x149e <EEPROM_writeByte>
    1018:	80 e0       	ldi	r24, 0x00	; 0
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	a2 e0       	ldi	r26, 0x02	; 2
    101e:	b3 e4       	ldi	r27, 0x43	; 67
    1020:	8b 87       	std	Y+11, r24	; 0x0b
    1022:	9c 87       	std	Y+12, r25	; 0x0c
    1024:	ad 87       	std	Y+13, r26	; 0x0d
    1026:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1028:	6b 85       	ldd	r22, Y+11	; 0x0b
    102a:	7c 85       	ldd	r23, Y+12	; 0x0c
    102c:	8d 85       	ldd	r24, Y+13	; 0x0d
    102e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	4a ef       	ldi	r20, 0xFA	; 250
    1036:	54 e4       	ldi	r21, 0x44	; 68
    1038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103c:	dc 01       	movw	r26, r24
    103e:	cb 01       	movw	r24, r22
    1040:	8f 83       	std	Y+7, r24	; 0x07
    1042:	98 87       	std	Y+8, r25	; 0x08
    1044:	a9 87       	std	Y+9, r26	; 0x09
    1046:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1048:	6f 81       	ldd	r22, Y+7	; 0x07
    104a:	78 85       	ldd	r23, Y+8	; 0x08
    104c:	89 85       	ldd	r24, Y+9	; 0x09
    104e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e8       	ldi	r20, 0x80	; 128
    1056:	5f e3       	ldi	r21, 0x3F	; 63
    1058:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    105c:	88 23       	and	r24, r24
    105e:	2c f4       	brge	.+10     	; 0x106a <storePasswordeeprom+0x94>
		__ticks = 1;
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	9e 83       	std	Y+6, r25	; 0x06
    1066:	8d 83       	std	Y+5, r24	; 0x05
    1068:	3f c0       	rjmp	.+126    	; 0x10e8 <storePasswordeeprom+0x112>
	else if (__tmp > 65535)
    106a:	6f 81       	ldd	r22, Y+7	; 0x07
    106c:	78 85       	ldd	r23, Y+8	; 0x08
    106e:	89 85       	ldd	r24, Y+9	; 0x09
    1070:	9a 85       	ldd	r25, Y+10	; 0x0a
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	3f ef       	ldi	r19, 0xFF	; 255
    1076:	4f e7       	ldi	r20, 0x7F	; 127
    1078:	57 e4       	ldi	r21, 0x47	; 71
    107a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    107e:	18 16       	cp	r1, r24
    1080:	4c f5       	brge	.+82     	; 0x10d4 <storePasswordeeprom+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1082:	6b 85       	ldd	r22, Y+11	; 0x0b
    1084:	7c 85       	ldd	r23, Y+12	; 0x0c
    1086:	8d 85       	ldd	r24, Y+13	; 0x0d
    1088:	9e 85       	ldd	r25, Y+14	; 0x0e
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e2       	ldi	r20, 0x20	; 32
    1090:	51 e4       	ldi	r21, 0x41	; 65
    1092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1096:	dc 01       	movw	r26, r24
    1098:	cb 01       	movw	r24, r22
    109a:	bc 01       	movw	r22, r24
    109c:	cd 01       	movw	r24, r26
    109e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a2:	dc 01       	movw	r26, r24
    10a4:	cb 01       	movw	r24, r22
    10a6:	9e 83       	std	Y+6, r25	; 0x06
    10a8:	8d 83       	std	Y+5, r24	; 0x05
    10aa:	0f c0       	rjmp	.+30     	; 0x10ca <storePasswordeeprom+0xf4>
    10ac:	88 ec       	ldi	r24, 0xC8	; 200
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	9c 83       	std	Y+4, r25	; 0x04
    10b2:	8b 83       	std	Y+3, r24	; 0x03
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	9c 81       	ldd	r25, Y+4	; 0x04
    10b8:	01 97       	sbiw	r24, 0x01	; 1
    10ba:	f1 f7       	brne	.-4      	; 0x10b8 <storePasswordeeprom+0xe2>
    10bc:	9c 83       	std	Y+4, r25	; 0x04
    10be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	9e 81       	ldd	r25, Y+6	; 0x06
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	9e 83       	std	Y+6, r25	; 0x06
    10c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ca:	8d 81       	ldd	r24, Y+5	; 0x05
    10cc:	9e 81       	ldd	r25, Y+6	; 0x06
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	69 f7       	brne	.-38     	; 0x10ac <storePasswordeeprom+0xd6>
    10d2:	14 c0       	rjmp	.+40     	; 0x10fc <storePasswordeeprom+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d4:	6f 81       	ldd	r22, Y+7	; 0x07
    10d6:	78 85       	ldd	r23, Y+8	; 0x08
    10d8:	89 85       	ldd	r24, Y+9	; 0x09
    10da:	9a 85       	ldd	r25, Y+10	; 0x0a
    10dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10e0:	dc 01       	movw	r26, r24
    10e2:	cb 01       	movw	r24, r22
    10e4:	9e 83       	std	Y+6, r25	; 0x06
    10e6:	8d 83       	std	Y+5, r24	; 0x05
    10e8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ea:	9e 81       	ldd	r25, Y+6	; 0x06
    10ec:	9a 83       	std	Y+2, r25	; 0x02
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	9a 81       	ldd	r25, Y+2	; 0x02
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	f1 f7       	brne	.-4      	; 0x10f4 <storePasswordeeprom+0x11e>
    10f8:	9a 83       	std	Y+2, r25	; 0x02
    10fa:	89 83       	std	Y+1, r24	; 0x01
	return 1;
}
void storePasswordeeprom (uint8 password[])
{
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    10fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    10fe:	8f 5f       	subi	r24, 0xFF	; 255
    1100:	8f 87       	std	Y+15, r24	; 0x0f
    1102:	8f 85       	ldd	r24, Y+15	; 0x0f
    1104:	85 30       	cpi	r24, 0x05	; 5
    1106:	08 f4       	brcc	.+2      	; 0x110a <storePasswordeeprom+0x134>
    1108:	74 cf       	rjmp	.-280    	; 0xff2 <storePasswordeeprom+0x1c>
	{
		EEPROM_writeByte ((0X0090 + i) , (password[i]));
		_delay_ms(130);
	}
}
    110a:	61 96       	adiw	r28, 0x11	; 17
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <receivePassword>:
void receivePassword (uint8 password[])
{
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	61 97       	sbiw	r28, 0x11	; 17
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	99 8b       	std	Y+17, r25	; 0x11
    1136:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    1138:	1f 86       	std	Y+15, r1	; 0x0f
    113a:	0f c0       	rjmp	.+30     	; 0x115a <receivePassword+0x3e>
	{
		password [i] = UART_recieveByte();
    113c:	8f 85       	ldd	r24, Y+15	; 0x0f
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	88 89       	ldd	r24, Y+16	; 0x10
    1144:	99 89       	ldd	r25, Y+17	; 0x11
    1146:	8c 01       	movw	r16, r24
    1148:	02 0f       	add	r16, r18
    114a:	13 1f       	adc	r17, r19
    114c:	0e 94 df 11 	call	0x23be	; 0x23be <UART_recieveByte>
    1150:	f8 01       	movw	r30, r16
    1152:	80 83       	st	Z, r24
}
void receivePassword (uint8 password[])
{
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    1154:	8f 85       	ldd	r24, Y+15	; 0x0f
    1156:	8f 5f       	subi	r24, 0xFF	; 255
    1158:	8f 87       	std	Y+15, r24	; 0x0f
    115a:	8f 85       	ldd	r24, Y+15	; 0x0f
    115c:	85 30       	cpi	r24, 0x05	; 5
    115e:	70 f3       	brcs	.-36     	; 0x113c <receivePassword+0x20>
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	a2 e0       	ldi	r26, 0x02	; 2
    1166:	b3 e4       	ldi	r27, 0x43	; 67
    1168:	8b 87       	std	Y+11, r24	; 0x0b
    116a:	9c 87       	std	Y+12, r25	; 0x0c
    116c:	ad 87       	std	Y+13, r26	; 0x0d
    116e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1170:	6b 85       	ldd	r22, Y+11	; 0x0b
    1172:	7c 85       	ldd	r23, Y+12	; 0x0c
    1174:	8d 85       	ldd	r24, Y+13	; 0x0d
    1176:	9e 85       	ldd	r25, Y+14	; 0x0e
    1178:	20 e0       	ldi	r18, 0x00	; 0
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	4a ef       	ldi	r20, 0xFA	; 250
    117e:	54 e4       	ldi	r21, 0x44	; 68
    1180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1184:	dc 01       	movw	r26, r24
    1186:	cb 01       	movw	r24, r22
    1188:	8f 83       	std	Y+7, r24	; 0x07
    118a:	98 87       	std	Y+8, r25	; 0x08
    118c:	a9 87       	std	Y+9, r26	; 0x09
    118e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1190:	6f 81       	ldd	r22, Y+7	; 0x07
    1192:	78 85       	ldd	r23, Y+8	; 0x08
    1194:	89 85       	ldd	r24, Y+9	; 0x09
    1196:	9a 85       	ldd	r25, Y+10	; 0x0a
    1198:	20 e0       	ldi	r18, 0x00	; 0
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	40 e8       	ldi	r20, 0x80	; 128
    119e:	5f e3       	ldi	r21, 0x3F	; 63
    11a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11a4:	88 23       	and	r24, r24
    11a6:	2c f4       	brge	.+10     	; 0x11b2 <receivePassword+0x96>
		__ticks = 1;
    11a8:	81 e0       	ldi	r24, 0x01	; 1
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	9e 83       	std	Y+6, r25	; 0x06
    11ae:	8d 83       	std	Y+5, r24	; 0x05
    11b0:	3f c0       	rjmp	.+126    	; 0x1230 <receivePassword+0x114>
	else if (__tmp > 65535)
    11b2:	6f 81       	ldd	r22, Y+7	; 0x07
    11b4:	78 85       	ldd	r23, Y+8	; 0x08
    11b6:	89 85       	ldd	r24, Y+9	; 0x09
    11b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	3f ef       	ldi	r19, 0xFF	; 255
    11be:	4f e7       	ldi	r20, 0x7F	; 127
    11c0:	57 e4       	ldi	r21, 0x47	; 71
    11c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11c6:	18 16       	cp	r1, r24
    11c8:	4c f5       	brge	.+82     	; 0x121c <receivePassword+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    11cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    11d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e2       	ldi	r20, 0x20	; 32
    11d8:	51 e4       	ldi	r21, 0x41	; 65
    11da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	bc 01       	movw	r22, r24
    11e4:	cd 01       	movw	r24, r26
    11e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	9e 83       	std	Y+6, r25	; 0x06
    11f0:	8d 83       	std	Y+5, r24	; 0x05
    11f2:	0f c0       	rjmp	.+30     	; 0x1212 <receivePassword+0xf6>
    11f4:	88 ec       	ldi	r24, 0xC8	; 200
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	9c 83       	std	Y+4, r25	; 0x04
    11fa:	8b 83       	std	Y+3, r24	; 0x03
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	f1 f7       	brne	.-4      	; 0x1200 <receivePassword+0xe4>
    1204:	9c 83       	std	Y+4, r25	; 0x04
    1206:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1208:	8d 81       	ldd	r24, Y+5	; 0x05
    120a:	9e 81       	ldd	r25, Y+6	; 0x06
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	9e 83       	std	Y+6, r25	; 0x06
    1210:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1212:	8d 81       	ldd	r24, Y+5	; 0x05
    1214:	9e 81       	ldd	r25, Y+6	; 0x06
    1216:	00 97       	sbiw	r24, 0x00	; 0
    1218:	69 f7       	brne	.-38     	; 0x11f4 <receivePassword+0xd8>
    121a:	14 c0       	rjmp	.+40     	; 0x1244 <receivePassword+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    121c:	6f 81       	ldd	r22, Y+7	; 0x07
    121e:	78 85       	ldd	r23, Y+8	; 0x08
    1220:	89 85       	ldd	r24, Y+9	; 0x09
    1222:	9a 85       	ldd	r25, Y+10	; 0x0a
    1224:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1228:	dc 01       	movw	r26, r24
    122a:	cb 01       	movw	r24, r22
    122c:	9e 83       	std	Y+6, r25	; 0x06
    122e:	8d 83       	std	Y+5, r24	; 0x05
    1230:	8d 81       	ldd	r24, Y+5	; 0x05
    1232:	9e 81       	ldd	r25, Y+6	; 0x06
    1234:	9a 83       	std	Y+2, r25	; 0x02
    1236:	89 83       	std	Y+1, r24	; 0x01
    1238:	89 81       	ldd	r24, Y+1	; 0x01
    123a:	9a 81       	ldd	r25, Y+2	; 0x02
    123c:	01 97       	sbiw	r24, 0x01	; 1
    123e:	f1 f7       	brne	.-4      	; 0x123c <receivePassword+0x120>
    1240:	9a 83       	std	Y+2, r25	; 0x02
    1242:	89 83       	std	Y+1, r24	; 0x01
	{
		password [i] = UART_recieveByte();
	}
	_delay_ms (130);
}
    1244:	61 96       	adiw	r28, 0x11	; 17
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	08 95       	ret

0000125a <readPasswordeeprom>:
void readPasswordeeprom (uint8 password [])
{
    125a:	df 93       	push	r29
    125c:	cf 93       	push	r28
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	61 97       	sbiw	r28, 0x11	; 17
    1264:	0f b6       	in	r0, 0x3f	; 63
    1266:	f8 94       	cli
    1268:	de bf       	out	0x3e, r29	; 62
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	cd bf       	out	0x3d, r28	; 61
    126e:	99 8b       	std	Y+17, r25	; 0x11
    1270:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    1272:	1f 86       	std	Y+15, r1	; 0x0f
    1274:	86 c0       	rjmp	.+268    	; 0x1382 <readPasswordeeprom+0x128>
	{
		EEPROM_readByte ((0x0090 + i) , (password+i));
    1276:	8f 85       	ldd	r24, Y+15	; 0x0f
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	80 57       	subi	r24, 0x70	; 112
    127e:	9f 4f       	sbci	r25, 0xFF	; 255
    1280:	ac 01       	movw	r20, r24
    1282:	8f 85       	ldd	r24, Y+15	; 0x0f
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	88 89       	ldd	r24, Y+16	; 0x10
    128a:	99 89       	ldd	r25, Y+17	; 0x11
    128c:	28 0f       	add	r18, r24
    128e:	39 1f       	adc	r19, r25
    1290:	ca 01       	movw	r24, r20
    1292:	b9 01       	movw	r22, r18
    1294:	0e 94 90 0a 	call	0x1520	; 0x1520 <EEPROM_readByte>
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	a8 ec       	ldi	r26, 0xC8	; 200
    129e:	b2 e4       	ldi	r27, 0x42	; 66
    12a0:	8b 87       	std	Y+11, r24	; 0x0b
    12a2:	9c 87       	std	Y+12, r25	; 0x0c
    12a4:	ad 87       	std	Y+13, r26	; 0x0d
    12a6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	4a ef       	ldi	r20, 0xFA	; 250
    12b6:	54 e4       	ldi	r21, 0x44	; 68
    12b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	8f 83       	std	Y+7, r24	; 0x07
    12c2:	98 87       	std	Y+8, r25	; 0x08
    12c4:	a9 87       	std	Y+9, r26	; 0x09
    12c6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12c8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ca:	78 85       	ldd	r23, Y+8	; 0x08
    12cc:	89 85       	ldd	r24, Y+9	; 0x09
    12ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e8       	ldi	r20, 0x80	; 128
    12d6:	5f e3       	ldi	r21, 0x3F	; 63
    12d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12dc:	88 23       	and	r24, r24
    12de:	2c f4       	brge	.+10     	; 0x12ea <readPasswordeeprom+0x90>
		__ticks = 1;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	9e 83       	std	Y+6, r25	; 0x06
    12e6:	8d 83       	std	Y+5, r24	; 0x05
    12e8:	3f c0       	rjmp	.+126    	; 0x1368 <readPasswordeeprom+0x10e>
	else if (__tmp > 65535)
    12ea:	6f 81       	ldd	r22, Y+7	; 0x07
    12ec:	78 85       	ldd	r23, Y+8	; 0x08
    12ee:	89 85       	ldd	r24, Y+9	; 0x09
    12f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	3f ef       	ldi	r19, 0xFF	; 255
    12f6:	4f e7       	ldi	r20, 0x7F	; 127
    12f8:	57 e4       	ldi	r21, 0x47	; 71
    12fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fe:	18 16       	cp	r1, r24
    1300:	4c f5       	brge	.+82     	; 0x1354 <readPasswordeeprom+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1302:	6b 85       	ldd	r22, Y+11	; 0x0b
    1304:	7c 85       	ldd	r23, Y+12	; 0x0c
    1306:	8d 85       	ldd	r24, Y+13	; 0x0d
    1308:	9e 85       	ldd	r25, Y+14	; 0x0e
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e2       	ldi	r20, 0x20	; 32
    1310:	51 e4       	ldi	r21, 0x41	; 65
    1312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	bc 01       	movw	r22, r24
    131c:	cd 01       	movw	r24, r26
    131e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	9e 83       	std	Y+6, r25	; 0x06
    1328:	8d 83       	std	Y+5, r24	; 0x05
    132a:	0f c0       	rjmp	.+30     	; 0x134a <readPasswordeeprom+0xf0>
    132c:	88 ec       	ldi	r24, 0xC8	; 200
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 83       	std	Y+3, r24	; 0x03
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <readPasswordeeprom+0xde>
    133c:	9c 83       	std	Y+4, r25	; 0x04
    133e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1340:	8d 81       	ldd	r24, Y+5	; 0x05
    1342:	9e 81       	ldd	r25, Y+6	; 0x06
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	9e 83       	std	Y+6, r25	; 0x06
    1348:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134a:	8d 81       	ldd	r24, Y+5	; 0x05
    134c:	9e 81       	ldd	r25, Y+6	; 0x06
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	69 f7       	brne	.-38     	; 0x132c <readPasswordeeprom+0xd2>
    1352:	14 c0       	rjmp	.+40     	; 0x137c <readPasswordeeprom+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1354:	6f 81       	ldd	r22, Y+7	; 0x07
    1356:	78 85       	ldd	r23, Y+8	; 0x08
    1358:	89 85       	ldd	r24, Y+9	; 0x09
    135a:	9a 85       	ldd	r25, Y+10	; 0x0a
    135c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	9e 83       	std	Y+6, r25	; 0x06
    1366:	8d 83       	std	Y+5, r24	; 0x05
    1368:	8d 81       	ldd	r24, Y+5	; 0x05
    136a:	9e 81       	ldd	r25, Y+6	; 0x06
    136c:	9a 83       	std	Y+2, r25	; 0x02
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <readPasswordeeprom+0x11a>
    1378:	9a 83       	std	Y+2, r25	; 0x02
    137a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms (130);
}
void readPasswordeeprom (uint8 password [])
{
	uint8 i;
	for (i=0 ; i<5 ; ++i)
    137c:	8f 85       	ldd	r24, Y+15	; 0x0f
    137e:	8f 5f       	subi	r24, 0xFF	; 255
    1380:	8f 87       	std	Y+15, r24	; 0x0f
    1382:	8f 85       	ldd	r24, Y+15	; 0x0f
    1384:	85 30       	cpi	r24, 0x05	; 5
    1386:	08 f4       	brcc	.+2      	; 0x138a <readPasswordeeprom+0x130>
    1388:	76 cf       	rjmp	.-276    	; 0x1276 <readPasswordeeprom+0x1c>
	{
		EEPROM_readByte ((0x0090 + i) , (password+i));
		_delay_ms(100);
	}
}
    138a:	61 96       	adiw	r28, 0x11	; 17
    138c:	0f b6       	in	r0, 0x3f	; 63
    138e:	f8 94       	cli
    1390:	de bf       	out	0x3e, r29	; 62
    1392:	0f be       	out	0x3f, r0	; 63
    1394:	cd bf       	out	0x3d, r28	; 61
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <wait_seconds>:
void wait_seconds(void){
    139c:	df 93       	push	r29
    139e:	cf 93       	push	r28
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    13a4:	80 91 80 00 	lds	r24, 0x0080
    13a8:	8f 5f       	subi	r24, 0xFF	; 255
    13aa:	80 93 80 00 	sts	0x0080, r24
	if(g_tick==seconds)
    13ae:	90 91 80 00 	lds	r25, 0x0080
    13b2:	80 91 83 00 	lds	r24, 0x0083
    13b6:	98 17       	cp	r25, r24
    13b8:	11 f4       	brne	.+4      	; 0x13be <wait_seconds+0x22>
	{
		TIMER_DeInit();
    13ba:	0e 94 56 10 	call	0x20ac	; 0x20ac <TIMER_DeInit>
	}
}
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <BUZZER_Init>:
 * Description :
 * The Function responsible for setup the direction for the buzzer
 * pin through the GPIO driver.
 */
void BUZZER_Init(void)
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction of buzzer pin as output pin */
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	41 e0       	ldi	r20, 0x01	; 1
    13d2:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <GPIO_setupPinDirection>

	/* Turn off the buzzer at the beginning */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	60 e0       	ldi	r22, 0x00	; 0
    13da:	40 e0       	ldi	r20, 0x00	; 0
    13dc:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GPIO_writePin>
}
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <BUZZER_ON>:
/*
 * Description :
 * The Function responsible for turning the buzzer on.
 */
void BUZZER_ON(void)
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
	/* Turn on the buzzer */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	60 e0       	ldi	r22, 0x00	; 0
    13f2:	41 e0       	ldi	r20, 0x01	; 1
    13f4:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GPIO_writePin>
}
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <BUZZER_OFF>:
/*
 * Description :
 * The Function responsible for turning the buzzer off.
 */
void BUZZER_OFF(void)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
	/* Turn off the buzzer */
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	60 e0       	ldi	r22, 0x00	; 0
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GPIO_writePin>
}
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	08 95       	ret

00001416 <DcMotor_Init>:
 * Description :
 * The Function responsible for setup the direction for the two
 * motor pins through the GPIO driver.
 */
void DcMotor_Init(void)
{
    1416:	df 93       	push	r29
    1418:	cf 93       	push	r28
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for IN1, IN2 and EN1 pins as output pins */
	GPIO_setupPinDirection(DcMOTOR_PORT_ID, DcMOTOR_IN1_ID, PIN_OUTPUT);
    141e:	82 e0       	ldi	r24, 0x02	; 2
    1420:	64 e0       	ldi	r22, 0x04	; 4
    1422:	41 e0       	ldi	r20, 0x01	; 1
    1424:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DcMOTOR_PORT_ID, DcMOTOR_IN2_ID, PIN_OUTPUT);
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	65 e0       	ldi	r22, 0x05	; 5
    142c:	41 e0       	ldi	r20, 0x01	; 1
    142e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DcMOTOR_EN1_PORT_ID, DcMOTOR_EN1_PIN_ID, PIN_OUTPUT);
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	63 e0       	ldi	r22, 0x03	; 3
    1436:	41 e0       	ldi	r20, 0x01	; 1
    1438:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <GPIO_setupPinDirection>

	/* Stop the DC-Motor at the beginning */
	GPIO_writePin(DcMOTOR_PORT_ID, DcMOTOR_IN1_ID, LOGIC_LOW);
    143c:	82 e0       	ldi	r24, 0x02	; 2
    143e:	64 e0       	ldi	r22, 0x04	; 4
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GPIO_writePin>
	GPIO_writePin(DcMOTOR_PORT_ID, DcMOTOR_IN2_ID, LOGIC_LOW);
    1446:	82 e0       	ldi	r24, 0x02	; 2
    1448:	65 e0       	ldi	r22, 0x05	; 5
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GPIO_writePin>
}
    1450:	cf 91       	pop	r28
    1452:	df 91       	pop	r29
    1454:	08 95       	ret

00001456 <DcMotor_Rotate>:
 * Description :
 * The function responsible for rotate the DC Motor CW/ or A-CW or
 * stop the motor based on the state input state value.
 */
void DcMotor_Rotate(DcMotor_State state)
{
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	0f 92       	push	r0
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
    1460:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(DcMOTOR_PORT_ID, DcMOTOR_IN1_ID, (state & 0x01)); /* Write the first bit of state in IN1 */
    1462:	89 81       	ldd	r24, Y+1	; 0x01
    1464:	98 2f       	mov	r25, r24
    1466:	91 70       	andi	r25, 0x01	; 1
    1468:	82 e0       	ldi	r24, 0x02	; 2
    146a:	64 e0       	ldi	r22, 0x04	; 4
    146c:	49 2f       	mov	r20, r25
    146e:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GPIO_writePin>
	GPIO_writePin(DcMOTOR_PORT_ID, DcMOTOR_IN2_ID, ((state & 0x02) >> 1)); /* Write the second bit of state in IN2 */
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	82 70       	andi	r24, 0x02	; 2
    147a:	90 70       	andi	r25, 0x00	; 0
    147c:	95 95       	asr	r25
    147e:	87 95       	ror	r24
    1480:	98 2f       	mov	r25, r24
    1482:	82 e0       	ldi	r24, 0x02	; 2
    1484:	65 e0       	ldi	r22, 0x05	; 5
    1486:	49 2f       	mov	r20, r25
    1488:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GPIO_writePin>
	/* Rotate the motor with its maximum speed */
	GPIO_writePin(DcMOTOR_EN1_PORT_ID, DcMOTOR_EN1_PIN_ID, LOGIC_HIGH);
    148c:	81 e0       	ldi	r24, 0x01	; 1
    148e:	63 e0       	ldi	r22, 0x03	; 3
    1490:	41 e0       	ldi	r20, 0x01	; 1
    1492:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <GPIO_writePin>
}
    1496:	0f 90       	pop	r0
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <EEPROM_writeByte+0x6>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <EEPROM_writeByte+0x8>
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	9a 83       	std	Y+2, r25	; 0x02
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    14b0:	0e 94 d5 10 	call	0x21aa	; 0x21aa <TWI_start>
    if (TWI_getStatus() != TWI_START)
    14b4:	0e 94 2d 11 	call	0x225a	; 0x225a <TWI_getStatus>
    14b8:	88 30       	cpi	r24, 0x08	; 8
    14ba:	11 f0       	breq	.+4      	; 0x14c0 <EEPROM_writeByte+0x22>
        return ERROR;
    14bc:	1c 82       	std	Y+4, r1	; 0x04
    14be:	28 c0       	rjmp	.+80     	; 0x1510 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    14c0:	89 81       	ldd	r24, Y+1	; 0x01
    14c2:	9a 81       	ldd	r25, Y+2	; 0x02
    14c4:	80 70       	andi	r24, 0x00	; 0
    14c6:	97 70       	andi	r25, 0x07	; 7
    14c8:	88 0f       	add	r24, r24
    14ca:	89 2f       	mov	r24, r25
    14cc:	88 1f       	adc	r24, r24
    14ce:	99 0b       	sbc	r25, r25
    14d0:	91 95       	neg	r25
    14d2:	80 6a       	ori	r24, 0xA0	; 160
    14d4:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    14d8:	0e 94 2d 11 	call	0x225a	; 0x225a <TWI_getStatus>
    14dc:	88 31       	cpi	r24, 0x18	; 24
    14de:	11 f0       	breq	.+4      	; 0x14e4 <EEPROM_writeByte+0x46>
        return ERROR; 
    14e0:	1c 82       	std	Y+4, r1	; 0x04
    14e2:	16 c0       	rjmp	.+44     	; 0x1510 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    14e4:	89 81       	ldd	r24, Y+1	; 0x01
    14e6:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14ea:	0e 94 2d 11 	call	0x225a	; 0x225a <TWI_getStatus>
    14ee:	88 32       	cpi	r24, 0x28	; 40
    14f0:	11 f0       	breq	.+4      	; 0x14f6 <EEPROM_writeByte+0x58>
        return ERROR;
    14f2:	1c 82       	std	Y+4, r1	; 0x04
    14f4:	0d c0       	rjmp	.+26     	; 0x1510 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    14fc:	0e 94 2d 11 	call	0x225a	; 0x225a <TWI_getStatus>
    1500:	88 32       	cpi	r24, 0x28	; 40
    1502:	11 f0       	breq	.+4      	; 0x1508 <EEPROM_writeByte+0x6a>
        return ERROR;
    1504:	1c 82       	std	Y+4, r1	; 0x04
    1506:	04 c0       	rjmp	.+8      	; 0x1510 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1508:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_stop>
	
    return SUCCESS;
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	8c 83       	std	Y+4, r24	; 0x04
    1510:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	cf 91       	pop	r28
    151c:	df 91       	pop	r29
    151e:	08 95       	ret

00001520 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1520:	df 93       	push	r29
    1522:	cf 93       	push	r28
    1524:	00 d0       	rcall	.+0      	; 0x1526 <EEPROM_readByte+0x6>
    1526:	00 d0       	rcall	.+0      	; 0x1528 <EEPROM_readByte+0x8>
    1528:	0f 92       	push	r0
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	9a 83       	std	Y+2, r25	; 0x02
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	7c 83       	std	Y+4, r23	; 0x04
    1534:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1536:	0e 94 d5 10 	call	0x21aa	; 0x21aa <TWI_start>
    if (TWI_getStatus() != TWI_START)
    153a:	0e 94 2d 11 	call	0x225a	; 0x225a <TWI_getStatus>
    153e:	88 30       	cpi	r24, 0x08	; 8
    1540:	11 f0       	breq	.+4      	; 0x1546 <EEPROM_readByte+0x26>
        return ERROR;
    1542:	1d 82       	std	Y+5, r1	; 0x05
    1544:	44 c0       	rjmp	.+136    	; 0x15ce <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	80 70       	andi	r24, 0x00	; 0
    154c:	97 70       	andi	r25, 0x07	; 7
    154e:	88 0f       	add	r24, r24
    1550:	89 2f       	mov	r24, r25
    1552:	88 1f       	adc	r24, r24
    1554:	99 0b       	sbc	r25, r25
    1556:	91 95       	neg	r25
    1558:	80 6a       	ori	r24, 0xA0	; 160
    155a:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    155e:	0e 94 2d 11 	call	0x225a	; 0x225a <TWI_getStatus>
    1562:	88 31       	cpi	r24, 0x18	; 24
    1564:	11 f0       	breq	.+4      	; 0x156a <EEPROM_readByte+0x4a>
        return ERROR;
    1566:	1d 82       	std	Y+5, r1	; 0x05
    1568:	32 c0       	rjmp	.+100    	; 0x15ce <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1570:	0e 94 2d 11 	call	0x225a	; 0x225a <TWI_getStatus>
    1574:	88 32       	cpi	r24, 0x28	; 40
    1576:	11 f0       	breq	.+4      	; 0x157c <EEPROM_readByte+0x5c>
        return ERROR;
    1578:	1d 82       	std	Y+5, r1	; 0x05
    157a:	29 c0       	rjmp	.+82     	; 0x15ce <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    157c:	0e 94 d5 10 	call	0x21aa	; 0x21aa <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1580:	0e 94 2d 11 	call	0x225a	; 0x225a <TWI_getStatus>
    1584:	80 31       	cpi	r24, 0x10	; 16
    1586:	11 f0       	breq	.+4      	; 0x158c <EEPROM_readByte+0x6c>
        return ERROR;
    1588:	1d 82       	std	Y+5, r1	; 0x05
    158a:	21 c0       	rjmp	.+66     	; 0x15ce <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	80 70       	andi	r24, 0x00	; 0
    1592:	97 70       	andi	r25, 0x07	; 7
    1594:	88 0f       	add	r24, r24
    1596:	89 2f       	mov	r24, r25
    1598:	88 1f       	adc	r24, r24
    159a:	99 0b       	sbc	r25, r25
    159c:	91 95       	neg	r25
    159e:	81 6a       	ori	r24, 0xA1	; 161
    15a0:	0e 94 f0 10 	call	0x21e0	; 0x21e0 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    15a4:	0e 94 2d 11 	call	0x225a	; 0x225a <TWI_getStatus>
    15a8:	80 34       	cpi	r24, 0x40	; 64
    15aa:	11 f0       	breq	.+4      	; 0x15b0 <EEPROM_readByte+0x90>
        return ERROR;
    15ac:	1d 82       	std	Y+5, r1	; 0x05
    15ae:	0f c0       	rjmp	.+30     	; 0x15ce <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    15b0:	0e 94 1a 11 	call	0x2234	; 0x2234 <TWI_readByteWithNACK>
    15b4:	eb 81       	ldd	r30, Y+3	; 0x03
    15b6:	fc 81       	ldd	r31, Y+4	; 0x04
    15b8:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    15ba:	0e 94 2d 11 	call	0x225a	; 0x225a <TWI_getStatus>
    15be:	88 35       	cpi	r24, 0x58	; 88
    15c0:	11 f0       	breq	.+4      	; 0x15c6 <EEPROM_readByte+0xa6>
        return ERROR;
    15c2:	1d 82       	std	Y+5, r1	; 0x05
    15c4:	04 c0       	rjmp	.+8      	; 0x15ce <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    15c6:	0e 94 e5 10 	call	0x21ca	; 0x21ca <TWI_stop>

    return SUCCESS;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	8d 83       	std	Y+5, r24	; 0x05
    15ce:	8d 81       	ldd	r24, Y+5	; 0x05
}
    15d0:	0f 90       	pop	r0
    15d2:	0f 90       	pop	r0
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	08 95       	ret

000015e0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    15e0:	df 93       	push	r29
    15e2:	cf 93       	push	r28
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <GPIO_setupPinDirection+0x6>
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <GPIO_setupPinDirection+0x8>
    15e8:	0f 92       	push	r0
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	6a 83       	std	Y+2, r22	; 0x02
    15f2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	88 30       	cpi	r24, 0x08	; 8
    15f8:	08 f0       	brcs	.+2      	; 0x15fc <GPIO_setupPinDirection+0x1c>
    15fa:	d5 c0       	rjmp	.+426    	; 0x17a6 <GPIO_setupPinDirection+0x1c6>
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	84 30       	cpi	r24, 0x04	; 4
    1600:	08 f0       	brcs	.+2      	; 0x1604 <GPIO_setupPinDirection+0x24>
    1602:	d1 c0       	rjmp	.+418    	; 0x17a6 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	3d 83       	std	Y+5, r19	; 0x05
    160c:	2c 83       	std	Y+4, r18	; 0x04
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	9d 81       	ldd	r25, Y+5	; 0x05
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	91 05       	cpc	r25, r1
    1616:	09 f4       	brne	.+2      	; 0x161a <GPIO_setupPinDirection+0x3a>
    1618:	43 c0       	rjmp	.+134    	; 0x16a0 <GPIO_setupPinDirection+0xc0>
    161a:	2c 81       	ldd	r18, Y+4	; 0x04
    161c:	3d 81       	ldd	r19, Y+5	; 0x05
    161e:	22 30       	cpi	r18, 0x02	; 2
    1620:	31 05       	cpc	r19, r1
    1622:	2c f4       	brge	.+10     	; 0x162e <GPIO_setupPinDirection+0x4e>
    1624:	8c 81       	ldd	r24, Y+4	; 0x04
    1626:	9d 81       	ldd	r25, Y+5	; 0x05
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	71 f0       	breq	.+28     	; 0x1648 <GPIO_setupPinDirection+0x68>
    162c:	bc c0       	rjmp	.+376    	; 0x17a6 <GPIO_setupPinDirection+0x1c6>
    162e:	2c 81       	ldd	r18, Y+4	; 0x04
    1630:	3d 81       	ldd	r19, Y+5	; 0x05
    1632:	22 30       	cpi	r18, 0x02	; 2
    1634:	31 05       	cpc	r19, r1
    1636:	09 f4       	brne	.+2      	; 0x163a <GPIO_setupPinDirection+0x5a>
    1638:	5f c0       	rjmp	.+190    	; 0x16f8 <GPIO_setupPinDirection+0x118>
    163a:	8c 81       	ldd	r24, Y+4	; 0x04
    163c:	9d 81       	ldd	r25, Y+5	; 0x05
    163e:	83 30       	cpi	r24, 0x03	; 3
    1640:	91 05       	cpc	r25, r1
    1642:	09 f4       	brne	.+2      	; 0x1646 <GPIO_setupPinDirection+0x66>
    1644:	85 c0       	rjmp	.+266    	; 0x1750 <GPIO_setupPinDirection+0x170>
    1646:	af c0       	rjmp	.+350    	; 0x17a6 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	a1 f4       	brne	.+40     	; 0x1676 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    164e:	aa e3       	ldi	r26, 0x3A	; 58
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	ea e3       	ldi	r30, 0x3A	; 58
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	48 2f       	mov	r20, r24
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	02 2e       	mov	r0, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <GPIO_setupPinDirection+0x8c>
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	0a 94       	dec	r0
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <GPIO_setupPinDirection+0x88>
    1670:	84 2b       	or	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	98 c0       	rjmp	.+304    	; 0x17a6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1676:	aa e3       	ldi	r26, 0x3A	; 58
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	ea e3       	ldi	r30, 0x3A	; 58
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <GPIO_setupPinDirection+0xb4>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <GPIO_setupPinDirection+0xb0>
    1698:	80 95       	com	r24
    169a:	84 23       	and	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	83 c0       	rjmp	.+262    	; 0x17a6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	a1 f4       	brne	.+40     	; 0x16ce <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    16a6:	a7 e3       	ldi	r26, 0x37	; 55
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e7 e3       	ldi	r30, 0x37	; 55
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <GPIO_setupPinDirection+0xe4>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <GPIO_setupPinDirection+0xe0>
    16c8:	84 2b       	or	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	6c c0       	rjmp	.+216    	; 0x17a6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    16ce:	a7 e3       	ldi	r26, 0x37	; 55
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e7 e3       	ldi	r30, 0x37	; 55
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <GPIO_setupPinDirection+0x10c>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <GPIO_setupPinDirection+0x108>
    16f0:	80 95       	com	r24
    16f2:	84 23       	and	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	57 c0       	rjmp	.+174    	; 0x17a6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	a1 f4       	brne	.+40     	; 0x1726 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16fe:	a4 e3       	ldi	r26, 0x34	; 52
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e4 e3       	ldi	r30, 0x34	; 52
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <GPIO_setupPinDirection+0x13c>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <GPIO_setupPinDirection+0x138>
    1720:	84 2b       	or	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	40 c0       	rjmp	.+128    	; 0x17a6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1726:	a4 e3       	ldi	r26, 0x34	; 52
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e4 e3       	ldi	r30, 0x34	; 52
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <GPIO_setupPinDirection+0x164>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <GPIO_setupPinDirection+0x160>
    1748:	80 95       	com	r24
    174a:	84 23       	and	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	2b c0       	rjmp	.+86     	; 0x17a6 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	a1 f4       	brne	.+40     	; 0x177e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1756:	a1 e3       	ldi	r26, 0x31	; 49
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e1 e3       	ldi	r30, 0x31	; 49
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	48 2f       	mov	r20, r24
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 2e       	mov	r0, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <GPIO_setupPinDirection+0x194>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	0a 94       	dec	r0
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <GPIO_setupPinDirection+0x190>
    1778:	84 2b       	or	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	14 c0       	rjmp	.+40     	; 0x17a6 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    177e:	a1 e3       	ldi	r26, 0x31	; 49
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e1 e3       	ldi	r30, 0x31	; 49
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <GPIO_setupPinDirection+0x1bc>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <GPIO_setupPinDirection+0x1b8>
    17a0:	80 95       	com	r24
    17a2:	84 23       	and	r24, r20
    17a4:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <GPIO_writePin+0x6>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <GPIO_writePin+0x8>
    17be:	0f 92       	push	r0
    17c0:	cd b7       	in	r28, 0x3d	; 61
    17c2:	de b7       	in	r29, 0x3e	; 62
    17c4:	89 83       	std	Y+1, r24	; 0x01
    17c6:	6a 83       	std	Y+2, r22	; 0x02
    17c8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	88 30       	cpi	r24, 0x08	; 8
    17ce:	08 f0       	brcs	.+2      	; 0x17d2 <GPIO_writePin+0x1c>
    17d0:	d5 c0       	rjmp	.+426    	; 0x197c <GPIO_writePin+0x1c6>
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	84 30       	cpi	r24, 0x04	; 4
    17d6:	08 f0       	brcs	.+2      	; 0x17da <GPIO_writePin+0x24>
    17d8:	d1 c0       	rjmp	.+418    	; 0x197c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	3d 83       	std	Y+5, r19	; 0x05
    17e2:	2c 83       	std	Y+4, r18	; 0x04
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	9d 81       	ldd	r25, Y+5	; 0x05
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	91 05       	cpc	r25, r1
    17ec:	09 f4       	brne	.+2      	; 0x17f0 <GPIO_writePin+0x3a>
    17ee:	43 c0       	rjmp	.+134    	; 0x1876 <GPIO_writePin+0xc0>
    17f0:	2c 81       	ldd	r18, Y+4	; 0x04
    17f2:	3d 81       	ldd	r19, Y+5	; 0x05
    17f4:	22 30       	cpi	r18, 0x02	; 2
    17f6:	31 05       	cpc	r19, r1
    17f8:	2c f4       	brge	.+10     	; 0x1804 <GPIO_writePin+0x4e>
    17fa:	8c 81       	ldd	r24, Y+4	; 0x04
    17fc:	9d 81       	ldd	r25, Y+5	; 0x05
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	71 f0       	breq	.+28     	; 0x181e <GPIO_writePin+0x68>
    1802:	bc c0       	rjmp	.+376    	; 0x197c <GPIO_writePin+0x1c6>
    1804:	2c 81       	ldd	r18, Y+4	; 0x04
    1806:	3d 81       	ldd	r19, Y+5	; 0x05
    1808:	22 30       	cpi	r18, 0x02	; 2
    180a:	31 05       	cpc	r19, r1
    180c:	09 f4       	brne	.+2      	; 0x1810 <GPIO_writePin+0x5a>
    180e:	5f c0       	rjmp	.+190    	; 0x18ce <GPIO_writePin+0x118>
    1810:	8c 81       	ldd	r24, Y+4	; 0x04
    1812:	9d 81       	ldd	r25, Y+5	; 0x05
    1814:	83 30       	cpi	r24, 0x03	; 3
    1816:	91 05       	cpc	r25, r1
    1818:	09 f4       	brne	.+2      	; 0x181c <GPIO_writePin+0x66>
    181a:	85 c0       	rjmp	.+266    	; 0x1926 <GPIO_writePin+0x170>
    181c:	af c0       	rjmp	.+350    	; 0x197c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	81 30       	cpi	r24, 0x01	; 1
    1822:	a1 f4       	brne	.+40     	; 0x184c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1824:	ab e3       	ldi	r26, 0x3B	; 59
    1826:	b0 e0       	ldi	r27, 0x00	; 0
    1828:	eb e3       	ldi	r30, 0x3B	; 59
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	80 81       	ld	r24, Z
    182e:	48 2f       	mov	r20, r24
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	28 2f       	mov	r18, r24
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	02 2e       	mov	r0, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <GPIO_writePin+0x8c>
    183e:	88 0f       	add	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	0a 94       	dec	r0
    1844:	e2 f7       	brpl	.-8      	; 0x183e <GPIO_writePin+0x88>
    1846:	84 2b       	or	r24, r20
    1848:	8c 93       	st	X, r24
    184a:	98 c0       	rjmp	.+304    	; 0x197c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    184c:	ab e3       	ldi	r26, 0x3B	; 59
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	eb e3       	ldi	r30, 0x3B	; 59
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	48 2f       	mov	r20, r24
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	02 2e       	mov	r0, r18
    1864:	02 c0       	rjmp	.+4      	; 0x186a <GPIO_writePin+0xb4>
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	0a 94       	dec	r0
    186c:	e2 f7       	brpl	.-8      	; 0x1866 <GPIO_writePin+0xb0>
    186e:	80 95       	com	r24
    1870:	84 23       	and	r24, r20
    1872:	8c 93       	st	X, r24
    1874:	83 c0       	rjmp	.+262    	; 0x197c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	81 30       	cpi	r24, 0x01	; 1
    187a:	a1 f4       	brne	.+40     	; 0x18a4 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    187c:	a8 e3       	ldi	r26, 0x38	; 56
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e8 e3       	ldi	r30, 0x38	; 56
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	48 2f       	mov	r20, r24
    1888:	8a 81       	ldd	r24, Y+2	; 0x02
    188a:	28 2f       	mov	r18, r24
    188c:	30 e0       	ldi	r19, 0x00	; 0
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	02 2e       	mov	r0, r18
    1894:	02 c0       	rjmp	.+4      	; 0x189a <GPIO_writePin+0xe4>
    1896:	88 0f       	add	r24, r24
    1898:	99 1f       	adc	r25, r25
    189a:	0a 94       	dec	r0
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <GPIO_writePin+0xe0>
    189e:	84 2b       	or	r24, r20
    18a0:	8c 93       	st	X, r24
    18a2:	6c c0       	rjmp	.+216    	; 0x197c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    18a4:	a8 e3       	ldi	r26, 0x38	; 56
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e8 e3       	ldi	r30, 0x38	; 56
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	48 2f       	mov	r20, r24
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	02 2e       	mov	r0, r18
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <GPIO_writePin+0x10c>
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	0a 94       	dec	r0
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <GPIO_writePin+0x108>
    18c6:	80 95       	com	r24
    18c8:	84 23       	and	r24, r20
    18ca:	8c 93       	st	X, r24
    18cc:	57 c0       	rjmp	.+174    	; 0x197c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	81 30       	cpi	r24, 0x01	; 1
    18d2:	a1 f4       	brne	.+40     	; 0x18fc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    18d4:	a5 e3       	ldi	r26, 0x35	; 53
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	e5 e3       	ldi	r30, 0x35	; 53
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	48 2f       	mov	r20, r24
    18e0:	8a 81       	ldd	r24, Y+2	; 0x02
    18e2:	28 2f       	mov	r18, r24
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	02 2e       	mov	r0, r18
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <GPIO_writePin+0x13c>
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	0a 94       	dec	r0
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <GPIO_writePin+0x138>
    18f6:	84 2b       	or	r24, r20
    18f8:	8c 93       	st	X, r24
    18fa:	40 c0       	rjmp	.+128    	; 0x197c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    18fc:	a5 e3       	ldi	r26, 0x35	; 53
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e5 e3       	ldi	r30, 0x35	; 53
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	48 2f       	mov	r20, r24
    1908:	8a 81       	ldd	r24, Y+2	; 0x02
    190a:	28 2f       	mov	r18, r24
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	02 2e       	mov	r0, r18
    1914:	02 c0       	rjmp	.+4      	; 0x191a <GPIO_writePin+0x164>
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	0a 94       	dec	r0
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <GPIO_writePin+0x160>
    191e:	80 95       	com	r24
    1920:	84 23       	and	r24, r20
    1922:	8c 93       	st	X, r24
    1924:	2b c0       	rjmp	.+86     	; 0x197c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	81 30       	cpi	r24, 0x01	; 1
    192a:	a1 f4       	brne	.+40     	; 0x1954 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    192c:	a2 e3       	ldi	r26, 0x32	; 50
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e2 e3       	ldi	r30, 0x32	; 50
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	48 2f       	mov	r20, r24
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	02 2e       	mov	r0, r18
    1944:	02 c0       	rjmp	.+4      	; 0x194a <GPIO_writePin+0x194>
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	0a 94       	dec	r0
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <GPIO_writePin+0x190>
    194e:	84 2b       	or	r24, r20
    1950:	8c 93       	st	X, r24
    1952:	14 c0       	rjmp	.+40     	; 0x197c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1954:	a2 e3       	ldi	r26, 0x32	; 50
    1956:	b0 e0       	ldi	r27, 0x00	; 0
    1958:	e2 e3       	ldi	r30, 0x32	; 50
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	80 81       	ld	r24, Z
    195e:	48 2f       	mov	r20, r24
    1960:	8a 81       	ldd	r24, Y+2	; 0x02
    1962:	28 2f       	mov	r18, r24
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	02 2e       	mov	r0, r18
    196c:	02 c0       	rjmp	.+4      	; 0x1972 <GPIO_writePin+0x1bc>
    196e:	88 0f       	add	r24, r24
    1970:	99 1f       	adc	r25, r25
    1972:	0a 94       	dec	r0
    1974:	e2 f7       	brpl	.-8      	; 0x196e <GPIO_writePin+0x1b8>
    1976:	80 95       	com	r24
    1978:	84 23       	and	r24, r20
    197a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    197c:	0f 90       	pop	r0
    197e:	0f 90       	pop	r0
    1980:	0f 90       	pop	r0
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	cf 91       	pop	r28
    1988:	df 91       	pop	r29
    198a:	08 95       	ret

0000198c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	00 d0       	rcall	.+0      	; 0x1992 <GPIO_readPin+0x6>
    1992:	00 d0       	rcall	.+0      	; 0x1994 <GPIO_readPin+0x8>
    1994:	0f 92       	push	r0
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	8a 83       	std	Y+2, r24	; 0x02
    199c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    199e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19a0:	8b 81       	ldd	r24, Y+3	; 0x03
    19a2:	88 30       	cpi	r24, 0x08	; 8
    19a4:	08 f0       	brcs	.+2      	; 0x19a8 <GPIO_readPin+0x1c>
    19a6:	84 c0       	rjmp	.+264    	; 0x1ab0 <GPIO_readPin+0x124>
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	84 30       	cpi	r24, 0x04	; 4
    19ac:	08 f0       	brcs	.+2      	; 0x19b0 <GPIO_readPin+0x24>
    19ae:	80 c0       	rjmp	.+256    	; 0x1ab0 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	28 2f       	mov	r18, r24
    19b4:	30 e0       	ldi	r19, 0x00	; 0
    19b6:	3d 83       	std	Y+5, r19	; 0x05
    19b8:	2c 83       	std	Y+4, r18	; 0x04
    19ba:	4c 81       	ldd	r20, Y+4	; 0x04
    19bc:	5d 81       	ldd	r21, Y+5	; 0x05
    19be:	41 30       	cpi	r20, 0x01	; 1
    19c0:	51 05       	cpc	r21, r1
    19c2:	79 f1       	breq	.+94     	; 0x1a22 <GPIO_readPin+0x96>
    19c4:	8c 81       	ldd	r24, Y+4	; 0x04
    19c6:	9d 81       	ldd	r25, Y+5	; 0x05
    19c8:	82 30       	cpi	r24, 0x02	; 2
    19ca:	91 05       	cpc	r25, r1
    19cc:	34 f4       	brge	.+12     	; 0x19da <GPIO_readPin+0x4e>
    19ce:	2c 81       	ldd	r18, Y+4	; 0x04
    19d0:	3d 81       	ldd	r19, Y+5	; 0x05
    19d2:	21 15       	cp	r18, r1
    19d4:	31 05       	cpc	r19, r1
    19d6:	69 f0       	breq	.+26     	; 0x19f2 <GPIO_readPin+0x66>
    19d8:	6b c0       	rjmp	.+214    	; 0x1ab0 <GPIO_readPin+0x124>
    19da:	4c 81       	ldd	r20, Y+4	; 0x04
    19dc:	5d 81       	ldd	r21, Y+5	; 0x05
    19de:	42 30       	cpi	r20, 0x02	; 2
    19e0:	51 05       	cpc	r21, r1
    19e2:	b9 f1       	breq	.+110    	; 0x1a52 <GPIO_readPin+0xc6>
    19e4:	8c 81       	ldd	r24, Y+4	; 0x04
    19e6:	9d 81       	ldd	r25, Y+5	; 0x05
    19e8:	83 30       	cpi	r24, 0x03	; 3
    19ea:	91 05       	cpc	r25, r1
    19ec:	09 f4       	brne	.+2      	; 0x19f0 <GPIO_readPin+0x64>
    19ee:	49 c0       	rjmp	.+146    	; 0x1a82 <GPIO_readPin+0xf6>
    19f0:	5f c0       	rjmp	.+190    	; 0x1ab0 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    19f2:	e9 e3       	ldi	r30, 0x39	; 57
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	28 2f       	mov	r18, r24
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	8b 81       	ldd	r24, Y+3	; 0x03
    19fe:	88 2f       	mov	r24, r24
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	a9 01       	movw	r20, r18
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <GPIO_readPin+0x7e>
    1a06:	55 95       	asr	r21
    1a08:	47 95       	ror	r20
    1a0a:	8a 95       	dec	r24
    1a0c:	e2 f7       	brpl	.-8      	; 0x1a06 <GPIO_readPin+0x7a>
    1a0e:	ca 01       	movw	r24, r20
    1a10:	81 70       	andi	r24, 0x01	; 1
    1a12:	90 70       	andi	r25, 0x00	; 0
    1a14:	88 23       	and	r24, r24
    1a16:	19 f0       	breq	.+6      	; 0x1a1e <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    1a1c:	49 c0       	rjmp	.+146    	; 0x1ab0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a1e:	19 82       	std	Y+1, r1	; 0x01
    1a20:	47 c0       	rjmp	.+142    	; 0x1ab0 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a22:	e6 e3       	ldi	r30, 0x36	; 54
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	28 2f       	mov	r18, r24
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	88 2f       	mov	r24, r24
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	a9 01       	movw	r20, r18
    1a34:	02 c0       	rjmp	.+4      	; 0x1a3a <GPIO_readPin+0xae>
    1a36:	55 95       	asr	r21
    1a38:	47 95       	ror	r20
    1a3a:	8a 95       	dec	r24
    1a3c:	e2 f7       	brpl	.-8      	; 0x1a36 <GPIO_readPin+0xaa>
    1a3e:	ca 01       	movw	r24, r20
    1a40:	81 70       	andi	r24, 0x01	; 1
    1a42:	90 70       	andi	r25, 0x00	; 0
    1a44:	88 23       	and	r24, r24
    1a46:	19 f0       	breq	.+6      	; 0x1a4e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	89 83       	std	Y+1, r24	; 0x01
    1a4c:	31 c0       	rjmp	.+98     	; 0x1ab0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a4e:	19 82       	std	Y+1, r1	; 0x01
    1a50:	2f c0       	rjmp	.+94     	; 0x1ab0 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a52:	e3 e3       	ldi	r30, 0x33	; 51
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	a9 01       	movw	r20, r18
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <GPIO_readPin+0xde>
    1a66:	55 95       	asr	r21
    1a68:	47 95       	ror	r20
    1a6a:	8a 95       	dec	r24
    1a6c:	e2 f7       	brpl	.-8      	; 0x1a66 <GPIO_readPin+0xda>
    1a6e:	ca 01       	movw	r24, r20
    1a70:	81 70       	andi	r24, 0x01	; 1
    1a72:	90 70       	andi	r25, 0x00	; 0
    1a74:	88 23       	and	r24, r24
    1a76:	19 f0       	breq	.+6      	; 0x1a7e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	89 83       	std	Y+1, r24	; 0x01
    1a7c:	19 c0       	rjmp	.+50     	; 0x1ab0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a7e:	19 82       	std	Y+1, r1	; 0x01
    1a80:	17 c0       	rjmp	.+46     	; 0x1ab0 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a82:	e0 e3       	ldi	r30, 0x30	; 48
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	28 2f       	mov	r18, r24
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8e:	88 2f       	mov	r24, r24
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	a9 01       	movw	r20, r18
    1a94:	02 c0       	rjmp	.+4      	; 0x1a9a <GPIO_readPin+0x10e>
    1a96:	55 95       	asr	r21
    1a98:	47 95       	ror	r20
    1a9a:	8a 95       	dec	r24
    1a9c:	e2 f7       	brpl	.-8      	; 0x1a96 <GPIO_readPin+0x10a>
    1a9e:	ca 01       	movw	r24, r20
    1aa0:	81 70       	andi	r24, 0x01	; 1
    1aa2:	90 70       	andi	r25, 0x00	; 0
    1aa4:	88 23       	and	r24, r24
    1aa6:	19 f0       	breq	.+6      	; 0x1aae <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	89 83       	std	Y+1, r24	; 0x01
    1aac:	01 c0       	rjmp	.+2      	; 0x1ab0 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1aae:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1ab0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	0f 90       	pop	r0
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	cf 91       	pop	r28
    1abe:	df 91       	pop	r29
    1ac0:	08 95       	ret

00001ac2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ac2:	df 93       	push	r29
    1ac4:	cf 93       	push	r28
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <GPIO_setupPortDirection+0x6>
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <GPIO_setupPortDirection+0x8>
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	84 30       	cpi	r24, 0x04	; 4
    1ad6:	90 f5       	brcc	.+100    	; 0x1b3c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	28 2f       	mov	r18, r24
    1adc:	30 e0       	ldi	r19, 0x00	; 0
    1ade:	3c 83       	std	Y+4, r19	; 0x04
    1ae0:	2b 83       	std	Y+3, r18	; 0x03
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	81 30       	cpi	r24, 0x01	; 1
    1ae8:	91 05       	cpc	r25, r1
    1aea:	d1 f0       	breq	.+52     	; 0x1b20 <GPIO_setupPortDirection+0x5e>
    1aec:	2b 81       	ldd	r18, Y+3	; 0x03
    1aee:	3c 81       	ldd	r19, Y+4	; 0x04
    1af0:	22 30       	cpi	r18, 0x02	; 2
    1af2:	31 05       	cpc	r19, r1
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <GPIO_setupPortDirection+0x3e>
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	9c 81       	ldd	r25, Y+4	; 0x04
    1afa:	00 97       	sbiw	r24, 0x00	; 0
    1afc:	61 f0       	breq	.+24     	; 0x1b16 <GPIO_setupPortDirection+0x54>
    1afe:	1e c0       	rjmp	.+60     	; 0x1b3c <GPIO_setupPortDirection+0x7a>
    1b00:	2b 81       	ldd	r18, Y+3	; 0x03
    1b02:	3c 81       	ldd	r19, Y+4	; 0x04
    1b04:	22 30       	cpi	r18, 0x02	; 2
    1b06:	31 05       	cpc	r19, r1
    1b08:	81 f0       	breq	.+32     	; 0x1b2a <GPIO_setupPortDirection+0x68>
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	83 30       	cpi	r24, 0x03	; 3
    1b10:	91 05       	cpc	r25, r1
    1b12:	81 f0       	breq	.+32     	; 0x1b34 <GPIO_setupPortDirection+0x72>
    1b14:	13 c0       	rjmp	.+38     	; 0x1b3c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b16:	ea e3       	ldi	r30, 0x3A	; 58
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b1c:	80 83       	st	Z, r24
    1b1e:	0e c0       	rjmp	.+28     	; 0x1b3c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b20:	e7 e3       	ldi	r30, 0x37	; 55
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	8a 81       	ldd	r24, Y+2	; 0x02
    1b26:	80 83       	st	Z, r24
    1b28:	09 c0       	rjmp	.+18     	; 0x1b3c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b2a:	e4 e3       	ldi	r30, 0x34	; 52
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b30:	80 83       	st	Z, r24
    1b32:	04 c0       	rjmp	.+8      	; 0x1b3c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b34:	e1 e3       	ldi	r30, 0x31	; 49
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b3c:	0f 90       	pop	r0
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	00 d0       	rcall	.+0      	; 0x1b50 <GPIO_writePort+0x6>
    1b50:	00 d0       	rcall	.+0      	; 0x1b52 <GPIO_writePort+0x8>
    1b52:	cd b7       	in	r28, 0x3d	; 61
    1b54:	de b7       	in	r29, 0x3e	; 62
    1b56:	89 83       	std	Y+1, r24	; 0x01
    1b58:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	84 30       	cpi	r24, 0x04	; 4
    1b5e:	90 f5       	brcc	.+100    	; 0x1bc4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	3c 83       	std	Y+4, r19	; 0x04
    1b68:	2b 83       	std	Y+3, r18	; 0x03
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	91 05       	cpc	r25, r1
    1b72:	d1 f0       	breq	.+52     	; 0x1ba8 <GPIO_writePort+0x5e>
    1b74:	2b 81       	ldd	r18, Y+3	; 0x03
    1b76:	3c 81       	ldd	r19, Y+4	; 0x04
    1b78:	22 30       	cpi	r18, 0x02	; 2
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	2c f4       	brge	.+10     	; 0x1b88 <GPIO_writePort+0x3e>
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	00 97       	sbiw	r24, 0x00	; 0
    1b84:	61 f0       	breq	.+24     	; 0x1b9e <GPIO_writePort+0x54>
    1b86:	1e c0       	rjmp	.+60     	; 0x1bc4 <GPIO_writePort+0x7a>
    1b88:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8c:	22 30       	cpi	r18, 0x02	; 2
    1b8e:	31 05       	cpc	r19, r1
    1b90:	81 f0       	breq	.+32     	; 0x1bb2 <GPIO_writePort+0x68>
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	83 30       	cpi	r24, 0x03	; 3
    1b98:	91 05       	cpc	r25, r1
    1b9a:	81 f0       	breq	.+32     	; 0x1bbc <GPIO_writePort+0x72>
    1b9c:	13 c0       	rjmp	.+38     	; 0x1bc4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b9e:	eb e3       	ldi	r30, 0x3B	; 59
    1ba0:	f0 e0       	ldi	r31, 0x00	; 0
    1ba2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba4:	80 83       	st	Z, r24
    1ba6:	0e c0       	rjmp	.+28     	; 0x1bc4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1ba8:	e8 e3       	ldi	r30, 0x38	; 56
    1baa:	f0 e0       	ldi	r31, 0x00	; 0
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	80 83       	st	Z, r24
    1bb0:	09 c0       	rjmp	.+18     	; 0x1bc4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1bb2:	e5 e3       	ldi	r30, 0x35	; 53
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	80 83       	st	Z, r24
    1bba:	04 c0       	rjmp	.+8      	; 0x1bc4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1bbc:	e2 e3       	ldi	r30, 0x32	; 50
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bc4:	0f 90       	pop	r0
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	cf 91       	pop	r28
    1bce:	df 91       	pop	r29
    1bd0:	08 95       	ret

00001bd2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1bd2:	df 93       	push	r29
    1bd4:	cf 93       	push	r28
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <GPIO_readPort+0x6>
    1bd8:	00 d0       	rcall	.+0      	; 0x1bda <GPIO_readPort+0x8>
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1be0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1be2:	8a 81       	ldd	r24, Y+2	; 0x02
    1be4:	84 30       	cpi	r24, 0x04	; 4
    1be6:	90 f5       	brcc	.+100    	; 0x1c4c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	3c 83       	std	Y+4, r19	; 0x04
    1bf0:	2b 83       	std	Y+3, r18	; 0x03
    1bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf6:	81 30       	cpi	r24, 0x01	; 1
    1bf8:	91 05       	cpc	r25, r1
    1bfa:	d1 f0       	breq	.+52     	; 0x1c30 <GPIO_readPort+0x5e>
    1bfc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bfe:	3c 81       	ldd	r19, Y+4	; 0x04
    1c00:	22 30       	cpi	r18, 0x02	; 2
    1c02:	31 05       	cpc	r19, r1
    1c04:	2c f4       	brge	.+10     	; 0x1c10 <GPIO_readPort+0x3e>
    1c06:	8b 81       	ldd	r24, Y+3	; 0x03
    1c08:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0a:	00 97       	sbiw	r24, 0x00	; 0
    1c0c:	61 f0       	breq	.+24     	; 0x1c26 <GPIO_readPort+0x54>
    1c0e:	1e c0       	rjmp	.+60     	; 0x1c4c <GPIO_readPort+0x7a>
    1c10:	2b 81       	ldd	r18, Y+3	; 0x03
    1c12:	3c 81       	ldd	r19, Y+4	; 0x04
    1c14:	22 30       	cpi	r18, 0x02	; 2
    1c16:	31 05       	cpc	r19, r1
    1c18:	81 f0       	breq	.+32     	; 0x1c3a <GPIO_readPort+0x68>
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1e:	83 30       	cpi	r24, 0x03	; 3
    1c20:	91 05       	cpc	r25, r1
    1c22:	81 f0       	breq	.+32     	; 0x1c44 <GPIO_readPort+0x72>
    1c24:	13 c0       	rjmp	.+38     	; 0x1c4c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1c26:	e9 e3       	ldi	r30, 0x39	; 57
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	89 83       	std	Y+1, r24	; 0x01
    1c2e:	0e c0       	rjmp	.+28     	; 0x1c4c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c30:	e6 e3       	ldi	r30, 0x36	; 54
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	09 c0       	rjmp	.+18     	; 0x1c4c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c3a:	e3 e3       	ldi	r30, 0x33	; 51
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	89 83       	std	Y+1, r24	; 0x01
    1c42:	04 c0       	rjmp	.+8      	; 0x1c4c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c44:	e0 e3       	ldi	r30, 0x30	; 48
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	cf 91       	pop	r28
    1c58:	df 91       	pop	r29
    1c5a:	08 95       	ret

00001c5c <__vector_11>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

	/************************ TIMER0 ************************/
ISR(TIMER0_OVF_vect)
{
    1c5c:	1f 92       	push	r1
    1c5e:	0f 92       	push	r0
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	0f 92       	push	r0
    1c64:	11 24       	eor	r1, r1
    1c66:	2f 93       	push	r18
    1c68:	3f 93       	push	r19
    1c6a:	4f 93       	push	r20
    1c6c:	5f 93       	push	r21
    1c6e:	6f 93       	push	r22
    1c70:	7f 93       	push	r23
    1c72:	8f 93       	push	r24
    1c74:	9f 93       	push	r25
    1c76:	af 93       	push	r26
    1c78:	bf 93       	push	r27
    1c7a:	ef 93       	push	r30
    1c7c:	ff 93       	push	r31
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1c86:	80 91 81 00 	lds	r24, 0x0081
    1c8a:	90 91 82 00 	lds	r25, 0x0082
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	29 f0       	breq	.+10     	; 0x1c9c <__vector_11+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)();
    1c92:	e0 91 81 00 	lds	r30, 0x0081
    1c96:	f0 91 82 00 	lds	r31, 0x0082
    1c9a:	09 95       	icall
	}
}
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	ff 91       	pop	r31
    1ca2:	ef 91       	pop	r30
    1ca4:	bf 91       	pop	r27
    1ca6:	af 91       	pop	r26
    1ca8:	9f 91       	pop	r25
    1caa:	8f 91       	pop	r24
    1cac:	7f 91       	pop	r23
    1cae:	6f 91       	pop	r22
    1cb0:	5f 91       	pop	r21
    1cb2:	4f 91       	pop	r20
    1cb4:	3f 91       	pop	r19
    1cb6:	2f 91       	pop	r18
    1cb8:	0f 90       	pop	r0
    1cba:	0f be       	out	0x3f, r0	; 63
    1cbc:	0f 90       	pop	r0
    1cbe:	1f 90       	pop	r1
    1cc0:	18 95       	reti

00001cc2 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1cc2:	1f 92       	push	r1
    1cc4:	0f 92       	push	r0
    1cc6:	0f b6       	in	r0, 0x3f	; 63
    1cc8:	0f 92       	push	r0
    1cca:	11 24       	eor	r1, r1
    1ccc:	2f 93       	push	r18
    1cce:	3f 93       	push	r19
    1cd0:	4f 93       	push	r20
    1cd2:	5f 93       	push	r21
    1cd4:	6f 93       	push	r22
    1cd6:	7f 93       	push	r23
    1cd8:	8f 93       	push	r24
    1cda:	9f 93       	push	r25
    1cdc:	af 93       	push	r26
    1cde:	bf 93       	push	r27
    1ce0:	ef 93       	push	r30
    1ce2:	ff 93       	push	r31
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1cec:	80 91 81 00 	lds	r24, 0x0081
    1cf0:	90 91 82 00 	lds	r25, 0x0082
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	29 f0       	breq	.+10     	; 0x1d02 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)();
    1cf8:	e0 91 81 00 	lds	r30, 0x0081
    1cfc:	f0 91 82 00 	lds	r31, 0x0082
    1d00:	09 95       	icall
	}
}
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	ff 91       	pop	r31
    1d08:	ef 91       	pop	r30
    1d0a:	bf 91       	pop	r27
    1d0c:	af 91       	pop	r26
    1d0e:	9f 91       	pop	r25
    1d10:	8f 91       	pop	r24
    1d12:	7f 91       	pop	r23
    1d14:	6f 91       	pop	r22
    1d16:	5f 91       	pop	r21
    1d18:	4f 91       	pop	r20
    1d1a:	3f 91       	pop	r19
    1d1c:	2f 91       	pop	r18
    1d1e:	0f 90       	pop	r0
    1d20:	0f be       	out	0x3f, r0	; 63
    1d22:	0f 90       	pop	r0
    1d24:	1f 90       	pop	r1
    1d26:	18 95       	reti

00001d28 <__vector_9>:

	/************************ TIMER1 ************************/
ISR(TIMER1_OVF_vect)
{
    1d28:	1f 92       	push	r1
    1d2a:	0f 92       	push	r0
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	0f 92       	push	r0
    1d30:	11 24       	eor	r1, r1
    1d32:	2f 93       	push	r18
    1d34:	3f 93       	push	r19
    1d36:	4f 93       	push	r20
    1d38:	5f 93       	push	r21
    1d3a:	6f 93       	push	r22
    1d3c:	7f 93       	push	r23
    1d3e:	8f 93       	push	r24
    1d40:	9f 93       	push	r25
    1d42:	af 93       	push	r26
    1d44:	bf 93       	push	r27
    1d46:	ef 93       	push	r30
    1d48:	ff 93       	push	r31
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1d52:	80 91 81 00 	lds	r24, 0x0081
    1d56:	90 91 82 00 	lds	r25, 0x0082
    1d5a:	00 97       	sbiw	r24, 0x00	; 0
    1d5c:	29 f0       	breq	.+10     	; 0x1d68 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)();
    1d5e:	e0 91 81 00 	lds	r30, 0x0081
    1d62:	f0 91 82 00 	lds	r31, 0x0082
    1d66:	09 95       	icall
	}
}
    1d68:	cf 91       	pop	r28
    1d6a:	df 91       	pop	r29
    1d6c:	ff 91       	pop	r31
    1d6e:	ef 91       	pop	r30
    1d70:	bf 91       	pop	r27
    1d72:	af 91       	pop	r26
    1d74:	9f 91       	pop	r25
    1d76:	8f 91       	pop	r24
    1d78:	7f 91       	pop	r23
    1d7a:	6f 91       	pop	r22
    1d7c:	5f 91       	pop	r21
    1d7e:	4f 91       	pop	r20
    1d80:	3f 91       	pop	r19
    1d82:	2f 91       	pop	r18
    1d84:	0f 90       	pop	r0
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	0f 90       	pop	r0
    1d8a:	1f 90       	pop	r1
    1d8c:	18 95       	reti

00001d8e <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    1d8e:	1f 92       	push	r1
    1d90:	0f 92       	push	r0
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	0f 92       	push	r0
    1d96:	11 24       	eor	r1, r1
    1d98:	2f 93       	push	r18
    1d9a:	3f 93       	push	r19
    1d9c:	4f 93       	push	r20
    1d9e:	5f 93       	push	r21
    1da0:	6f 93       	push	r22
    1da2:	7f 93       	push	r23
    1da4:	8f 93       	push	r24
    1da6:	9f 93       	push	r25
    1da8:	af 93       	push	r26
    1daa:	bf 93       	push	r27
    1dac:	ef 93       	push	r30
    1dae:	ff 93       	push	r31
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1db8:	80 91 81 00 	lds	r24, 0x0081
    1dbc:	90 91 82 00 	lds	r25, 0x0082
    1dc0:	00 97       	sbiw	r24, 0x00	; 0
    1dc2:	29 f0       	breq	.+10     	; 0x1dce <__vector_7+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)();
    1dc4:	e0 91 81 00 	lds	r30, 0x0081
    1dc8:	f0 91 82 00 	lds	r31, 0x0082
    1dcc:	09 95       	icall
	}
}
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	ff 91       	pop	r31
    1dd4:	ef 91       	pop	r30
    1dd6:	bf 91       	pop	r27
    1dd8:	af 91       	pop	r26
    1dda:	9f 91       	pop	r25
    1ddc:	8f 91       	pop	r24
    1dde:	7f 91       	pop	r23
    1de0:	6f 91       	pop	r22
    1de2:	5f 91       	pop	r21
    1de4:	4f 91       	pop	r20
    1de6:	3f 91       	pop	r19
    1de8:	2f 91       	pop	r18
    1dea:	0f 90       	pop	r0
    1dec:	0f be       	out	0x3f, r0	; 63
    1dee:	0f 90       	pop	r0
    1df0:	1f 90       	pop	r1
    1df2:	18 95       	reti

00001df4 <__vector_5>:

	/************************ TIMER2 ************************/
ISR(TIMER2_OVF_vect)
{
    1df4:	1f 92       	push	r1
    1df6:	0f 92       	push	r0
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	0f 92       	push	r0
    1dfc:	11 24       	eor	r1, r1
    1dfe:	2f 93       	push	r18
    1e00:	3f 93       	push	r19
    1e02:	4f 93       	push	r20
    1e04:	5f 93       	push	r21
    1e06:	6f 93       	push	r22
    1e08:	7f 93       	push	r23
    1e0a:	8f 93       	push	r24
    1e0c:	9f 93       	push	r25
    1e0e:	af 93       	push	r26
    1e10:	bf 93       	push	r27
    1e12:	ef 93       	push	r30
    1e14:	ff 93       	push	r31
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1e1e:	80 91 81 00 	lds	r24, 0x0081
    1e22:	90 91 82 00 	lds	r25, 0x0082
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	29 f0       	breq	.+10     	; 0x1e34 <__vector_5+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)();
    1e2a:	e0 91 81 00 	lds	r30, 0x0081
    1e2e:	f0 91 82 00 	lds	r31, 0x0082
    1e32:	09 95       	icall
	}
}
    1e34:	cf 91       	pop	r28
    1e36:	df 91       	pop	r29
    1e38:	ff 91       	pop	r31
    1e3a:	ef 91       	pop	r30
    1e3c:	bf 91       	pop	r27
    1e3e:	af 91       	pop	r26
    1e40:	9f 91       	pop	r25
    1e42:	8f 91       	pop	r24
    1e44:	7f 91       	pop	r23
    1e46:	6f 91       	pop	r22
    1e48:	5f 91       	pop	r21
    1e4a:	4f 91       	pop	r20
    1e4c:	3f 91       	pop	r19
    1e4e:	2f 91       	pop	r18
    1e50:	0f 90       	pop	r0
    1e52:	0f be       	out	0x3f, r0	; 63
    1e54:	0f 90       	pop	r0
    1e56:	1f 90       	pop	r1
    1e58:	18 95       	reti

00001e5a <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    1e5a:	1f 92       	push	r1
    1e5c:	0f 92       	push	r0
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	0f 92       	push	r0
    1e62:	11 24       	eor	r1, r1
    1e64:	2f 93       	push	r18
    1e66:	3f 93       	push	r19
    1e68:	4f 93       	push	r20
    1e6a:	5f 93       	push	r21
    1e6c:	6f 93       	push	r22
    1e6e:	7f 93       	push	r23
    1e70:	8f 93       	push	r24
    1e72:	9f 93       	push	r25
    1e74:	af 93       	push	r26
    1e76:	bf 93       	push	r27
    1e78:	ef 93       	push	r30
    1e7a:	ff 93       	push	r31
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1e84:	80 91 81 00 	lds	r24, 0x0081
    1e88:	90 91 82 00 	lds	r25, 0x0082
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	29 f0       	breq	.+10     	; 0x1e9a <__vector_4+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)();
    1e90:	e0 91 81 00 	lds	r30, 0x0081
    1e94:	f0 91 82 00 	lds	r31, 0x0082
    1e98:	09 95       	icall
	}
}
    1e9a:	cf 91       	pop	r28
    1e9c:	df 91       	pop	r29
    1e9e:	ff 91       	pop	r31
    1ea0:	ef 91       	pop	r30
    1ea2:	bf 91       	pop	r27
    1ea4:	af 91       	pop	r26
    1ea6:	9f 91       	pop	r25
    1ea8:	8f 91       	pop	r24
    1eaa:	7f 91       	pop	r23
    1eac:	6f 91       	pop	r22
    1eae:	5f 91       	pop	r21
    1eb0:	4f 91       	pop	r20
    1eb2:	3f 91       	pop	r19
    1eb4:	2f 91       	pop	r18
    1eb6:	0f 90       	pop	r0
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	0f 90       	pop	r0
    1ebc:	1f 90       	pop	r1
    1ebe:	18 95       	reti

00001ec0 <TIMER_Init>:
/*
 * Description :
 * Function responsible for initializing the Timer.
 */
void TIMER_Init(const TIMER_ConfigType * Config_Ptr)
{
    1ec0:	df 93       	push	r29
    1ec2:	cf 93       	push	r28
    1ec4:	00 d0       	rcall	.+0      	; 0x1ec6 <TIMER_Init+0x6>
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	9a 83       	std	Y+2, r25	; 0x02
    1ecc:	89 83       	std	Y+1, r24	; 0x01
	/************************ TIMER0 ************************/
	if(Config_Ptr->TIMER_id == TIMER0)
    1ece:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed2:	80 81       	ld	r24, Z
    1ed4:	88 23       	and	r24, r24
    1ed6:	09 f0       	breq	.+2      	; 0x1eda <TIMER_Init+0x1a>
    1ed8:	3f c0       	rjmp	.+126    	; 0x1f58 <TIMER_Init+0x98>
	{
		if(Config_Ptr->TIMER_mode == TIMER_NORMAL_MODE)
    1eda:	e9 81       	ldd	r30, Y+1	; 0x01
    1edc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ede:	81 81       	ldd	r24, Z+1	; 0x01
    1ee0:	88 23       	and	r24, r24
    1ee2:	61 f4       	brne	.+24     	; 0x1efc <TIMER_Init+0x3c>
			/* configure the timer0 control register
			 * 1. Normal mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal port operation COM00=0 & COM01=0
			 */
			TCCR0 = (1<<FOC0);
    1ee4:	e3 e5       	ldi	r30, 0x53	; 83
    1ee6:	f0 e0       	ldi	r31, 0x00	; 0
    1ee8:	80 e8       	ldi	r24, 0x80	; 128
    1eea:	80 83       	st	Z, r24

			/* Enable Timer0 Overflow Interrupt */
			TIMSK |= (1<<TOIE0);
    1eec:	a9 e5       	ldi	r26, 0x59	; 89
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e9 e5       	ldi	r30, 0x59	; 89
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	81 60       	ori	r24, 0x01	; 1
    1ef8:	8c 93       	st	X, r24
    1efa:	1a c0       	rjmp	.+52     	; 0x1f30 <TIMER_Init+0x70>
		}

		else if(Config_Ptr->TIMER_mode == TIMER_COMPARE_MODE)
    1efc:	e9 81       	ldd	r30, Y+1	; 0x01
    1efe:	fa 81       	ldd	r31, Y+2	; 0x02
    1f00:	81 81       	ldd	r24, Z+1	; 0x01
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	a9 f4       	brne	.+42     	; 0x1f30 <TIMER_Init+0x70>
			/* configure the timer0 control register
			 * 1. Compare mode FOC0=1
			 * 2. Compare Mode WGM01=1 & WGM00=0
			 * 3. Normal port operation COM00=0 & COM01=0
			 */
			TCCR0 = (1<<FOC0) | (1<<WGM01);
    1f06:	e3 e5       	ldi	r30, 0x53	; 83
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	88 e8       	ldi	r24, 0x88	; 136
    1f0c:	80 83       	st	Z, r24

			/* Enable Timer0 Compare Interrupt */
			TIMSK |= (1<<OCIE0);
    1f0e:	a9 e5       	ldi	r26, 0x59	; 89
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e9 e5       	ldi	r30, 0x59	; 89
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	82 60       	ori	r24, 0x02	; 2
    1f1a:	8c 93       	st	X, r24

			/* Set Timer0 Compare Value */
			OCR0 = (Config_Ptr->TIMER_compareValue);
    1f1c:	2c e5       	ldi	r18, 0x5C	; 92
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	e9 81       	ldd	r30, Y+1	; 0x01
    1f22:	fa 81       	ldd	r31, Y+2	; 0x02
    1f24:	87 81       	ldd	r24, Z+7	; 0x07
    1f26:	90 85       	ldd	r25, Z+8	; 0x08
    1f28:	a1 85       	ldd	r26, Z+9	; 0x09
    1f2a:	b2 85       	ldd	r27, Z+10	; 0x0a
    1f2c:	f9 01       	movw	r30, r18
    1f2e:	80 83       	st	Z, r24

		/*
		 * Adjust the prescaler by inserting the three bits of the required prescaler
		 * value in bits ( CS00 & CS01 & CS02 ) of TCCR0 Register
		 */
		TCCR0 |= (Config_Ptr->presaler);
    1f30:	a3 e5       	ldi	r26, 0x53	; 83
    1f32:	b0 e0       	ldi	r27, 0x00	; 0
    1f34:	e3 e5       	ldi	r30, 0x53	; 83
    1f36:	f0 e0       	ldi	r31, 0x00	; 0
    1f38:	90 81       	ld	r25, Z
    1f3a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f3c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3e:	82 81       	ldd	r24, Z+2	; 0x02
    1f40:	89 2b       	or	r24, r25
    1f42:	8c 93       	st	X, r24

		/* Set Timer0 Initial Value */
		TCNT0 = (Config_Ptr->TIMER_initialValue);
    1f44:	22 e5       	ldi	r18, 0x52	; 82
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	e9 81       	ldd	r30, Y+1	; 0x01
    1f4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f4c:	83 81       	ldd	r24, Z+3	; 0x03
    1f4e:	94 81       	ldd	r25, Z+4	; 0x04
    1f50:	a5 81       	ldd	r26, Z+5	; 0x05
    1f52:	b6 81       	ldd	r27, Z+6	; 0x06
    1f54:	f9 01       	movw	r30, r18
    1f56:	80 83       	st	Z, r24
	}

	/************************ TIMER1 ************************/

	if(Config_Ptr->TIMER_id == TIMER1)
    1f58:	e9 81       	ldd	r30, Y+1	; 0x01
    1f5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1f5c:	80 81       	ld	r24, Z
    1f5e:	81 30       	cpi	r24, 0x01	; 1
    1f60:	09 f0       	breq	.+2      	; 0x1f64 <TIMER_Init+0xa4>
    1f62:	48 c0       	rjmp	.+144    	; 0x1ff4 <TIMER_Init+0x134>
	{
		if(Config_Ptr->TIMER_mode == TIMER_NORMAL_MODE)
    1f64:	e9 81       	ldd	r30, Y+1	; 0x01
    1f66:	fa 81       	ldd	r31, Y+2	; 0x02
    1f68:	81 81       	ldd	r24, Z+1	; 0x01
    1f6a:	88 23       	and	r24, r24
    1f6c:	79 f4       	brne	.+30     	; 0x1f8c <TIMER_Init+0xcc>
			/* configure the timer1 control register TCCR1A
			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=1 FOC1B=0
			 * 3. Normal Mode WGM10=1 WGM11=1
			 */
			TCCR1A = (1<<FOC1A) | (1<<WGM10) | (1<<WGM11);
    1f6e:	ef e4       	ldi	r30, 0x4F	; 79
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	8b e0       	ldi	r24, 0x0B	; 11
    1f74:	80 83       	st	Z, r24

			/* configure the timer1 control register TCCR1B
			 * 1. Normal Mode WGM12=0 WGM13=0
			 */
			TCCR1B = 0;
    1f76:	ee e4       	ldi	r30, 0x4E	; 78
    1f78:	f0 e0       	ldi	r31, 0x00	; 0
    1f7a:	10 82       	st	Z, r1

			/* Enable Timer1 Overflow Interrupt */
			TIMSK |= (1<<TOIE1);
    1f7c:	a9 e5       	ldi	r26, 0x59	; 89
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e9 e5       	ldi	r30, 0x59	; 89
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	84 60       	ori	r24, 0x04	; 4
    1f88:	8c 93       	st	X, r24
    1f8a:	1f c0       	rjmp	.+62     	; 0x1fca <TIMER_Init+0x10a>
		}

		else if(Config_Ptr->TIMER_mode == TIMER_COMPARE_MODE)
    1f8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f90:	81 81       	ldd	r24, Z+1	; 0x01
    1f92:	81 30       	cpi	r24, 0x01	; 1
    1f94:	d1 f4       	brne	.+52     	; 0x1fca <TIMER_Init+0x10a>
			/* Configure timer1 control register TCCR1A
			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=1 FOC1B=0
			 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
			 */
			TCCR1A = (1<<FOC1A);
    1f96:	ef e4       	ldi	r30, 0x4F	; 79
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	88 e0       	ldi	r24, 0x08	; 8
    1f9c:	80 83       	st	Z, r24

			/* Configure timer1 control register TCCR1B
			 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
			 */
			TCCR1B = (1<<WGM12);
    1f9e:	ee e4       	ldi	r30, 0x4E	; 78
    1fa0:	f0 e0       	ldi	r31, 0x00	; 0
    1fa2:	88 e0       	ldi	r24, 0x08	; 8
    1fa4:	80 83       	st	Z, r24

			/* Enable Timer1 Compare Interrupt */
			TIMSK |= (1<<OCIE1A);
    1fa6:	a9 e5       	ldi	r26, 0x59	; 89
    1fa8:	b0 e0       	ldi	r27, 0x00	; 0
    1faa:	e9 e5       	ldi	r30, 0x59	; 89
    1fac:	f0 e0       	ldi	r31, 0x00	; 0
    1fae:	80 81       	ld	r24, Z
    1fb0:	80 61       	ori	r24, 0x10	; 16
    1fb2:	8c 93       	st	X, r24

			/* Set Timer1 Compare Value */
			OCR1A = (Config_Ptr->TIMER_compareValue);
    1fb4:	2a e4       	ldi	r18, 0x4A	; 74
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fba:	fa 81       	ldd	r31, Y+2	; 0x02
    1fbc:	87 81       	ldd	r24, Z+7	; 0x07
    1fbe:	90 85       	ldd	r25, Z+8	; 0x08
    1fc0:	a1 85       	ldd	r26, Z+9	; 0x09
    1fc2:	b2 85       	ldd	r27, Z+10	; 0x0a
    1fc4:	f9 01       	movw	r30, r18
    1fc6:	91 83       	std	Z+1, r25	; 0x01
    1fc8:	80 83       	st	Z, r24

		/*
		 * Adjust the prescaler by inserting the three bits of the required prescaler
		 * value in bits ( CS10 & CS11 & CS12 ) of TCCR1B Register
		 */
		TCCR1B |= (Config_Ptr->presaler);
    1fca:	ae e4       	ldi	r26, 0x4E	; 78
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	ee e4       	ldi	r30, 0x4E	; 78
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	90 81       	ld	r25, Z
    1fd4:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd6:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	89 2b       	or	r24, r25
    1fdc:	8c 93       	st	X, r24

		/* Set Timer1 Initial Value */
		TCNT1 = (Config_Ptr->TIMER_initialValue);
    1fde:	2c e4       	ldi	r18, 0x4C	; 76
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	e9 81       	ldd	r30, Y+1	; 0x01
    1fe4:	fa 81       	ldd	r31, Y+2	; 0x02
    1fe6:	83 81       	ldd	r24, Z+3	; 0x03
    1fe8:	94 81       	ldd	r25, Z+4	; 0x04
    1fea:	a5 81       	ldd	r26, Z+5	; 0x05
    1fec:	b6 81       	ldd	r27, Z+6	; 0x06
    1fee:	f9 01       	movw	r30, r18
    1ff0:	91 83       	std	Z+1, r25	; 0x01
    1ff2:	80 83       	st	Z, r24
	}

	/************************ TIMER2 ************************/

	if(Config_Ptr->TIMER_id == TIMER2)
    1ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff8:	80 81       	ld	r24, Z
    1ffa:	82 30       	cpi	r24, 0x02	; 2
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <TIMER_Init+0x140>
    1ffe:	3f c0       	rjmp	.+126    	; 0x207e <TIMER_Init+0x1be>
	{
		if(Config_Ptr->TIMER_mode == TIMER_NORMAL_MODE)
    2000:	e9 81       	ldd	r30, Y+1	; 0x01
    2002:	fa 81       	ldd	r31, Y+2	; 0x02
    2004:	81 81       	ldd	r24, Z+1	; 0x01
    2006:	88 23       	and	r24, r24
    2008:	61 f4       	brne	.+24     	; 0x2022 <TIMER_Init+0x162>
			/* configure the timer2 control register
			 * 1. Normal mode FOC2=1
			 * 2. Normal Mode WGM21=0 & WGM20=0
			 * 3. Normal port operation COM00=0 & COM01=0
			 */
			TCCR2 = (1<<FOC2);
    200a:	e5 e4       	ldi	r30, 0x45	; 69
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 e8       	ldi	r24, 0x80	; 128
    2010:	80 83       	st	Z, r24

			/* Enable Timer2 Overflow Interrupt */
			TIMSK |= (1<<TOIE2);
    2012:	a9 e5       	ldi	r26, 0x59	; 89
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e9 e5       	ldi	r30, 0x59	; 89
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	80 64       	ori	r24, 0x40	; 64
    201e:	8c 93       	st	X, r24
    2020:	1a c0       	rjmp	.+52     	; 0x2056 <TIMER_Init+0x196>
		}

		else if(Config_Ptr->TIMER_mode == TIMER_COMPARE_MODE)
    2022:	e9 81       	ldd	r30, Y+1	; 0x01
    2024:	fa 81       	ldd	r31, Y+2	; 0x02
    2026:	81 81       	ldd	r24, Z+1	; 0x01
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	a9 f4       	brne	.+42     	; 0x2056 <TIMER_Init+0x196>
			/* configure the timer2 control register
			 * 1. Compare mode FOC2=1
			 * 2. Compare Mode WGM21=1 & WGM20=0
			 * 3. Normal port operation COM00=0 & COM01=0
			 */
			TCCR2 = (1<<FOC2) | (1<<WGM21);
    202c:	e5 e4       	ldi	r30, 0x45	; 69
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	88 e8       	ldi	r24, 0x88	; 136
    2032:	80 83       	st	Z, r24

			/* Enable Timer2 Compare Interrupt */
			TIMSK |= (1<<OCIE2);
    2034:	a9 e5       	ldi	r26, 0x59	; 89
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e9 e5       	ldi	r30, 0x59	; 89
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	80 81       	ld	r24, Z
    203e:	80 68       	ori	r24, 0x80	; 128
    2040:	8c 93       	st	X, r24

			/* Set Timer2 Compare Value */
			OCR2 = (Config_Ptr->TIMER_compareValue);
    2042:	23 e4       	ldi	r18, 0x43	; 67
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	e9 81       	ldd	r30, Y+1	; 0x01
    2048:	fa 81       	ldd	r31, Y+2	; 0x02
    204a:	87 81       	ldd	r24, Z+7	; 0x07
    204c:	90 85       	ldd	r25, Z+8	; 0x08
    204e:	a1 85       	ldd	r26, Z+9	; 0x09
    2050:	b2 85       	ldd	r27, Z+10	; 0x0a
    2052:	f9 01       	movw	r30, r18
    2054:	80 83       	st	Z, r24

		/*
		 * Adjust the prescaler by inserting the three bits of the required prescaler
		 * value in bits ( CS20 & CS21 & CS22 ) of TCCR2 Register
		 */
		TCCR2 |= (Config_Ptr->presaler);
    2056:	a5 e4       	ldi	r26, 0x45	; 69
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e5 e4       	ldi	r30, 0x45	; 69
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	90 81       	ld	r25, Z
    2060:	e9 81       	ldd	r30, Y+1	; 0x01
    2062:	fa 81       	ldd	r31, Y+2	; 0x02
    2064:	82 81       	ldd	r24, Z+2	; 0x02
    2066:	89 2b       	or	r24, r25
    2068:	8c 93       	st	X, r24

		/* Set Timer2 Initial Value */
		TCNT2 = (Config_Ptr->TIMER_initialValue);
    206a:	24 e4       	ldi	r18, 0x44	; 68
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	e9 81       	ldd	r30, Y+1	; 0x01
    2070:	fa 81       	ldd	r31, Y+2	; 0x02
    2072:	83 81       	ldd	r24, Z+3	; 0x03
    2074:	94 81       	ldd	r25, Z+4	; 0x04
    2076:	a5 81       	ldd	r26, Z+5	; 0x05
    2078:	b6 81       	ldd	r27, Z+6	; 0x06
    207a:	f9 01       	movw	r30, r18
    207c:	80 83       	st	Z, r24
	}
}
    207e:	0f 90       	pop	r0
    2080:	0f 90       	pop	r0
    2082:	cf 91       	pop	r28
    2084:	df 91       	pop	r29
    2086:	08 95       	ret

00002088 <TIMER_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void TIMER_setCallBack(void(*a_ptr)(void))
{
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	00 d0       	rcall	.+0      	; 0x208e <TIMER_setCallBack+0x6>
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	9a 83       	std	Y+2, r25	; 0x02
    2094:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	9a 81       	ldd	r25, Y+2	; 0x02
    209a:	90 93 82 00 	sts	0x0082, r25
    209e:	80 93 81 00 	sts	0x0081, r24
}
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	cf 91       	pop	r28
    20a8:	df 91       	pop	r29
    20aa:	08 95       	ret

000020ac <TIMER_DeInit>:
/*
 * Description :
 * Function to disable the Timer.
 */
void TIMER_DeInit(void)
{
    20ac:	df 93       	push	r29
    20ae:	cf 93       	push	r28
    20b0:	cd b7       	in	r28, 0x3d	; 61
    20b2:	de b7       	in	r29, 0x3e	; 62
	/************************ TIMER0 ************************/

	/* Clear All Timer0 Registers and stop the clock */
	TCCR0 = 0;
    20b4:	e3 e5       	ldi	r30, 0x53	; 83
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	10 82       	st	Z, r1
	TCNT0 = 0;
    20ba:	e2 e5       	ldi	r30, 0x52	; 82
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	10 82       	st	Z, r1

	/* Disable Timer0 Overflow Interrupt */
	TIMSK &= ~(1<<TOIE0);
    20c0:	a9 e5       	ldi	r26, 0x59	; 89
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e9 e5       	ldi	r30, 0x59	; 89
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	8e 7f       	andi	r24, 0xFE	; 254
    20cc:	8c 93       	st	X, r24

	/* Disable Timer0 Compare Interrupt */
	TIMSK &= ~(1<<OCIE0);
    20ce:	a9 e5       	ldi	r26, 0x59	; 89
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	e9 e5       	ldi	r30, 0x59	; 89
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	8d 7f       	andi	r24, 0xFD	; 253
    20da:	8c 93       	st	X, r24

	/************************ TIMER1 ************************/

	/* Clear All Timer1 Registers and stop the clock */
	TCCR1A = 0;
    20dc:	ef e4       	ldi	r30, 0x4F	; 79
    20de:	f0 e0       	ldi	r31, 0x00	; 0
    20e0:	10 82       	st	Z, r1
	TCCR1B = 0;
    20e2:	ee e4       	ldi	r30, 0x4E	; 78
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	10 82       	st	Z, r1
	TCNT1 = 0;
    20e8:	ec e4       	ldi	r30, 0x4C	; 76
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	11 82       	std	Z+1, r1	; 0x01
    20ee:	10 82       	st	Z, r1

	/* Disable Timer1 Overflow Interrupt */
	TIMSK &= ~(1<<TOIE1);
    20f0:	a9 e5       	ldi	r26, 0x59	; 89
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e9 e5       	ldi	r30, 0x59	; 89
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	8b 7f       	andi	r24, 0xFB	; 251
    20fc:	8c 93       	st	X, r24

	/* Disable Timer1 Compare Interrupt */
	TIMSK &= ~(1<<OCIE1A);
    20fe:	a9 e5       	ldi	r26, 0x59	; 89
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e9 e5       	ldi	r30, 0x59	; 89
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	8f 7e       	andi	r24, 0xEF	; 239
    210a:	8c 93       	st	X, r24

	/************************ TIMER2 ************************/

	/* Clear All Timer2 Registers and stop the clock */
	TCCR2 = 0;
    210c:	e5 e4       	ldi	r30, 0x45	; 69
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	10 82       	st	Z, r1
	TCNT2 = 0;
    2112:	e4 e4       	ldi	r30, 0x44	; 68
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	10 82       	st	Z, r1

	/* Disable Timer2 Overflow Interrupt */
	TIMSK &= ~(1<<TOIE2);
    2118:	a9 e5       	ldi	r26, 0x59	; 89
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	e9 e5       	ldi	r30, 0x59	; 89
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
    2122:	8f 7b       	andi	r24, 0xBF	; 191
    2124:	8c 93       	st	X, r24

	/* Disable Timer2 Compare Interrupt */
	TIMSK &= ~(1<<OCIE2);
    2126:	a9 e5       	ldi	r26, 0x59	; 89
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e9 e5       	ldi	r30, 0x59	; 89
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	8f 77       	andi	r24, 0x7F	; 127
    2132:	8c 93       	st	X, r24
}
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    213a:	0f 93       	push	r16
    213c:	1f 93       	push	r17
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	00 d0       	rcall	.+0      	; 0x2144 <TWI_init+0xa>
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	9a 83       	std	Y+2, r25	; 0x02
    214a:	89 83       	std	Y+1, r24	; 0x01
	/* Bit Rate using zero pre-scaler TWPS=00 */
		TWBR = (((F_CPU /Config_Ptr->bit_rate ) - 16) / 2);
    214c:	00 e2       	ldi	r16, 0x20	; 32
    214e:	10 e0       	ldi	r17, 0x00	; 0
    2150:	e9 81       	ldd	r30, Y+1	; 0x01
    2152:	fa 81       	ldd	r31, Y+2	; 0x02
    2154:	21 81       	ldd	r18, Z+1	; 0x01
    2156:	32 81       	ldd	r19, Z+2	; 0x02
    2158:	43 81       	ldd	r20, Z+3	; 0x03
    215a:	54 81       	ldd	r21, Z+4	; 0x04
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	92 e1       	ldi	r25, 0x12	; 18
    2160:	aa e7       	ldi	r26, 0x7A	; 122
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	bc 01       	movw	r22, r24
    2166:	cd 01       	movw	r24, r26
    2168:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__udivmodsi4>
    216c:	da 01       	movw	r26, r20
    216e:	c9 01       	movw	r24, r18
    2170:	40 97       	sbiw	r24, 0x10	; 16
    2172:	a1 09       	sbc	r26, r1
    2174:	b1 09       	sbc	r27, r1
    2176:	b6 95       	lsr	r27
    2178:	a7 95       	ror	r26
    217a:	97 95       	ror	r25
    217c:	87 95       	ror	r24
    217e:	f8 01       	movw	r30, r16
    2180:	80 83       	st	Z, r24
		TWSR = 0x00;
    2182:	e1 e2       	ldi	r30, 0x21	; 33
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	10 82       	st	Z, r1

	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address;
    2188:	a2 e2       	ldi	r26, 0x22	; 34
    218a:	b0 e0       	ldi	r27, 0x00	; 0
    218c:	e9 81       	ldd	r30, Y+1	; 0x01
    218e:	fa 81       	ldd	r31, Y+2	; 0x02
    2190:	80 81       	ld	r24, Z
    2192:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2194:	e6 e5       	ldi	r30, 0x56	; 86
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	84 e0       	ldi	r24, 0x04	; 4
    219a:	80 83       	st	Z, r24
}
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	1f 91       	pop	r17
    21a6:	0f 91       	pop	r16
    21a8:	08 95       	ret

000021aa <TWI_start>:

void TWI_start(void)
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    21b2:	e6 e5       	ldi	r30, 0x56	; 86
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	84 ea       	ldi	r24, 0xA4	; 164
    21b8:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    21ba:	e6 e5       	ldi	r30, 0x56	; 86
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	80 81       	ld	r24, Z
    21c0:	88 23       	and	r24, r24
    21c2:	dc f7       	brge	.-10     	; 0x21ba <TWI_start+0x10>
}
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <TWI_stop>:

void TWI_stop(void)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    21d2:	e6 e5       	ldi	r30, 0x56	; 86
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	84 e9       	ldi	r24, 0x94	; 148
    21d8:	80 83       	st	Z, r24
}
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	08 95       	ret

000021e0 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	0f 92       	push	r0
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    21ec:	e3 e2       	ldi	r30, 0x23	; 35
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	89 81       	ldd	r24, Y+1	; 0x01
    21f2:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    21f4:	e6 e5       	ldi	r30, 0x56	; 86
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	84 e8       	ldi	r24, 0x84	; 132
    21fa:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    21fc:	e6 e5       	ldi	r30, 0x56	; 86
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	88 23       	and	r24, r24
    2204:	dc f7       	brge	.-10     	; 0x21fc <TWI_writeByte+0x1c>
}
    2206:	0f 90       	pop	r0
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2216:	e6 e5       	ldi	r30, 0x56	; 86
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	84 ec       	ldi	r24, 0xC4	; 196
    221c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    221e:	e6 e5       	ldi	r30, 0x56	; 86
    2220:	f0 e0       	ldi	r31, 0x00	; 0
    2222:	80 81       	ld	r24, Z
    2224:	88 23       	and	r24, r24
    2226:	dc f7       	brge	.-10     	; 0x221e <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2228:	e3 e2       	ldi	r30, 0x23	; 35
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
}
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    223c:	e6 e5       	ldi	r30, 0x56	; 86
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	84 e8       	ldi	r24, 0x84	; 132
    2242:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2244:	e6 e5       	ldi	r30, 0x56	; 86
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	88 23       	and	r24, r24
    224c:	dc f7       	brge	.-10     	; 0x2244 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    224e:	e3 e2       	ldi	r30, 0x23	; 35
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
}
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	0f 92       	push	r0
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2264:	e1 e2       	ldi	r30, 0x21	; 33
    2266:	f0 e0       	ldi	r31, 0x00	; 0
    2268:	80 81       	ld	r24, Z
    226a:	88 7f       	andi	r24, 0xF8	; 248
    226c:	89 83       	std	Y+1, r24	; 0x01
    return status;
    226e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2270:	0f 90       	pop	r0
    2272:	cf 91       	pop	r28
    2274:	df 91       	pop	r29
    2276:	08 95       	ret

00002278 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2278:	df 93       	push	r29
    227a:	cf 93       	push	r28
    227c:	00 d0       	rcall	.+0      	; 0x227e <UART_init+0x6>
    227e:	00 d0       	rcall	.+0      	; 0x2280 <UART_init+0x8>
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
    2284:	9c 83       	std	Y+4, r25	; 0x04
    2286:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2288:	1a 82       	std	Y+2, r1	; 0x02
    228a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    228c:	eb e2       	ldi	r30, 0x2B	; 43
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	82 e0       	ldi	r24, 0x02	; 2
    2292:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2294:	ea e2       	ldi	r30, 0x2A	; 42
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	88 e1       	ldi	r24, 0x18	; 24
    229a:	80 83       	st	Z, r24
	
	/*
	 * Insert the third bit of the required bit per frame value in bit ( UCSZ2 )
	 * of UCSRB Register
	 */
	UCSRB |= ((Config_Ptr->bit_data) & 0x04);
    229c:	aa e2       	ldi	r26, 0x2A	; 42
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	ea e2       	ldi	r30, 0x2A	; 42
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	98 2f       	mov	r25, r24
    22a8:	eb 81       	ldd	r30, Y+3	; 0x03
    22aa:	fc 81       	ldd	r31, Y+4	; 0x04
    22ac:	80 81       	ld	r24, Z
    22ae:	84 70       	andi	r24, 0x04	; 4
    22b0:	89 2b       	or	r24, r25
    22b2:	8c 93       	st	X, r24
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * USBS    = 0 One stop bit
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    22b4:	e0 e4       	ldi	r30, 0x40	; 64
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 e8       	ldi	r24, 0x80	; 128
    22ba:	80 83       	st	Z, r24

	/*
	 * Insert the two bits of the required parity type value in bits ( UPM0 & UPM1 )
	 * of UCSRC Register
	 */
	UCSRC |= ((Config_Ptr->parity) << 4);
    22bc:	a0 e4       	ldi	r26, 0x40	; 64
    22be:	b0 e0       	ldi	r27, 0x00	; 0
    22c0:	e0 e4       	ldi	r30, 0x40	; 64
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	80 81       	ld	r24, Z
    22c6:	28 2f       	mov	r18, r24
    22c8:	eb 81       	ldd	r30, Y+3	; 0x03
    22ca:	fc 81       	ldd	r31, Y+4	; 0x04
    22cc:	81 81       	ldd	r24, Z+1	; 0x01
    22ce:	88 2f       	mov	r24, r24
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	82 95       	swap	r24
    22d4:	92 95       	swap	r25
    22d6:	90 7f       	andi	r25, 0xF0	; 240
    22d8:	98 27       	eor	r25, r24
    22da:	80 7f       	andi	r24, 0xF0	; 240
    22dc:	98 27       	eor	r25, r24
    22de:	82 2b       	or	r24, r18
    22e0:	8c 93       	st	X, r24

	/*
	 * Insert the required stop bit value in bit ( USBS )
	 * of UCSRC Register
	 */
	UCSRC |= ((Config_Ptr->stop_bit) << 3);
    22e2:	a0 e4       	ldi	r26, 0x40	; 64
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e0 e4       	ldi	r30, 0x40	; 64
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	80 81       	ld	r24, Z
    22ec:	28 2f       	mov	r18, r24
    22ee:	eb 81       	ldd	r30, Y+3	; 0x03
    22f0:	fc 81       	ldd	r31, Y+4	; 0x04
    22f2:	82 81       	ldd	r24, Z+2	; 0x02
    22f4:	88 2f       	mov	r24, r24
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	88 0f       	add	r24, r24
    22fa:	99 1f       	adc	r25, r25
    22fc:	88 0f       	add	r24, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	88 0f       	add	r24, r24
    2302:	99 1f       	adc	r25, r25
    2304:	82 2b       	or	r24, r18
    2306:	8c 93       	st	X, r24

	/*
	 * Insert the first two bits of the required bit per frame value in bits ( UCSZ0 & UCSZ1 )
	 * of UCSRC Register
	 */
	UCSRC |= (((Config_Ptr->bit_data) & 0x03) << 1);
    2308:	a0 e4       	ldi	r26, 0x40	; 64
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e0 e4       	ldi	r30, 0x40	; 64
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	28 2f       	mov	r18, r24
    2314:	eb 81       	ldd	r30, Y+3	; 0x03
    2316:	fc 81       	ldd	r31, Y+4	; 0x04
    2318:	80 81       	ld	r24, Z
    231a:	88 2f       	mov	r24, r24
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	83 70       	andi	r24, 0x03	; 3
    2320:	90 70       	andi	r25, 0x00	; 0
    2322:	88 0f       	add	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	82 2b       	or	r24, r18
    2328:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    232a:	eb 81       	ldd	r30, Y+3	; 0x03
    232c:	fc 81       	ldd	r31, Y+4	; 0x04
    232e:	83 81       	ldd	r24, Z+3	; 0x03
    2330:	94 81       	ldd	r25, Z+4	; 0x04
    2332:	a5 81       	ldd	r26, Z+5	; 0x05
    2334:	b6 81       	ldd	r27, Z+6	; 0x06
    2336:	88 0f       	add	r24, r24
    2338:	99 1f       	adc	r25, r25
    233a:	aa 1f       	adc	r26, r26
    233c:	bb 1f       	adc	r27, r27
    233e:	88 0f       	add	r24, r24
    2340:	99 1f       	adc	r25, r25
    2342:	aa 1f       	adc	r26, r26
    2344:	bb 1f       	adc	r27, r27
    2346:	88 0f       	add	r24, r24
    2348:	99 1f       	adc	r25, r25
    234a:	aa 1f       	adc	r26, r26
    234c:	bb 1f       	adc	r27, r27
    234e:	9c 01       	movw	r18, r24
    2350:	ad 01       	movw	r20, r26
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	92 e1       	ldi	r25, 0x12	; 18
    2356:	aa e7       	ldi	r26, 0x7A	; 122
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__udivmodsi4>
    2362:	da 01       	movw	r26, r20
    2364:	c9 01       	movw	r24, r18
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	9a 83       	std	Y+2, r25	; 0x02
    236a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH */
	UBRRH = ubrr_value>>8;
    236c:	e0 e4       	ldi	r30, 0x40	; 64
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	9a 81       	ldd	r25, Y+2	; 0x02
    2374:	89 2f       	mov	r24, r25
    2376:	99 27       	eor	r25, r25
    2378:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    237a:	e9 e2       	ldi	r30, 0x29	; 41
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	89 81       	ldd	r24, Y+1	; 0x01
    2380:	80 83       	st	Z, r24
}
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	0f 90       	pop	r0
    238a:	cf 91       	pop	r28
    238c:	df 91       	pop	r29
    238e:	08 95       	ret

00002390 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2390:	df 93       	push	r29
    2392:	cf 93       	push	r28
    2394:	0f 92       	push	r0
    2396:	cd b7       	in	r28, 0x3d	; 61
    2398:	de b7       	in	r29, 0x3e	; 62
    239a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    239c:	eb e2       	ldi	r30, 0x2B	; 43
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	88 2f       	mov	r24, r24
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	80 72       	andi	r24, 0x20	; 32
    23a8:	90 70       	andi	r25, 0x00	; 0
    23aa:	00 97       	sbiw	r24, 0x00	; 0
    23ac:	b9 f3       	breq	.-18     	; 0x239c <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    23ae:	ec e2       	ldi	r30, 0x2C	; 44
    23b0:	f0 e0       	ldi	r31, 0x00	; 0
    23b2:	89 81       	ldd	r24, Y+1	; 0x01
    23b4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    23b6:	0f 90       	pop	r0
    23b8:	cf 91       	pop	r28
    23ba:	df 91       	pop	r29
    23bc:	08 95       	ret

000023be <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    23be:	df 93       	push	r29
    23c0:	cf 93       	push	r28
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    23c6:	eb e2       	ldi	r30, 0x2B	; 43
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	80 81       	ld	r24, Z
    23cc:	88 23       	and	r24, r24
    23ce:	dc f7       	brge	.-10     	; 0x23c6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    23d0:	ec e2       	ldi	r30, 0x2C	; 44
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
}
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	00 d0       	rcall	.+0      	; 0x23e2 <UART_sendString+0x6>
    23e2:	0f 92       	push	r0
    23e4:	cd b7       	in	r28, 0x3d	; 61
    23e6:	de b7       	in	r29, 0x3e	; 62
    23e8:	9b 83       	std	Y+3, r25	; 0x03
    23ea:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23ec:	19 82       	std	Y+1, r1	; 0x01
    23ee:	0e c0       	rjmp	.+28     	; 0x240c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    23f0:	89 81       	ldd	r24, Y+1	; 0x01
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	8a 81       	ldd	r24, Y+2	; 0x02
    23f8:	9b 81       	ldd	r25, Y+3	; 0x03
    23fa:	fc 01       	movw	r30, r24
    23fc:	e2 0f       	add	r30, r18
    23fe:	f3 1f       	adc	r31, r19
    2400:	80 81       	ld	r24, Z
    2402:	0e 94 c8 11 	call	0x2390	; 0x2390 <UART_sendByte>
		i++;
    2406:	89 81       	ldd	r24, Y+1	; 0x01
    2408:	8f 5f       	subi	r24, 0xFF	; 255
    240a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    240c:	89 81       	ldd	r24, Y+1	; 0x01
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	9b 81       	ldd	r25, Y+3	; 0x03
    2416:	fc 01       	movw	r30, r24
    2418:	e2 0f       	add	r30, r18
    241a:	f3 1f       	adc	r31, r19
    241c:	80 81       	ld	r24, Z
    241e:	88 23       	and	r24, r24
    2420:	39 f7       	brne	.-50     	; 0x23f0 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	0f 90       	pop	r0
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	08 95       	ret

0000242e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	00 d0       	rcall	.+0      	; 0x2438 <UART_receiveString+0xa>
    2438:	0f 92       	push	r0
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
    243e:	9b 83       	std	Y+3, r25	; 0x03
    2440:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2442:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	28 2f       	mov	r18, r24
    2448:	30 e0       	ldi	r19, 0x00	; 0
    244a:	8a 81       	ldd	r24, Y+2	; 0x02
    244c:	9b 81       	ldd	r25, Y+3	; 0x03
    244e:	8c 01       	movw	r16, r24
    2450:	02 0f       	add	r16, r18
    2452:	13 1f       	adc	r17, r19
    2454:	0e 94 df 11 	call	0x23be	; 0x23be <UART_recieveByte>
    2458:	f8 01       	movw	r30, r16
    245a:	80 83       	st	Z, r24
    245c:	0f c0       	rjmp	.+30     	; 0x247c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	8f 5f       	subi	r24, 0xFF	; 255
    2462:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	28 2f       	mov	r18, r24
    2468:	30 e0       	ldi	r19, 0x00	; 0
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	9b 81       	ldd	r25, Y+3	; 0x03
    246e:	8c 01       	movw	r16, r24
    2470:	02 0f       	add	r16, r18
    2472:	13 1f       	adc	r17, r19
    2474:	0e 94 df 11 	call	0x23be	; 0x23be <UART_recieveByte>
    2478:	f8 01       	movw	r30, r16
    247a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	28 2f       	mov	r18, r24
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	9b 81       	ldd	r25, Y+3	; 0x03
    2486:	fc 01       	movw	r30, r24
    2488:	e2 0f       	add	r30, r18
    248a:	f3 1f       	adc	r31, r19
    248c:	80 81       	ld	r24, Z
    248e:	83 32       	cpi	r24, 0x23	; 35
    2490:	31 f7       	brne	.-52     	; 0x245e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2492:	89 81       	ldd	r24, Y+1	; 0x01
    2494:	28 2f       	mov	r18, r24
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	8a 81       	ldd	r24, Y+2	; 0x02
    249a:	9b 81       	ldd	r25, Y+3	; 0x03
    249c:	fc 01       	movw	r30, r24
    249e:	e2 0f       	add	r30, r18
    24a0:	f3 1f       	adc	r31, r19
    24a2:	10 82       	st	Z, r1
}
    24a4:	0f 90       	pop	r0
    24a6:	0f 90       	pop	r0
    24a8:	0f 90       	pop	r0
    24aa:	cf 91       	pop	r28
    24ac:	df 91       	pop	r29
    24ae:	1f 91       	pop	r17
    24b0:	0f 91       	pop	r16
    24b2:	08 95       	ret

000024b4 <__udivmodsi4>:
    24b4:	a1 e2       	ldi	r26, 0x21	; 33
    24b6:	1a 2e       	mov	r1, r26
    24b8:	aa 1b       	sub	r26, r26
    24ba:	bb 1b       	sub	r27, r27
    24bc:	fd 01       	movw	r30, r26
    24be:	0d c0       	rjmp	.+26     	; 0x24da <__udivmodsi4_ep>

000024c0 <__udivmodsi4_loop>:
    24c0:	aa 1f       	adc	r26, r26
    24c2:	bb 1f       	adc	r27, r27
    24c4:	ee 1f       	adc	r30, r30
    24c6:	ff 1f       	adc	r31, r31
    24c8:	a2 17       	cp	r26, r18
    24ca:	b3 07       	cpc	r27, r19
    24cc:	e4 07       	cpc	r30, r20
    24ce:	f5 07       	cpc	r31, r21
    24d0:	20 f0       	brcs	.+8      	; 0x24da <__udivmodsi4_ep>
    24d2:	a2 1b       	sub	r26, r18
    24d4:	b3 0b       	sbc	r27, r19
    24d6:	e4 0b       	sbc	r30, r20
    24d8:	f5 0b       	sbc	r31, r21

000024da <__udivmodsi4_ep>:
    24da:	66 1f       	adc	r22, r22
    24dc:	77 1f       	adc	r23, r23
    24de:	88 1f       	adc	r24, r24
    24e0:	99 1f       	adc	r25, r25
    24e2:	1a 94       	dec	r1
    24e4:	69 f7       	brne	.-38     	; 0x24c0 <__udivmodsi4_loop>
    24e6:	60 95       	com	r22
    24e8:	70 95       	com	r23
    24ea:	80 95       	com	r24
    24ec:	90 95       	com	r25
    24ee:	9b 01       	movw	r18, r22
    24f0:	ac 01       	movw	r20, r24
    24f2:	bd 01       	movw	r22, r26
    24f4:	cf 01       	movw	r24, r30
    24f6:	08 95       	ret

000024f8 <__prologue_saves__>:
    24f8:	2f 92       	push	r2
    24fa:	3f 92       	push	r3
    24fc:	4f 92       	push	r4
    24fe:	5f 92       	push	r5
    2500:	6f 92       	push	r6
    2502:	7f 92       	push	r7
    2504:	8f 92       	push	r8
    2506:	9f 92       	push	r9
    2508:	af 92       	push	r10
    250a:	bf 92       	push	r11
    250c:	cf 92       	push	r12
    250e:	df 92       	push	r13
    2510:	ef 92       	push	r14
    2512:	ff 92       	push	r15
    2514:	0f 93       	push	r16
    2516:	1f 93       	push	r17
    2518:	cf 93       	push	r28
    251a:	df 93       	push	r29
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
    2520:	ca 1b       	sub	r28, r26
    2522:	db 0b       	sbc	r29, r27
    2524:	0f b6       	in	r0, 0x3f	; 63
    2526:	f8 94       	cli
    2528:	de bf       	out	0x3e, r29	; 62
    252a:	0f be       	out	0x3f, r0	; 63
    252c:	cd bf       	out	0x3d, r28	; 61
    252e:	09 94       	ijmp

00002530 <__epilogue_restores__>:
    2530:	2a 88       	ldd	r2, Y+18	; 0x12
    2532:	39 88       	ldd	r3, Y+17	; 0x11
    2534:	48 88       	ldd	r4, Y+16	; 0x10
    2536:	5f 84       	ldd	r5, Y+15	; 0x0f
    2538:	6e 84       	ldd	r6, Y+14	; 0x0e
    253a:	7d 84       	ldd	r7, Y+13	; 0x0d
    253c:	8c 84       	ldd	r8, Y+12	; 0x0c
    253e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2540:	aa 84       	ldd	r10, Y+10	; 0x0a
    2542:	b9 84       	ldd	r11, Y+9	; 0x09
    2544:	c8 84       	ldd	r12, Y+8	; 0x08
    2546:	df 80       	ldd	r13, Y+7	; 0x07
    2548:	ee 80       	ldd	r14, Y+6	; 0x06
    254a:	fd 80       	ldd	r15, Y+5	; 0x05
    254c:	0c 81       	ldd	r16, Y+4	; 0x04
    254e:	1b 81       	ldd	r17, Y+3	; 0x03
    2550:	aa 81       	ldd	r26, Y+2	; 0x02
    2552:	b9 81       	ldd	r27, Y+1	; 0x01
    2554:	ce 0f       	add	r28, r30
    2556:	d1 1d       	adc	r29, r1
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	ed 01       	movw	r28, r26
    2564:	08 95       	ret

00002566 <_exit>:
    2566:	f8 94       	cli

00002568 <__stop_program>:
    2568:	ff cf       	rjmp	.-2      	; 0x2568 <__stop_program>
