
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000372e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  0000372e  000037c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080012e  0080012e  00003890  2**0
                  ALLOC
  3 .stab         0000303c  00000000  00000000  00003890  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001260  00000000  00000000  000068cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a910  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b6c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b820  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000baad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c27b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <__vector_4>
      14:	0c 94 36 18 	jmp	0x306c	; 0x306c <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d0 17 	jmp	0x2fa0	; 0x2fa0 <__vector_9>
      28:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <__vector_10>
      2c:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e2       	ldi	r26, 0x2E	; 46
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 33       	cpi	r26, 0x32	; 50
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 95 1b 	jmp	0x372a	; 0x372a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 19 1b 	jmp	0x3632	; 0x3632 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e1       	ldi	r26, 0x13	; 19
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 35 1b 	jmp	0x366a	; 0x366a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 25 1b 	jmp	0x364a	; 0x364a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 41 1b 	jmp	0x3682	; 0x3682 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 25 1b 	jmp	0x364a	; 0x364a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 41 1b 	jmp	0x3682	; 0x3682 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 19 1b 	jmp	0x3632	; 0x3632 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e1       	ldi	r24, 0x13	; 19
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 35 1b 	jmp	0x366a	; 0x366a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 25 1b 	jmp	0x364a	; 0x364a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 41 1b 	jmp	0x3682	; 0x3682 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 25 1b 	jmp	0x364a	; 0x364a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 41 1b 	jmp	0x3682	; 0x3682 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 25 1b 	jmp	0x364a	; 0x364a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 41 1b 	jmp	0x3682	; 0x3682 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 29 1b 	jmp	0x3652	; 0x3652 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 45 1b 	jmp	0x368a	; 0x368a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void sendPassword (uint8 password[]);
void wait_seconds(void);

/******************************** Main ********************************/
int main()
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c6 58       	subi	r28, 0x86	; 134
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	uint8 password[5] , pass_confirmed = 0 , operation ,count=0;
     b60:	fe 01       	movw	r30, r28
     b62:	eb 59       	subi	r30, 0x9B	; 155
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	10 82       	st	Z, r1
     b68:	fe 01       	movw	r30, r28
     b6a:	ed 59       	subi	r30, 0x9D	; 157
     b6c:	ff 4f       	sbci	r31, 0xFF	; 255
     b6e:	10 82       	st	Z, r1

	/*define Uart struct
	 * 8 bits of data,Disable parity ,One stop bit ,Baud rate=9600
	 */
	UART_ConfigType uart_Config={UART_8_BIT_PER_FRAME,UART_DISABLE_PARITY,UART_1_STOP_BIT,9600};
     b70:	ce 01       	movw	r24, r28
     b72:	85 59       	subi	r24, 0x95	; 149
     b74:	9f 4f       	sbci	r25, 0xFF	; 255
     b76:	ef 96       	adiw	r28, 0x3f	; 63
     b78:	9f af       	std	Y+63, r25	; 0x3f
     b7a:	8e af       	std	Y+62, r24	; 0x3e
     b7c:	ef 97       	sbiw	r28, 0x3f	; 63
     b7e:	86 e2       	ldi	r24, 0x26	; 38
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	c1 58       	subi	r28, 0x81	; 129
     b84:	df 4f       	sbci	r29, 0xFF	; 255
     b86:	99 83       	std	Y+1, r25	; 0x01
     b88:	88 83       	st	Y, r24
     b8a:	cf 57       	subi	r28, 0x7F	; 127
     b8c:	d0 40       	sbci	r29, 0x00	; 0
     b8e:	97 e0       	ldi	r25, 0x07	; 7
     b90:	cf 57       	subi	r28, 0x7F	; 127
     b92:	df 4f       	sbci	r29, 0xFF	; 255
     b94:	98 83       	st	Y, r25
     b96:	c1 58       	subi	r28, 0x81	; 129
     b98:	d0 40       	sbci	r29, 0x00	; 0
     b9a:	c1 58       	subi	r28, 0x81	; 129
     b9c:	df 4f       	sbci	r29, 0xFF	; 255
     b9e:	e8 81       	ld	r30, Y
     ba0:	f9 81       	ldd	r31, Y+1	; 0x01
     ba2:	cf 57       	subi	r28, 0x7F	; 127
     ba4:	d0 40       	sbci	r29, 0x00	; 0
     ba6:	00 80       	ld	r0, Z
     ba8:	c1 58       	subi	r28, 0x81	; 129
     baa:	df 4f       	sbci	r29, 0xFF	; 255
     bac:	88 81       	ld	r24, Y
     bae:	99 81       	ldd	r25, Y+1	; 0x01
     bb0:	cf 57       	subi	r28, 0x7F	; 127
     bb2:	d0 40       	sbci	r29, 0x00	; 0
     bb4:	01 96       	adiw	r24, 0x01	; 1
     bb6:	c1 58       	subi	r28, 0x81	; 129
     bb8:	df 4f       	sbci	r29, 0xFF	; 255
     bba:	99 83       	std	Y+1, r25	; 0x01
     bbc:	88 83       	st	Y, r24
     bbe:	cf 57       	subi	r28, 0x7F	; 127
     bc0:	d0 40       	sbci	r29, 0x00	; 0
     bc2:	ef 96       	adiw	r28, 0x3f	; 63
     bc4:	ee ad       	ldd	r30, Y+62	; 0x3e
     bc6:	ff ad       	ldd	r31, Y+63	; 0x3f
     bc8:	ef 97       	sbiw	r28, 0x3f	; 63
     bca:	00 82       	st	Z, r0
     bcc:	ef 96       	adiw	r28, 0x3f	; 63
     bce:	8e ad       	ldd	r24, Y+62	; 0x3e
     bd0:	9f ad       	ldd	r25, Y+63	; 0x3f
     bd2:	ef 97       	sbiw	r28, 0x3f	; 63
     bd4:	01 96       	adiw	r24, 0x01	; 1
     bd6:	ef 96       	adiw	r28, 0x3f	; 63
     bd8:	9f af       	std	Y+63, r25	; 0x3f
     bda:	8e af       	std	Y+62, r24	; 0x3e
     bdc:	ef 97       	sbiw	r28, 0x3f	; 63
     bde:	cf 57       	subi	r28, 0x7F	; 127
     be0:	df 4f       	sbci	r29, 0xFF	; 255
     be2:	98 81       	ld	r25, Y
     be4:	c1 58       	subi	r28, 0x81	; 129
     be6:	d0 40       	sbci	r29, 0x00	; 0
     be8:	91 50       	subi	r25, 0x01	; 1
     bea:	cf 57       	subi	r28, 0x7F	; 127
     bec:	df 4f       	sbci	r29, 0xFF	; 255
     bee:	98 83       	st	Y, r25
     bf0:	c1 58       	subi	r28, 0x81	; 129
     bf2:	d0 40       	sbci	r29, 0x00	; 0
     bf4:	cf 57       	subi	r28, 0x7F	; 127
     bf6:	df 4f       	sbci	r29, 0xFF	; 255
     bf8:	e8 81       	ld	r30, Y
     bfa:	c1 58       	subi	r28, 0x81	; 129
     bfc:	d0 40       	sbci	r29, 0x00	; 0
     bfe:	ee 23       	and	r30, r30
     c00:	61 f6       	brne	.-104    	; 0xb9a <main+0x54>
	/* Create configuration structure for TIMER driver with
	 * initial value = 0 & compare value = 7813
	 * which generates an interrupt every one second
	 */
	TIMER_ConfigType TIMER_Config = {TIMER1,TIMER_COMPARE_MODE,F_CPU_1024,0,7813};
     c02:	ce 01       	movw	r24, r28
     c04:	8e 58       	subi	r24, 0x8E	; 142
     c06:	9f 4f       	sbci	r25, 0xFF	; 255
     c08:	ce 57       	subi	r28, 0x7E	; 126
     c0a:	df 4f       	sbci	r29, 0xFF	; 255
     c0c:	99 83       	std	Y+1, r25	; 0x01
     c0e:	88 83       	st	Y, r24
     c10:	c2 58       	subi	r28, 0x82	; 130
     c12:	d0 40       	sbci	r29, 0x00	; 0
     c14:	8b e1       	ldi	r24, 0x1B	; 27
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	cc 57       	subi	r28, 0x7C	; 124
     c1a:	df 4f       	sbci	r29, 0xFF	; 255
     c1c:	99 83       	std	Y+1, r25	; 0x01
     c1e:	88 83       	st	Y, r24
     c20:	c4 58       	subi	r28, 0x84	; 132
     c22:	d0 40       	sbci	r29, 0x00	; 0
     c24:	9b e0       	ldi	r25, 0x0B	; 11
     c26:	ca 57       	subi	r28, 0x7A	; 122
     c28:	df 4f       	sbci	r29, 0xFF	; 255
     c2a:	98 83       	st	Y, r25
     c2c:	c6 58       	subi	r28, 0x86	; 134
     c2e:	d0 40       	sbci	r29, 0x00	; 0
     c30:	cc 57       	subi	r28, 0x7C	; 124
     c32:	df 4f       	sbci	r29, 0xFF	; 255
     c34:	e8 81       	ld	r30, Y
     c36:	f9 81       	ldd	r31, Y+1	; 0x01
     c38:	c4 58       	subi	r28, 0x84	; 132
     c3a:	d0 40       	sbci	r29, 0x00	; 0
     c3c:	00 80       	ld	r0, Z
     c3e:	cc 57       	subi	r28, 0x7C	; 124
     c40:	df 4f       	sbci	r29, 0xFF	; 255
     c42:	88 81       	ld	r24, Y
     c44:	99 81       	ldd	r25, Y+1	; 0x01
     c46:	c4 58       	subi	r28, 0x84	; 132
     c48:	d0 40       	sbci	r29, 0x00	; 0
     c4a:	01 96       	adiw	r24, 0x01	; 1
     c4c:	cc 57       	subi	r28, 0x7C	; 124
     c4e:	df 4f       	sbci	r29, 0xFF	; 255
     c50:	99 83       	std	Y+1, r25	; 0x01
     c52:	88 83       	st	Y, r24
     c54:	c4 58       	subi	r28, 0x84	; 132
     c56:	d0 40       	sbci	r29, 0x00	; 0
     c58:	ce 57       	subi	r28, 0x7E	; 126
     c5a:	df 4f       	sbci	r29, 0xFF	; 255
     c5c:	e8 81       	ld	r30, Y
     c5e:	f9 81       	ldd	r31, Y+1	; 0x01
     c60:	c2 58       	subi	r28, 0x82	; 130
     c62:	d0 40       	sbci	r29, 0x00	; 0
     c64:	00 82       	st	Z, r0
     c66:	ce 57       	subi	r28, 0x7E	; 126
     c68:	df 4f       	sbci	r29, 0xFF	; 255
     c6a:	88 81       	ld	r24, Y
     c6c:	99 81       	ldd	r25, Y+1	; 0x01
     c6e:	c2 58       	subi	r28, 0x82	; 130
     c70:	d0 40       	sbci	r29, 0x00	; 0
     c72:	01 96       	adiw	r24, 0x01	; 1
     c74:	ce 57       	subi	r28, 0x7E	; 126
     c76:	df 4f       	sbci	r29, 0xFF	; 255
     c78:	99 83       	std	Y+1, r25	; 0x01
     c7a:	88 83       	st	Y, r24
     c7c:	c2 58       	subi	r28, 0x82	; 130
     c7e:	d0 40       	sbci	r29, 0x00	; 0
     c80:	ca 57       	subi	r28, 0x7A	; 122
     c82:	df 4f       	sbci	r29, 0xFF	; 255
     c84:	98 81       	ld	r25, Y
     c86:	c6 58       	subi	r28, 0x86	; 134
     c88:	d0 40       	sbci	r29, 0x00	; 0
     c8a:	91 50       	subi	r25, 0x01	; 1
     c8c:	ca 57       	subi	r28, 0x7A	; 122
     c8e:	df 4f       	sbci	r29, 0xFF	; 255
     c90:	98 83       	st	Y, r25
     c92:	c6 58       	subi	r28, 0x86	; 134
     c94:	d0 40       	sbci	r29, 0x00	; 0
     c96:	ca 57       	subi	r28, 0x7A	; 122
     c98:	df 4f       	sbci	r29, 0xFF	; 255
     c9a:	e8 81       	ld	r30, Y
     c9c:	c6 58       	subi	r28, 0x86	; 134
     c9e:	d0 40       	sbci	r29, 0x00	; 0
     ca0:	ee 23       	and	r30, r30
     ca2:	31 f6       	brne	.-116    	; 0xc30 <main+0xea>
	SREG|=(1<<7);   //Enable I-bit
     ca4:	af e5       	ldi	r26, 0x5F	; 95
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	ef e5       	ldi	r30, 0x5F	; 95
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	80 68       	ori	r24, 0x80	; 128
     cb0:	8c 93       	st	X, r24
	LCD_init();     //initialize the LCD
     cb2:	0e 94 3a 12 	call	0x2474	; 0x2474 <LCD_init>
	UART_init(&uart_Config);   //initialize the UART
     cb6:	ce 01       	movw	r24, r28
     cb8:	85 59       	subi	r24, 0x95	; 149
     cba:	9f 4f       	sbci	r25, 0xFF	; 255
     cbc:	0e 94 d9 19 	call	0x33b2	; 0x33b2 <UART_init>
     cc0:	93 c2       	rjmp	.+1318   	; 0x11e8 <main+0x6a2>


		/****************************** Step 1 ******************************/
		while(pass_confirmed==0)
		{
			LCD_clearScreen();
     cc2:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_clearScreen>
			LCD_displayString("Plz enter pass");
     cc6:	80 e6       	ldi	r24, 0x60	; 96
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <LCD_displayString>
			LCD_moveCursor(1, 0);
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_moveCursor>
			getPassword(password);
     cd6:	ce 01       	movw	r24, r28
     cd8:	8a 59       	subi	r24, 0x9A	; 154
     cda:	9f 4f       	sbci	r25, 0xFF	; 255
     cdc:	0e 94 b8 0b 	call	0x1770	; 0x1770 <getPassword>
     ce0:	fe 01       	movw	r30, r28
     ce2:	e1 5a       	subi	r30, 0xA1	; 161
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	a8 e4       	ldi	r26, 0x48	; 72
     cec:	b2 e4       	ldi	r27, 0x42	; 66
     cee:	80 83       	st	Z, r24
     cf0:	91 83       	std	Z+1, r25	; 0x01
     cf2:	a2 83       	std	Z+2, r26	; 0x02
     cf4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf6:	8e 01       	movw	r16, r28
     cf8:	05 5a       	subi	r16, 0xA5	; 165
     cfa:	1f 4f       	sbci	r17, 0xFF	; 255
     cfc:	fe 01       	movw	r30, r28
     cfe:	e1 5a       	subi	r30, 0xA1	; 161
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	60 81       	ld	r22, Z
     d04:	71 81       	ldd	r23, Z+1	; 0x01
     d06:	82 81       	ldd	r24, Z+2	; 0x02
     d08:	93 81       	ldd	r25, Z+3	; 0x03
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	4a ef       	ldi	r20, 0xFA	; 250
     d10:	54 e4       	ldi	r21, 0x44	; 68
     d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	f8 01       	movw	r30, r16
     d1c:	80 83       	st	Z, r24
     d1e:	91 83       	std	Z+1, r25	; 0x01
     d20:	a2 83       	std	Z+2, r26	; 0x02
     d22:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d24:	fe 01       	movw	r30, r28
     d26:	e5 5a       	subi	r30, 0xA5	; 165
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	60 81       	ld	r22, Z
     d2c:	71 81       	ldd	r23, Z+1	; 0x01
     d2e:	82 81       	ldd	r24, Z+2	; 0x02
     d30:	93 81       	ldd	r25, Z+3	; 0x03
     d32:	20 e0       	ldi	r18, 0x00	; 0
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	40 e8       	ldi	r20, 0x80	; 128
     d38:	5f e3       	ldi	r21, 0x3F	; 63
     d3a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d3e:	88 23       	and	r24, r24
     d40:	44 f4       	brge	.+16     	; 0xd52 <main+0x20c>
		__ticks = 1;
     d42:	fe 01       	movw	r30, r28
     d44:	e7 5a       	subi	r30, 0xA7	; 167
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	91 83       	std	Z+1, r25	; 0x01
     d4e:	80 83       	st	Z, r24
     d50:	64 c0       	rjmp	.+200    	; 0xe1a <main+0x2d4>
	else if (__tmp > 65535)
     d52:	fe 01       	movw	r30, r28
     d54:	e5 5a       	subi	r30, 0xA5	; 165
     d56:	ff 4f       	sbci	r31, 0xFF	; 255
     d58:	60 81       	ld	r22, Z
     d5a:	71 81       	ldd	r23, Z+1	; 0x01
     d5c:	82 81       	ldd	r24, Z+2	; 0x02
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	3f ef       	ldi	r19, 0xFF	; 255
     d64:	4f e7       	ldi	r20, 0x7F	; 127
     d66:	57 e4       	ldi	r21, 0x47	; 71
     d68:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d6c:	18 16       	cp	r1, r24
     d6e:	0c f0       	brlt	.+2      	; 0xd72 <main+0x22c>
     d70:	43 c0       	rjmp	.+134    	; 0xdf8 <main+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d72:	fe 01       	movw	r30, r28
     d74:	e1 5a       	subi	r30, 0xA1	; 161
     d76:	ff 4f       	sbci	r31, 0xFF	; 255
     d78:	60 81       	ld	r22, Z
     d7a:	71 81       	ldd	r23, Z+1	; 0x01
     d7c:	82 81       	ldd	r24, Z+2	; 0x02
     d7e:	93 81       	ldd	r25, Z+3	; 0x03
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	40 e2       	ldi	r20, 0x20	; 32
     d86:	51 e4       	ldi	r21, 0x41	; 65
     d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d8c:	dc 01       	movw	r26, r24
     d8e:	cb 01       	movw	r24, r22
     d90:	8e 01       	movw	r16, r28
     d92:	07 5a       	subi	r16, 0xA7	; 167
     d94:	1f 4f       	sbci	r17, 0xFF	; 255
     d96:	bc 01       	movw	r22, r24
     d98:	cd 01       	movw	r24, r26
     d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d9e:	dc 01       	movw	r26, r24
     da0:	cb 01       	movw	r24, r22
     da2:	f8 01       	movw	r30, r16
     da4:	91 83       	std	Z+1, r25	; 0x01
     da6:	80 83       	st	Z, r24
     da8:	1f c0       	rjmp	.+62     	; 0xde8 <main+0x2a2>
     daa:	fe 01       	movw	r30, r28
     dac:	e9 5a       	subi	r30, 0xA9	; 169
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	88 ec       	ldi	r24, 0xC8	; 200
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	91 83       	std	Z+1, r25	; 0x01
     db6:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     db8:	fe 01       	movw	r30, r28
     dba:	e9 5a       	subi	r30, 0xA9	; 169
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	f1 f7       	brne	.-4      	; 0xdc2 <main+0x27c>
     dc6:	fe 01       	movw	r30, r28
     dc8:	e9 5a       	subi	r30, 0xA9	; 169
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	91 83       	std	Z+1, r25	; 0x01
     dce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd0:	de 01       	movw	r26, r28
     dd2:	a7 5a       	subi	r26, 0xA7	; 167
     dd4:	bf 4f       	sbci	r27, 0xFF	; 255
     dd6:	fe 01       	movw	r30, r28
     dd8:	e7 5a       	subi	r30, 0xA7	; 167
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	80 81       	ld	r24, Z
     dde:	91 81       	ldd	r25, Z+1	; 0x01
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	11 96       	adiw	r26, 0x01	; 1
     de4:	9c 93       	st	X, r25
     de6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     de8:	fe 01       	movw	r30, r28
     dea:	e7 5a       	subi	r30, 0xA7	; 167
     dec:	ff 4f       	sbci	r31, 0xFF	; 255
     dee:	80 81       	ld	r24, Z
     df0:	91 81       	ldd	r25, Z+1	; 0x01
     df2:	00 97       	sbiw	r24, 0x00	; 0
     df4:	d1 f6       	brne	.-76     	; 0xdaa <main+0x264>
     df6:	27 c0       	rjmp	.+78     	; 0xe46 <main+0x300>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df8:	8e 01       	movw	r16, r28
     dfa:	07 5a       	subi	r16, 0xA7	; 167
     dfc:	1f 4f       	sbci	r17, 0xFF	; 255
     dfe:	fe 01       	movw	r30, r28
     e00:	e5 5a       	subi	r30, 0xA5	; 165
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	60 81       	ld	r22, Z
     e06:	71 81       	ldd	r23, Z+1	; 0x01
     e08:	82 81       	ldd	r24, Z+2	; 0x02
     e0a:	93 81       	ldd	r25, Z+3	; 0x03
     e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	f8 01       	movw	r30, r16
     e16:	91 83       	std	Z+1, r25	; 0x01
     e18:	80 83       	st	Z, r24
     e1a:	de 01       	movw	r26, r28
     e1c:	ab 5a       	subi	r26, 0xAB	; 171
     e1e:	bf 4f       	sbci	r27, 0xFF	; 255
     e20:	fe 01       	movw	r30, r28
     e22:	e7 5a       	subi	r30, 0xA7	; 167
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	80 81       	ld	r24, Z
     e28:	91 81       	ldd	r25, Z+1	; 0x01
     e2a:	8d 93       	st	X+, r24
     e2c:	9c 93       	st	X, r25
     e2e:	fe 01       	movw	r30, r28
     e30:	eb 5a       	subi	r30, 0xAB	; 171
     e32:	ff 4f       	sbci	r31, 0xFF	; 255
     e34:	80 81       	ld	r24, Z
     e36:	91 81       	ldd	r25, Z+1	; 0x01
     e38:	01 97       	sbiw	r24, 0x01	; 1
     e3a:	f1 f7       	brne	.-4      	; 0xe38 <main+0x2f2>
     e3c:	fe 01       	movw	r30, r28
     e3e:	eb 5a       	subi	r30, 0xAB	; 171
     e40:	ff 4f       	sbci	r31, 0xFF	; 255
     e42:	91 83       	std	Z+1, r25	; 0x01
     e44:	80 83       	st	Z, r24
			_delay_ms(50);
			sendPassword(password);
     e46:	ce 01       	movw	r24, r28
     e48:	8a 59       	subi	r24, 0x9A	; 154
     e4a:	9f 4f       	sbci	r25, 0xFF	; 255
     e4c:	0e 94 56 0d 	call	0x1aac	; 0x1aac <sendPassword>
			LCD_clearScreen();
     e50:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_clearScreen>
			LCD_displayString("Plz re-enter the");
     e54:	8f e6       	ldi	r24, 0x6F	; 111
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <LCD_displayString>
			LCD_moveCursor(1, 0);
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_moveCursor>
			LCD_displayString("same pass:");
     e64:	80 e8       	ldi	r24, 0x80	; 128
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <LCD_displayString>
			LCD_moveCursor(1, 10);
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	6a e0       	ldi	r22, 0x0A	; 10
     e70:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_moveCursor>
			getPassword(password);
     e74:	ce 01       	movw	r24, r28
     e76:	8a 59       	subi	r24, 0x9A	; 154
     e78:	9f 4f       	sbci	r25, 0xFF	; 255
     e7a:	0e 94 b8 0b 	call	0x1770	; 0x1770 <getPassword>
     e7e:	fe 01       	movw	r30, r28
     e80:	ef 5a       	subi	r30, 0xAF	; 175
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	a8 e4       	ldi	r26, 0x48	; 72
     e8a:	b2 e4       	ldi	r27, 0x42	; 66
     e8c:	80 83       	st	Z, r24
     e8e:	91 83       	std	Z+1, r25	; 0x01
     e90:	a2 83       	std	Z+2, r26	; 0x02
     e92:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e94:	8e 01       	movw	r16, r28
     e96:	03 5b       	subi	r16, 0xB3	; 179
     e98:	1f 4f       	sbci	r17, 0xFF	; 255
     e9a:	fe 01       	movw	r30, r28
     e9c:	ef 5a       	subi	r30, 0xAF	; 175
     e9e:	ff 4f       	sbci	r31, 0xFF	; 255
     ea0:	60 81       	ld	r22, Z
     ea2:	71 81       	ldd	r23, Z+1	; 0x01
     ea4:	82 81       	ldd	r24, Z+2	; 0x02
     ea6:	93 81       	ldd	r25, Z+3	; 0x03
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	4a ef       	ldi	r20, 0xFA	; 250
     eae:	54 e4       	ldi	r21, 0x44	; 68
     eb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	f8 01       	movw	r30, r16
     eba:	80 83       	st	Z, r24
     ebc:	91 83       	std	Z+1, r25	; 0x01
     ebe:	a2 83       	std	Z+2, r26	; 0x02
     ec0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ec2:	fe 01       	movw	r30, r28
     ec4:	e3 5b       	subi	r30, 0xB3	; 179
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	60 81       	ld	r22, Z
     eca:	71 81       	ldd	r23, Z+1	; 0x01
     ecc:	82 81       	ldd	r24, Z+2	; 0x02
     ece:	93 81       	ldd	r25, Z+3	; 0x03
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e8       	ldi	r20, 0x80	; 128
     ed6:	5f e3       	ldi	r21, 0x3F	; 63
     ed8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     edc:	88 23       	and	r24, r24
     ede:	44 f4       	brge	.+16     	; 0xef0 <main+0x3aa>
		__ticks = 1;
     ee0:	fe 01       	movw	r30, r28
     ee2:	e5 5b       	subi	r30, 0xB5	; 181
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	91 83       	std	Z+1, r25	; 0x01
     eec:	80 83       	st	Z, r24
     eee:	64 c0       	rjmp	.+200    	; 0xfb8 <main+0x472>
	else if (__tmp > 65535)
     ef0:	fe 01       	movw	r30, r28
     ef2:	e3 5b       	subi	r30, 0xB3	; 179
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	60 81       	ld	r22, Z
     ef8:	71 81       	ldd	r23, Z+1	; 0x01
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	3f ef       	ldi	r19, 0xFF	; 255
     f02:	4f e7       	ldi	r20, 0x7F	; 127
     f04:	57 e4       	ldi	r21, 0x47	; 71
     f06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f0a:	18 16       	cp	r1, r24
     f0c:	0c f0       	brlt	.+2      	; 0xf10 <main+0x3ca>
     f0e:	43 c0       	rjmp	.+134    	; 0xf96 <main+0x450>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f10:	fe 01       	movw	r30, r28
     f12:	ef 5a       	subi	r30, 0xAF	; 175
     f14:	ff 4f       	sbci	r31, 0xFF	; 255
     f16:	60 81       	ld	r22, Z
     f18:	71 81       	ldd	r23, Z+1	; 0x01
     f1a:	82 81       	ldd	r24, Z+2	; 0x02
     f1c:	93 81       	ldd	r25, Z+3	; 0x03
     f1e:	20 e0       	ldi	r18, 0x00	; 0
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	40 e2       	ldi	r20, 0x20	; 32
     f24:	51 e4       	ldi	r21, 0x41	; 65
     f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2a:	dc 01       	movw	r26, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	8e 01       	movw	r16, r28
     f30:	05 5b       	subi	r16, 0xB5	; 181
     f32:	1f 4f       	sbci	r17, 0xFF	; 255
     f34:	bc 01       	movw	r22, r24
     f36:	cd 01       	movw	r24, r26
     f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	f8 01       	movw	r30, r16
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	80 83       	st	Z, r24
     f46:	1f c0       	rjmp	.+62     	; 0xf86 <main+0x440>
     f48:	fe 01       	movw	r30, r28
     f4a:	e7 5b       	subi	r30, 0xB7	; 183
     f4c:	ff 4f       	sbci	r31, 0xFF	; 255
     f4e:	88 ec       	ldi	r24, 0xC8	; 200
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	91 83       	std	Z+1, r25	; 0x01
     f54:	80 83       	st	Z, r24
     f56:	fe 01       	movw	r30, r28
     f58:	e7 5b       	subi	r30, 0xB7	; 183
     f5a:	ff 4f       	sbci	r31, 0xFF	; 255
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <main+0x41a>
     f64:	fe 01       	movw	r30, r28
     f66:	e7 5b       	subi	r30, 0xB7	; 183
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	91 83       	std	Z+1, r25	; 0x01
     f6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f6e:	de 01       	movw	r26, r28
     f70:	a5 5b       	subi	r26, 0xB5	; 181
     f72:	bf 4f       	sbci	r27, 0xFF	; 255
     f74:	fe 01       	movw	r30, r28
     f76:	e5 5b       	subi	r30, 0xB5	; 181
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	80 81       	ld	r24, Z
     f7c:	91 81       	ldd	r25, Z+1	; 0x01
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	11 96       	adiw	r26, 0x01	; 1
     f82:	9c 93       	st	X, r25
     f84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f86:	fe 01       	movw	r30, r28
     f88:	e5 5b       	subi	r30, 0xB5	; 181
     f8a:	ff 4f       	sbci	r31, 0xFF	; 255
     f8c:	80 81       	ld	r24, Z
     f8e:	91 81       	ldd	r25, Z+1	; 0x01
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	d1 f6       	brne	.-76     	; 0xf48 <main+0x402>
     f94:	27 c0       	rjmp	.+78     	; 0xfe4 <main+0x49e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f96:	8e 01       	movw	r16, r28
     f98:	05 5b       	subi	r16, 0xB5	; 181
     f9a:	1f 4f       	sbci	r17, 0xFF	; 255
     f9c:	fe 01       	movw	r30, r28
     f9e:	e3 5b       	subi	r30, 0xB3	; 179
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	60 81       	ld	r22, Z
     fa4:	71 81       	ldd	r23, Z+1	; 0x01
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	93 81       	ldd	r25, Z+3	; 0x03
     faa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fae:	dc 01       	movw	r26, r24
     fb0:	cb 01       	movw	r24, r22
     fb2:	f8 01       	movw	r30, r16
     fb4:	91 83       	std	Z+1, r25	; 0x01
     fb6:	80 83       	st	Z, r24
     fb8:	de 01       	movw	r26, r28
     fba:	a9 5b       	subi	r26, 0xB9	; 185
     fbc:	bf 4f       	sbci	r27, 0xFF	; 255
     fbe:	fe 01       	movw	r30, r28
     fc0:	e5 5b       	subi	r30, 0xB5	; 181
     fc2:	ff 4f       	sbci	r31, 0xFF	; 255
     fc4:	80 81       	ld	r24, Z
     fc6:	91 81       	ldd	r25, Z+1	; 0x01
     fc8:	8d 93       	st	X+, r24
     fca:	9c 93       	st	X, r25
     fcc:	fe 01       	movw	r30, r28
     fce:	e9 5b       	subi	r30, 0xB9	; 185
     fd0:	ff 4f       	sbci	r31, 0xFF	; 255
     fd2:	80 81       	ld	r24, Z
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	f1 f7       	brne	.-4      	; 0xfd6 <main+0x490>
     fda:	fe 01       	movw	r30, r28
     fdc:	e9 5b       	subi	r30, 0xB9	; 185
     fde:	ff 4f       	sbci	r31, 0xFF	; 255
     fe0:	91 83       	std	Z+1, r25	; 0x01
     fe2:	80 83       	st	Z, r24
			_delay_ms(50);
			sendPassword(password);
     fe4:	ce 01       	movw	r24, r28
     fe6:	8a 59       	subi	r24, 0x9A	; 154
     fe8:	9f 4f       	sbci	r25, 0xFF	; 255
     fea:	0e 94 56 0d 	call	0x1aac	; 0x1aac <sendPassword>
     fee:	fe 01       	movw	r30, r28
     ff0:	ed 5b       	subi	r30, 0xBD	; 189
     ff2:	ff 4f       	sbci	r31, 0xFF	; 255
     ff4:	80 e0       	ldi	r24, 0x00	; 0
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	aa e7       	ldi	r26, 0x7A	; 122
     ffa:	b4 e4       	ldi	r27, 0x44	; 68
     ffc:	80 83       	st	Z, r24
     ffe:	91 83       	std	Z+1, r25	; 0x01
    1000:	a2 83       	std	Z+2, r26	; 0x02
    1002:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1004:	8e 01       	movw	r16, r28
    1006:	01 5c       	subi	r16, 0xC1	; 193
    1008:	1f 4f       	sbci	r17, 0xFF	; 255
    100a:	fe 01       	movw	r30, r28
    100c:	ed 5b       	subi	r30, 0xBD	; 189
    100e:	ff 4f       	sbci	r31, 0xFF	; 255
    1010:	60 81       	ld	r22, Z
    1012:	71 81       	ldd	r23, Z+1	; 0x01
    1014:	82 81       	ldd	r24, Z+2	; 0x02
    1016:	93 81       	ldd	r25, Z+3	; 0x03
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	4a ef       	ldi	r20, 0xFA	; 250
    101e:	54 e4       	ldi	r21, 0x44	; 68
    1020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	f8 01       	movw	r30, r16
    102a:	80 83       	st	Z, r24
    102c:	91 83       	std	Z+1, r25	; 0x01
    102e:	a2 83       	std	Z+2, r26	; 0x02
    1030:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1032:	fe 01       	movw	r30, r28
    1034:	ff 96       	adiw	r30, 0x3f	; 63
    1036:	60 81       	ld	r22, Z
    1038:	71 81       	ldd	r23, Z+1	; 0x01
    103a:	82 81       	ldd	r24, Z+2	; 0x02
    103c:	93 81       	ldd	r25, Z+3	; 0x03
    103e:	20 e0       	ldi	r18, 0x00	; 0
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	40 e8       	ldi	r20, 0x80	; 128
    1044:	5f e3       	ldi	r21, 0x3F	; 63
    1046:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    104a:	88 23       	and	r24, r24
    104c:	2c f4       	brge	.+10     	; 0x1058 <main+0x512>
		__ticks = 1;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	9e af       	std	Y+62, r25	; 0x3e
    1054:	8d af       	std	Y+61, r24	; 0x3d
    1056:	46 c0       	rjmp	.+140    	; 0x10e4 <main+0x59e>
	else if (__tmp > 65535)
    1058:	fe 01       	movw	r30, r28
    105a:	ff 96       	adiw	r30, 0x3f	; 63
    105c:	60 81       	ld	r22, Z
    105e:	71 81       	ldd	r23, Z+1	; 0x01
    1060:	82 81       	ldd	r24, Z+2	; 0x02
    1062:	93 81       	ldd	r25, Z+3	; 0x03
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	3f ef       	ldi	r19, 0xFF	; 255
    1068:	4f e7       	ldi	r20, 0x7F	; 127
    106a:	57 e4       	ldi	r21, 0x47	; 71
    106c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1070:	18 16       	cp	r1, r24
    1072:	64 f5       	brge	.+88     	; 0x10cc <main+0x586>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1074:	fe 01       	movw	r30, r28
    1076:	ed 5b       	subi	r30, 0xBD	; 189
    1078:	ff 4f       	sbci	r31, 0xFF	; 255
    107a:	60 81       	ld	r22, Z
    107c:	71 81       	ldd	r23, Z+1	; 0x01
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	93 81       	ldd	r25, Z+3	; 0x03
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e2       	ldi	r20, 0x20	; 32
    1088:	51 e4       	ldi	r21, 0x41	; 65
    108a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	bc 01       	movw	r22, r24
    1094:	cd 01       	movw	r24, r26
    1096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    109a:	dc 01       	movw	r26, r24
    109c:	cb 01       	movw	r24, r22
    109e:	9e af       	std	Y+62, r25	; 0x3e
    10a0:	8d af       	std	Y+61, r24	; 0x3d
    10a2:	0f c0       	rjmp	.+30     	; 0x10c2 <main+0x57c>
    10a4:	88 ec       	ldi	r24, 0xC8	; 200
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9c af       	std	Y+60, r25	; 0x3c
    10aa:	8b af       	std	Y+59, r24	; 0x3b
    10ac:	8b ad       	ldd	r24, Y+59	; 0x3b
    10ae:	9c ad       	ldd	r25, Y+60	; 0x3c
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <main+0x56a>
    10b4:	9c af       	std	Y+60, r25	; 0x3c
    10b6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b8:	8d ad       	ldd	r24, Y+61	; 0x3d
    10ba:	9e ad       	ldd	r25, Y+62	; 0x3e
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	9e af       	std	Y+62, r25	; 0x3e
    10c0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    10c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    10c6:	00 97       	sbiw	r24, 0x00	; 0
    10c8:	69 f7       	brne	.-38     	; 0x10a4 <main+0x55e>
    10ca:	16 c0       	rjmp	.+44     	; 0x10f8 <main+0x5b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10cc:	fe 01       	movw	r30, r28
    10ce:	ff 96       	adiw	r30, 0x3f	; 63
    10d0:	60 81       	ld	r22, Z
    10d2:	71 81       	ldd	r23, Z+1	; 0x01
    10d4:	82 81       	ldd	r24, Z+2	; 0x02
    10d6:	93 81       	ldd	r25, Z+3	; 0x03
    10d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	9e af       	std	Y+62, r25	; 0x3e
    10e2:	8d af       	std	Y+61, r24	; 0x3d
    10e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    10e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    10e8:	9a af       	std	Y+58, r25	; 0x3a
    10ea:	89 af       	std	Y+57, r24	; 0x39
    10ec:	89 ad       	ldd	r24, Y+57	; 0x39
    10ee:	9a ad       	ldd	r25, Y+58	; 0x3a
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <main+0x5aa>
    10f4:	9a af       	std	Y+58, r25	; 0x3a
    10f6:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);
			pass_confirmed=UART_recieveByte();
    10f8:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <UART_recieveByte>
    10fc:	fe 01       	movw	r30, r28
    10fe:	eb 59       	subi	r30, 0x9B	; 155
    1100:	ff 4f       	sbci	r31, 0xFF	; 255
    1102:	80 83       	st	Z, r24
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	a8 e4       	ldi	r26, 0x48	; 72
    110a:	b2 e4       	ldi	r27, 0x42	; 66
    110c:	8d ab       	std	Y+53, r24	; 0x35
    110e:	9e ab       	std	Y+54, r25	; 0x36
    1110:	af ab       	std	Y+55, r26	; 0x37
    1112:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1114:	6d a9       	ldd	r22, Y+53	; 0x35
    1116:	7e a9       	ldd	r23, Y+54	; 0x36
    1118:	8f a9       	ldd	r24, Y+55	; 0x37
    111a:	98 ad       	ldd	r25, Y+56	; 0x38
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	4a ef       	ldi	r20, 0xFA	; 250
    1122:	54 e4       	ldi	r21, 0x44	; 68
    1124:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	89 ab       	std	Y+49, r24	; 0x31
    112e:	9a ab       	std	Y+50, r25	; 0x32
    1130:	ab ab       	std	Y+51, r26	; 0x33
    1132:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1134:	69 a9       	ldd	r22, Y+49	; 0x31
    1136:	7a a9       	ldd	r23, Y+50	; 0x32
    1138:	8b a9       	ldd	r24, Y+51	; 0x33
    113a:	9c a9       	ldd	r25, Y+52	; 0x34
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e8       	ldi	r20, 0x80	; 128
    1142:	5f e3       	ldi	r21, 0x3F	; 63
    1144:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1148:	88 23       	and	r24, r24
    114a:	2c f4       	brge	.+10     	; 0x1156 <main+0x610>
		__ticks = 1;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	98 ab       	std	Y+48, r25	; 0x30
    1152:	8f a7       	std	Y+47, r24	; 0x2f
    1154:	3f c0       	rjmp	.+126    	; 0x11d4 <main+0x68e>
	else if (__tmp > 65535)
    1156:	69 a9       	ldd	r22, Y+49	; 0x31
    1158:	7a a9       	ldd	r23, Y+50	; 0x32
    115a:	8b a9       	ldd	r24, Y+51	; 0x33
    115c:	9c a9       	ldd	r25, Y+52	; 0x34
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	3f ef       	ldi	r19, 0xFF	; 255
    1162:	4f e7       	ldi	r20, 0x7F	; 127
    1164:	57 e4       	ldi	r21, 0x47	; 71
    1166:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    116a:	18 16       	cp	r1, r24
    116c:	4c f5       	brge	.+82     	; 0x11c0 <main+0x67a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    116e:	6d a9       	ldd	r22, Y+53	; 0x35
    1170:	7e a9       	ldd	r23, Y+54	; 0x36
    1172:	8f a9       	ldd	r24, Y+55	; 0x37
    1174:	98 ad       	ldd	r25, Y+56	; 0x38
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e2       	ldi	r20, 0x20	; 32
    117c:	51 e4       	ldi	r21, 0x41	; 65
    117e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	bc 01       	movw	r22, r24
    1188:	cd 01       	movw	r24, r26
    118a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	98 ab       	std	Y+48, r25	; 0x30
    1194:	8f a7       	std	Y+47, r24	; 0x2f
    1196:	0f c0       	rjmp	.+30     	; 0x11b6 <main+0x670>
    1198:	88 ec       	ldi	r24, 0xC8	; 200
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	9e a7       	std	Y+46, r25	; 0x2e
    119e:	8d a7       	std	Y+45, r24	; 0x2d
    11a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    11a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	f1 f7       	brne	.-4      	; 0x11a4 <main+0x65e>
    11a8:	9e a7       	std	Y+46, r25	; 0x2e
    11aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    11ae:	98 a9       	ldd	r25, Y+48	; 0x30
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	98 ab       	std	Y+48, r25	; 0x30
    11b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    11b8:	98 a9       	ldd	r25, Y+48	; 0x30
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	69 f7       	brne	.-38     	; 0x1198 <main+0x652>
    11be:	14 c0       	rjmp	.+40     	; 0x11e8 <main+0x6a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c0:	69 a9       	ldd	r22, Y+49	; 0x31
    11c2:	7a a9       	ldd	r23, Y+50	; 0x32
    11c4:	8b a9       	ldd	r24, Y+51	; 0x33
    11c6:	9c a9       	ldd	r25, Y+52	; 0x34
    11c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	98 ab       	std	Y+48, r25	; 0x30
    11d2:	8f a7       	std	Y+47, r24	; 0x2f
    11d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    11d6:	98 a9       	ldd	r25, Y+48	; 0x30
    11d8:	9c a7       	std	Y+44, r25	; 0x2c
    11da:	8b a7       	std	Y+43, r24	; 0x2b
    11dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    11de:	9c a5       	ldd	r25, Y+44	; 0x2c
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	f1 f7       	brne	.-4      	; 0x11e0 <main+0x69a>
    11e4:	9c a7       	std	Y+44, r25	; 0x2c
    11e6:	8b a7       	std	Y+43, r24	; 0x2b

	while(1){


		/****************************** Step 1 ******************************/
		while(pass_confirmed==0)
    11e8:	fe 01       	movw	r30, r28
    11ea:	eb 59       	subi	r30, 0x9B	; 155
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	80 81       	ld	r24, Z
    11f0:	88 23       	and	r24, r24
    11f2:	09 f4       	brne	.+2      	; 0x11f6 <main+0x6b0>
    11f4:	66 cd       	rjmp	.-1332   	; 0xcc2 <main+0x17c>
			_delay_ms(1000);
			pass_confirmed=UART_recieveByte();
			_delay_ms(50);
		}
		/****************************** Step 2 ******************************/
		pass_confirmed=0;
    11f6:	fe 01       	movw	r30, r28
    11f8:	eb 59       	subi	r30, 0x9B	; 155
    11fa:	ff 4f       	sbci	r31, 0xFF	; 255
    11fc:	10 82       	st	Z, r1
		LCD_clearScreen();
    11fe:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "- :Change Pass");
    1202:	2b e8       	ldi	r18, 0x8B	; 139
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	60 e0       	ldi	r22, 0x00	; 0
    120a:	a9 01       	movw	r20, r18
    120c:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "+ :Open Door");
    1210:	2a e9       	ldi	r18, 0x9A	; 154
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	81 e0       	ldi	r24, 0x01	; 1
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	a9 01       	movw	r20, r18
    121a:	0e 94 24 17 	call	0x2e48	; 0x2e48 <LCD_displayStringRowColumn>
		operation = KEYPAD_getPressedKey();
    121e:	0e 94 42 11 	call	0x2284	; 0x2284 <KEYPAD_getPressedKey>
    1222:	fe 01       	movw	r30, r28
    1224:	ec 59       	subi	r30, 0x9C	; 156
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	80 83       	st	Z, r24
		/****************************** Step 3 ******************************/
		if(operation=='+')
    122a:	fe 01       	movw	r30, r28
    122c:	ec 59       	subi	r30, 0x9C	; 156
    122e:	ff 4f       	sbci	r31, 0xFF	; 255
    1230:	80 81       	ld	r24, Z
    1232:	8b 32       	cpi	r24, 0x2B	; 43
    1234:	09 f0       	breq	.+2      	; 0x1238 <main+0x6f2>
    1236:	a5 c1       	rjmp	.+842    	; 0x1582 <main+0xa3c>
		{
			UART_sendByte(operation);
    1238:	fe 01       	movw	r30, r28
    123a:	ec 59       	subi	r30, 0x9C	; 156
    123c:	ff 4f       	sbci	r31, 0xFF	; 255
    123e:	80 81       	ld	r24, Z
    1240:	0e 94 65 1a 	call	0x34ca	; 0x34ca <UART_sendByte>
    1244:	8f c1       	rjmp	.+798    	; 0x1564 <main+0xa1e>
			while((count!=3)&& (!pass_confirmed))
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	a8 e4       	ldi	r26, 0x48	; 72
    124c:	b2 e4       	ldi	r27, 0x42	; 66
    124e:	8f a3       	std	Y+39, r24	; 0x27
    1250:	98 a7       	std	Y+40, r25	; 0x28
    1252:	a9 a7       	std	Y+41, r26	; 0x29
    1254:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1256:	6f a1       	ldd	r22, Y+39	; 0x27
    1258:	78 a5       	ldd	r23, Y+40	; 0x28
    125a:	89 a5       	ldd	r24, Y+41	; 0x29
    125c:	9a a5       	ldd	r25, Y+42	; 0x2a
    125e:	20 e0       	ldi	r18, 0x00	; 0
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	4a ef       	ldi	r20, 0xFA	; 250
    1264:	54 e4       	ldi	r21, 0x44	; 68
    1266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    126a:	dc 01       	movw	r26, r24
    126c:	cb 01       	movw	r24, r22
    126e:	8b a3       	std	Y+35, r24	; 0x23
    1270:	9c a3       	std	Y+36, r25	; 0x24
    1272:	ad a3       	std	Y+37, r26	; 0x25
    1274:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1276:	6b a1       	ldd	r22, Y+35	; 0x23
    1278:	7c a1       	ldd	r23, Y+36	; 0x24
    127a:	8d a1       	ldd	r24, Y+37	; 0x25
    127c:	9e a1       	ldd	r25, Y+38	; 0x26
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	40 e8       	ldi	r20, 0x80	; 128
    1284:	5f e3       	ldi	r21, 0x3F	; 63
    1286:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    128a:	88 23       	and	r24, r24
    128c:	2c f4       	brge	.+10     	; 0x1298 <main+0x752>
		__ticks = 1;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	9a a3       	std	Y+34, r25	; 0x22
    1294:	89 a3       	std	Y+33, r24	; 0x21
    1296:	3f c0       	rjmp	.+126    	; 0x1316 <main+0x7d0>
	else if (__tmp > 65535)
    1298:	6b a1       	ldd	r22, Y+35	; 0x23
    129a:	7c a1       	ldd	r23, Y+36	; 0x24
    129c:	8d a1       	ldd	r24, Y+37	; 0x25
    129e:	9e a1       	ldd	r25, Y+38	; 0x26
    12a0:	20 e0       	ldi	r18, 0x00	; 0
    12a2:	3f ef       	ldi	r19, 0xFF	; 255
    12a4:	4f e7       	ldi	r20, 0x7F	; 127
    12a6:	57 e4       	ldi	r21, 0x47	; 71
    12a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12ac:	18 16       	cp	r1, r24
    12ae:	4c f5       	brge	.+82     	; 0x1302 <main+0x7bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b0:	6f a1       	ldd	r22, Y+39	; 0x27
    12b2:	78 a5       	ldd	r23, Y+40	; 0x28
    12b4:	89 a5       	ldd	r24, Y+41	; 0x29
    12b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	40 e2       	ldi	r20, 0x20	; 32
    12be:	51 e4       	ldi	r21, 0x41	; 65
    12c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c4:	dc 01       	movw	r26, r24
    12c6:	cb 01       	movw	r24, r22
    12c8:	bc 01       	movw	r22, r24
    12ca:	cd 01       	movw	r24, r26
    12cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	9a a3       	std	Y+34, r25	; 0x22
    12d6:	89 a3       	std	Y+33, r24	; 0x21
    12d8:	0f c0       	rjmp	.+30     	; 0x12f8 <main+0x7b2>
    12da:	88 ec       	ldi	r24, 0xC8	; 200
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	98 a3       	std	Y+32, r25	; 0x20
    12e0:	8f 8f       	std	Y+31, r24	; 0x1f
    12e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12e4:	98 a1       	ldd	r25, Y+32	; 0x20
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	f1 f7       	brne	.-4      	; 0x12e6 <main+0x7a0>
    12ea:	98 a3       	std	Y+32, r25	; 0x20
    12ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ee:	89 a1       	ldd	r24, Y+33	; 0x21
    12f0:	9a a1       	ldd	r25, Y+34	; 0x22
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	9a a3       	std	Y+34, r25	; 0x22
    12f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f8:	89 a1       	ldd	r24, Y+33	; 0x21
    12fa:	9a a1       	ldd	r25, Y+34	; 0x22
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	69 f7       	brne	.-38     	; 0x12da <main+0x794>
    1300:	14 c0       	rjmp	.+40     	; 0x132a <main+0x7e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1302:	6b a1       	ldd	r22, Y+35	; 0x23
    1304:	7c a1       	ldd	r23, Y+36	; 0x24
    1306:	8d a1       	ldd	r24, Y+37	; 0x25
    1308:	9e a1       	ldd	r25, Y+38	; 0x26
    130a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	9a a3       	std	Y+34, r25	; 0x22
    1314:	89 a3       	std	Y+33, r24	; 0x21
    1316:	89 a1       	ldd	r24, Y+33	; 0x21
    1318:	9a a1       	ldd	r25, Y+34	; 0x22
    131a:	9e 8f       	std	Y+30, r25	; 0x1e
    131c:	8d 8f       	std	Y+29, r24	; 0x1d
    131e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1320:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	f1 f7       	brne	.-4      	; 0x1322 <main+0x7dc>
    1326:	9e 8f       	std	Y+30, r25	; 0x1e
    1328:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				_delay_ms(50);
				LCD_clearScreen();
    132a:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_clearScreen>
				LCD_displayString("Plz enter pass");
    132e:	80 e6       	ldi	r24, 0x60	; 96
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <LCD_displayString>
				LCD_moveCursor(1, 0);
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_moveCursor>
				getPassword(password);
    133e:	ce 01       	movw	r24, r28
    1340:	8a 59       	subi	r24, 0x9A	; 154
    1342:	9f 4f       	sbci	r25, 0xFF	; 255
    1344:	0e 94 b8 0b 	call	0x1770	; 0x1770 <getPassword>
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	a8 e4       	ldi	r26, 0x48	; 72
    134e:	b2 e4       	ldi	r27, 0x42	; 66
    1350:	89 8f       	std	Y+25, r24	; 0x19
    1352:	9a 8f       	std	Y+26, r25	; 0x1a
    1354:	ab 8f       	std	Y+27, r26	; 0x1b
    1356:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1358:	69 8d       	ldd	r22, Y+25	; 0x19
    135a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    135c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    135e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1360:	20 e0       	ldi	r18, 0x00	; 0
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	4a ef       	ldi	r20, 0xFA	; 250
    1366:	54 e4       	ldi	r21, 0x44	; 68
    1368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    136c:	dc 01       	movw	r26, r24
    136e:	cb 01       	movw	r24, r22
    1370:	8d 8b       	std	Y+21, r24	; 0x15
    1372:	9e 8b       	std	Y+22, r25	; 0x16
    1374:	af 8b       	std	Y+23, r26	; 0x17
    1376:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1378:	6d 89       	ldd	r22, Y+21	; 0x15
    137a:	7e 89       	ldd	r23, Y+22	; 0x16
    137c:	8f 89       	ldd	r24, Y+23	; 0x17
    137e:	98 8d       	ldd	r25, Y+24	; 0x18
    1380:	20 e0       	ldi	r18, 0x00	; 0
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	40 e8       	ldi	r20, 0x80	; 128
    1386:	5f e3       	ldi	r21, 0x3F	; 63
    1388:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    138c:	88 23       	and	r24, r24
    138e:	2c f4       	brge	.+10     	; 0x139a <main+0x854>
		__ticks = 1;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	9c 8b       	std	Y+20, r25	; 0x14
    1396:	8b 8b       	std	Y+19, r24	; 0x13
    1398:	3f c0       	rjmp	.+126    	; 0x1418 <main+0x8d2>
	else if (__tmp > 65535)
    139a:	6d 89       	ldd	r22, Y+21	; 0x15
    139c:	7e 89       	ldd	r23, Y+22	; 0x16
    139e:	8f 89       	ldd	r24, Y+23	; 0x17
    13a0:	98 8d       	ldd	r25, Y+24	; 0x18
    13a2:	20 e0       	ldi	r18, 0x00	; 0
    13a4:	3f ef       	ldi	r19, 0xFF	; 255
    13a6:	4f e7       	ldi	r20, 0x7F	; 127
    13a8:	57 e4       	ldi	r21, 0x47	; 71
    13aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13ae:	18 16       	cp	r1, r24
    13b0:	4c f5       	brge	.+82     	; 0x1404 <main+0x8be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13b2:	69 8d       	ldd	r22, Y+25	; 0x19
    13b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13ba:	20 e0       	ldi	r18, 0x00	; 0
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	40 e2       	ldi	r20, 0x20	; 32
    13c0:	51 e4       	ldi	r21, 0x41	; 65
    13c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	bc 01       	movw	r22, r24
    13cc:	cd 01       	movw	r24, r26
    13ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	9c 8b       	std	Y+20, r25	; 0x14
    13d8:	8b 8b       	std	Y+19, r24	; 0x13
    13da:	0f c0       	rjmp	.+30     	; 0x13fa <main+0x8b4>
    13dc:	88 ec       	ldi	r24, 0xC8	; 200
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	9a 8b       	std	Y+18, r25	; 0x12
    13e2:	89 8b       	std	Y+17, r24	; 0x11
    13e4:	89 89       	ldd	r24, Y+17	; 0x11
    13e6:	9a 89       	ldd	r25, Y+18	; 0x12
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <main+0x8a2>
    13ec:	9a 8b       	std	Y+18, r25	; 0x12
    13ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13f0:	8b 89       	ldd	r24, Y+19	; 0x13
    13f2:	9c 89       	ldd	r25, Y+20	; 0x14
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	9c 8b       	std	Y+20, r25	; 0x14
    13f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13fa:	8b 89       	ldd	r24, Y+19	; 0x13
    13fc:	9c 89       	ldd	r25, Y+20	; 0x14
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	69 f7       	brne	.-38     	; 0x13dc <main+0x896>
    1402:	14 c0       	rjmp	.+40     	; 0x142c <main+0x8e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1404:	6d 89       	ldd	r22, Y+21	; 0x15
    1406:	7e 89       	ldd	r23, Y+22	; 0x16
    1408:	8f 89       	ldd	r24, Y+23	; 0x17
    140a:	98 8d       	ldd	r25, Y+24	; 0x18
    140c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1410:	dc 01       	movw	r26, r24
    1412:	cb 01       	movw	r24, r22
    1414:	9c 8b       	std	Y+20, r25	; 0x14
    1416:	8b 8b       	std	Y+19, r24	; 0x13
    1418:	8b 89       	ldd	r24, Y+19	; 0x13
    141a:	9c 89       	ldd	r25, Y+20	; 0x14
    141c:	98 8b       	std	Y+16, r25	; 0x10
    141e:	8f 87       	std	Y+15, r24	; 0x0f
    1420:	8f 85       	ldd	r24, Y+15	; 0x0f
    1422:	98 89       	ldd	r25, Y+16	; 0x10
    1424:	01 97       	sbiw	r24, 0x01	; 1
    1426:	f1 f7       	brne	.-4      	; 0x1424 <main+0x8de>
    1428:	98 8b       	std	Y+16, r25	; 0x10
    142a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(50);
				sendPassword(password);
    142c:	ce 01       	movw	r24, r28
    142e:	8a 59       	subi	r24, 0x9A	; 154
    1430:	9f 4f       	sbci	r25, 0xFF	; 255
    1432:	0e 94 56 0d 	call	0x1aac	; 0x1aac <sendPassword>
				pass_confirmed=UART_recieveByte();
    1436:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <UART_recieveByte>
    143a:	fe 01       	movw	r30, r28
    143c:	eb 59       	subi	r30, 0x9B	; 155
    143e:	ff 4f       	sbci	r31, 0xFF	; 255
    1440:	80 83       	st	Z, r24
				if(pass_confirmed)
    1442:	fe 01       	movw	r30, r28
    1444:	eb 59       	subi	r30, 0x9B	; 155
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	80 81       	ld	r24, Z
    144a:	88 23       	and	r24, r24
    144c:	09 f4       	brne	.+2      	; 0x1450 <main+0x90a>
    144e:	53 c0       	rjmp	.+166    	; 0x14f6 <main+0x9b0>
				{
					count=0;
    1450:	fe 01       	movw	r30, r28
    1452:	ed 59       	subi	r30, 0x9D	; 157
    1454:	ff 4f       	sbci	r31, 0xFF	; 255
    1456:	10 82       	st	Z, r1
					LCD_clearScreen();
    1458:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_clearScreen>
					LCD_displayString("Door Unlocking.");
    145c:	87 ea       	ldi	r24, 0xA7	; 167
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <LCD_displayString>
					TIMER_setCallBack(wait_seconds);
    1464:	80 ef       	ldi	r24, 0xF0	; 240
    1466:	9d e0       	ldi	r25, 0x0D	; 13
    1468:	0e 94 80 19 	call	0x3300	; 0x3300 <TIMER_setCallBack>
					TIMER_Init(&TIMER_Config); // initialize timer1
    146c:	ce 01       	movw	r24, r28
    146e:	8e 58       	subi	r24, 0x8E	; 142
    1470:	9f 4f       	sbci	r25, 0xFF	; 255
    1472:	0e 94 9c 18 	call	0x3138	; 0x3138 <TIMER_Init>
					seconds=15;
    1476:	8f e0       	ldi	r24, 0x0F	; 15
    1478:	80 93 2f 01 	sts	0x012F, r24
					while(g_tick < seconds){};//wait 15 seconds
    147c:	90 91 2e 01 	lds	r25, 0x012E
    1480:	80 91 2f 01 	lds	r24, 0x012F
    1484:	98 17       	cp	r25, r24
    1486:	d0 f3       	brcs	.-12     	; 0x147c <main+0x936>
					g_tick=0;
    1488:	10 92 2e 01 	sts	0x012E, r1


					LCD_clearScreen();
    148c:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_clearScreen>
					LCD_displayString("Door Opened");
    1490:	87 eb       	ldi	r24, 0xB7	; 183
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <LCD_displayString>

					TIMER_setCallBack(wait_seconds);
    1498:	80 ef       	ldi	r24, 0xF0	; 240
    149a:	9d e0       	ldi	r25, 0x0D	; 13
    149c:	0e 94 80 19 	call	0x3300	; 0x3300 <TIMER_setCallBack>
					TIMER_Init(&TIMER_Config); // initialize timer1
    14a0:	ce 01       	movw	r24, r28
    14a2:	8e 58       	subi	r24, 0x8E	; 142
    14a4:	9f 4f       	sbci	r25, 0xFF	; 255
    14a6:	0e 94 9c 18 	call	0x3138	; 0x3138 <TIMER_Init>
					seconds=3;
    14aa:	83 e0       	ldi	r24, 0x03	; 3
    14ac:	80 93 2f 01 	sts	0x012F, r24
					while(g_tick < seconds){};//wait 3 seconds
    14b0:	90 91 2e 01 	lds	r25, 0x012E
    14b4:	80 91 2f 01 	lds	r24, 0x012F
    14b8:	98 17       	cp	r25, r24
    14ba:	d0 f3       	brcs	.-12     	; 0x14b0 <main+0x96a>
					g_tick=0;
    14bc:	10 92 2e 01 	sts	0x012E, r1

					LCD_clearScreen();
    14c0:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_clearScreen>
					LCD_displayString("Door is Locking.");
    14c4:	83 ec       	ldi	r24, 0xC3	; 195
    14c6:	90 e0       	ldi	r25, 0x00	; 0
    14c8:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <LCD_displayString>
					TIMER_setCallBack(wait_seconds);
    14cc:	80 ef       	ldi	r24, 0xF0	; 240
    14ce:	9d e0       	ldi	r25, 0x0D	; 13
    14d0:	0e 94 80 19 	call	0x3300	; 0x3300 <TIMER_setCallBack>
					TIMER_Init(&TIMER_Config); // initialize timer1
    14d4:	ce 01       	movw	r24, r28
    14d6:	8e 58       	subi	r24, 0x8E	; 142
    14d8:	9f 4f       	sbci	r25, 0xFF	; 255
    14da:	0e 94 9c 18 	call	0x3138	; 0x3138 <TIMER_Init>
					seconds=15;
    14de:	8f e0       	ldi	r24, 0x0F	; 15
    14e0:	80 93 2f 01 	sts	0x012F, r24
					while(g_tick < seconds){};//wait 15 seconds
    14e4:	90 91 2e 01 	lds	r25, 0x012E
    14e8:	80 91 2f 01 	lds	r24, 0x012F
    14ec:	98 17       	cp	r25, r24
    14ee:	d0 f3       	brcs	.-12     	; 0x14e4 <main+0x99e>
					g_tick=0;				}
    14f0:	10 92 2e 01 	sts	0x012E, r1
    14f4:	37 c0       	rjmp	.+110    	; 0x1564 <main+0xa1e>
				else
				{
					count++;
    14f6:	de 01       	movw	r26, r28
    14f8:	ad 59       	subi	r26, 0x9D	; 157
    14fa:	bf 4f       	sbci	r27, 0xFF	; 255
    14fc:	fe 01       	movw	r30, r28
    14fe:	ed 59       	subi	r30, 0x9D	; 157
    1500:	ff 4f       	sbci	r31, 0xFF	; 255
    1502:	80 81       	ld	r24, Z
    1504:	8f 5f       	subi	r24, 0xFF	; 255
    1506:	8c 93       	st	X, r24
					UART_sendByte(count);
    1508:	fe 01       	movw	r30, r28
    150a:	ed 59       	subi	r30, 0x9D	; 157
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	80 81       	ld	r24, Z
    1510:	0e 94 65 1a 	call	0x34ca	; 0x34ca <UART_sendByte>
					if(count==3)
    1514:	fe 01       	movw	r30, r28
    1516:	ed 59       	subi	r30, 0x9D	; 157
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	80 81       	ld	r24, Z
    151c:	83 30       	cpi	r24, 0x03	; 3
    151e:	11 f5       	brne	.+68     	; 0x1564 <main+0xa1e>
					{
						pass_confirmed=1;
    1520:	fe 01       	movw	r30, r28
    1522:	eb 59       	subi	r30, 0x9B	; 155
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	80 83       	st	Z, r24
						UART_sendByte(1);
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	0e 94 65 1a 	call	0x34ca	; 0x34ca <UART_sendByte>
						LCD_clearScreen();
    1530:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_clearScreen>
						LCD_displayString("error pass xx");
    1534:	84 ed       	ldi	r24, 0xD4	; 212
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <LCD_displayString>
						TIMER_setCallBack(wait_seconds);
    153c:	80 ef       	ldi	r24, 0xF0	; 240
    153e:	9d e0       	ldi	r25, 0x0D	; 13
    1540:	0e 94 80 19 	call	0x3300	; 0x3300 <TIMER_setCallBack>
						TIMER_Init(&TIMER_Config); // initialize timer1
    1544:	ce 01       	movw	r24, r28
    1546:	8e 58       	subi	r24, 0x8E	; 142
    1548:	9f 4f       	sbci	r25, 0xFF	; 255
    154a:	0e 94 9c 18 	call	0x3138	; 0x3138 <TIMER_Init>
						seconds=60;
    154e:	8c e3       	ldi	r24, 0x3C	; 60
    1550:	80 93 2f 01 	sts	0x012F, r24
						while(g_tick < seconds){};//wait 60 seconds
    1554:	90 91 2e 01 	lds	r25, 0x012E
    1558:	80 91 2f 01 	lds	r24, 0x012F
    155c:	98 17       	cp	r25, r24
    155e:	d0 f3       	brcs	.-12     	; 0x1554 <main+0xa0e>
						g_tick=0;
    1560:	10 92 2e 01 	sts	0x012E, r1
		operation = KEYPAD_getPressedKey();
		/****************************** Step 3 ******************************/
		if(operation=='+')
		{
			UART_sendByte(operation);
			while((count!=3)&& (!pass_confirmed))
    1564:	fe 01       	movw	r30, r28
    1566:	ed 59       	subi	r30, 0x9D	; 157
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	80 81       	ld	r24, Z
    156c:	83 30       	cpi	r24, 0x03	; 3
    156e:	09 f4       	brne	.+2      	; 0x1572 <main+0xa2c>
    1570:	3b ce       	rjmp	.-906    	; 0x11e8 <main+0x6a2>
    1572:	fe 01       	movw	r30, r28
    1574:	eb 59       	subi	r30, 0x9B	; 155
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	80 81       	ld	r24, Z
    157a:	88 23       	and	r24, r24
    157c:	09 f4       	brne	.+2      	; 0x1580 <main+0xa3a>
    157e:	63 ce       	rjmp	.-826    	; 0x1246 <main+0x700>
    1580:	33 ce       	rjmp	.-922    	; 0x11e8 <main+0x6a2>

			}

		}
		/****************************** Step 4 ******************************/
		else if(operation=='-')
    1582:	fe 01       	movw	r30, r28
    1584:	ec 59       	subi	r30, 0x9C	; 156
    1586:	ff 4f       	sbci	r31, 0xFF	; 255
    1588:	80 81       	ld	r24, Z
    158a:	8d 32       	cpi	r24, 0x2D	; 45
    158c:	09 f0       	breq	.+2      	; 0x1590 <main+0xa4a>
    158e:	2c ce       	rjmp	.-936    	; 0x11e8 <main+0x6a2>
		{
			UART_sendByte(operation);
    1590:	fe 01       	movw	r30, r28
    1592:	ec 59       	subi	r30, 0x9C	; 156
    1594:	ff 4f       	sbci	r31, 0xFF	; 255
    1596:	80 81       	ld	r24, Z
    1598:	0e 94 65 1a 	call	0x34ca	; 0x34ca <UART_sendByte>
    159c:	da c0       	rjmp	.+436    	; 0x1752 <main+0xc0c>
			while((count!=3)&& (!pass_confirmed))
			{
				LCD_clearScreen();
    159e:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_clearScreen>
				LCD_displayString("Plz enter old");
    15a2:	82 ee       	ldi	r24, 0xE2	; 226
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <LCD_displayString>
				LCD_moveCursor(1, 0);
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_moveCursor>
				LCD_displayString("pass:");
    15b2:	80 ef       	ldi	r24, 0xF0	; 240
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <LCD_displayString>
				LCD_moveCursor(1, 6);
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	66 e0       	ldi	r22, 0x06	; 6
    15be:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_moveCursor>
				getPassword(password);
    15c2:	ce 01       	movw	r24, r28
    15c4:	8a 59       	subi	r24, 0x9A	; 154
    15c6:	9f 4f       	sbci	r25, 0xFF	; 255
    15c8:	0e 94 b8 0b 	call	0x1770	; 0x1770 <getPassword>
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	a8 e4       	ldi	r26, 0x48	; 72
    15d2:	b2 e4       	ldi	r27, 0x42	; 66
    15d4:	8b 87       	std	Y+11, r24	; 0x0b
    15d6:	9c 87       	std	Y+12, r25	; 0x0c
    15d8:	ad 87       	std	Y+13, r26	; 0x0d
    15da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    15de:	7c 85       	ldd	r23, Y+12	; 0x0c
    15e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	4a ef       	ldi	r20, 0xFA	; 250
    15ea:	54 e4       	ldi	r21, 0x44	; 68
    15ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	8f 83       	std	Y+7, r24	; 0x07
    15f6:	98 87       	std	Y+8, r25	; 0x08
    15f8:	a9 87       	std	Y+9, r26	; 0x09
    15fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15fc:	6f 81       	ldd	r22, Y+7	; 0x07
    15fe:	78 85       	ldd	r23, Y+8	; 0x08
    1600:	89 85       	ldd	r24, Y+9	; 0x09
    1602:	9a 85       	ldd	r25, Y+10	; 0x0a
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e8       	ldi	r20, 0x80	; 128
    160a:	5f e3       	ldi	r21, 0x3F	; 63
    160c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1610:	88 23       	and	r24, r24
    1612:	2c f4       	brge	.+10     	; 0x161e <main+0xad8>
		__ticks = 1;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	9e 83       	std	Y+6, r25	; 0x06
    161a:	8d 83       	std	Y+5, r24	; 0x05
    161c:	3f c0       	rjmp	.+126    	; 0x169c <main+0xb56>
	else if (__tmp > 65535)
    161e:	6f 81       	ldd	r22, Y+7	; 0x07
    1620:	78 85       	ldd	r23, Y+8	; 0x08
    1622:	89 85       	ldd	r24, Y+9	; 0x09
    1624:	9a 85       	ldd	r25, Y+10	; 0x0a
    1626:	20 e0       	ldi	r18, 0x00	; 0
    1628:	3f ef       	ldi	r19, 0xFF	; 255
    162a:	4f e7       	ldi	r20, 0x7F	; 127
    162c:	57 e4       	ldi	r21, 0x47	; 71
    162e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1632:	18 16       	cp	r1, r24
    1634:	4c f5       	brge	.+82     	; 0x1688 <main+0xb42>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1636:	6b 85       	ldd	r22, Y+11	; 0x0b
    1638:	7c 85       	ldd	r23, Y+12	; 0x0c
    163a:	8d 85       	ldd	r24, Y+13	; 0x0d
    163c:	9e 85       	ldd	r25, Y+14	; 0x0e
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e2       	ldi	r20, 0x20	; 32
    1644:	51 e4       	ldi	r21, 0x41	; 65
    1646:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	bc 01       	movw	r22, r24
    1650:	cd 01       	movw	r24, r26
    1652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1656:	dc 01       	movw	r26, r24
    1658:	cb 01       	movw	r24, r22
    165a:	9e 83       	std	Y+6, r25	; 0x06
    165c:	8d 83       	std	Y+5, r24	; 0x05
    165e:	0f c0       	rjmp	.+30     	; 0x167e <main+0xb38>
    1660:	88 ec       	ldi	r24, 0xC8	; 200
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	9c 83       	std	Y+4, r25	; 0x04
    1666:	8b 83       	std	Y+3, r24	; 0x03
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	f1 f7       	brne	.-4      	; 0x166c <main+0xb26>
    1670:	9c 83       	std	Y+4, r25	; 0x04
    1672:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1674:	8d 81       	ldd	r24, Y+5	; 0x05
    1676:	9e 81       	ldd	r25, Y+6	; 0x06
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	9e 83       	std	Y+6, r25	; 0x06
    167c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	69 f7       	brne	.-38     	; 0x1660 <main+0xb1a>
    1686:	14 c0       	rjmp	.+40     	; 0x16b0 <main+0xb6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1688:	6f 81       	ldd	r22, Y+7	; 0x07
    168a:	78 85       	ldd	r23, Y+8	; 0x08
    168c:	89 85       	ldd	r24, Y+9	; 0x09
    168e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1690:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	9e 83       	std	Y+6, r25	; 0x06
    169a:	8d 83       	std	Y+5, r24	; 0x05
    169c:	8d 81       	ldd	r24, Y+5	; 0x05
    169e:	9e 81       	ldd	r25, Y+6	; 0x06
    16a0:	9a 83       	std	Y+2, r25	; 0x02
    16a2:	89 83       	std	Y+1, r24	; 0x01
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	9a 81       	ldd	r25, Y+2	; 0x02
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <main+0xb62>
    16ac:	9a 83       	std	Y+2, r25	; 0x02
    16ae:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(50);
				sendPassword(password);
    16b0:	ce 01       	movw	r24, r28
    16b2:	8a 59       	subi	r24, 0x9A	; 154
    16b4:	9f 4f       	sbci	r25, 0xFF	; 255
    16b6:	0e 94 56 0d 	call	0x1aac	; 0x1aac <sendPassword>
				pass_confirmed=UART_recieveByte();
    16ba:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <UART_recieveByte>
    16be:	fe 01       	movw	r30, r28
    16c0:	eb 59       	subi	r30, 0x9B	; 155
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	80 83       	st	Z, r24
				if(pass_confirmed){
    16c6:	fe 01       	movw	r30, r28
    16c8:	eb 59       	subi	r30, 0x9B	; 155
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	80 81       	ld	r24, Z
    16ce:	88 23       	and	r24, r24
    16d0:	49 f0       	breq	.+18     	; 0x16e4 <main+0xb9e>
					count=0;
    16d2:	fe 01       	movw	r30, r28
    16d4:	ed 59       	subi	r30, 0x9D	; 157
    16d6:	ff 4f       	sbci	r31, 0xFF	; 255
    16d8:	10 82       	st	Z, r1
					pass_confirmed=0;
    16da:	fe 01       	movw	r30, r28
    16dc:	eb 59       	subi	r30, 0x9B	; 155
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	10 82       	st	Z, r1
    16e2:	82 cd       	rjmp	.-1276   	; 0x11e8 <main+0x6a2>
					break;
				}
				else
				{
					count++;
    16e4:	de 01       	movw	r26, r28
    16e6:	ad 59       	subi	r26, 0x9D	; 157
    16e8:	bf 4f       	sbci	r27, 0xFF	; 255
    16ea:	fe 01       	movw	r30, r28
    16ec:	ed 59       	subi	r30, 0x9D	; 157
    16ee:	ff 4f       	sbci	r31, 0xFF	; 255
    16f0:	80 81       	ld	r24, Z
    16f2:	8f 5f       	subi	r24, 0xFF	; 255
    16f4:	8c 93       	st	X, r24
					UART_sendByte(count);
    16f6:	fe 01       	movw	r30, r28
    16f8:	ed 59       	subi	r30, 0x9D	; 157
    16fa:	ff 4f       	sbci	r31, 0xFF	; 255
    16fc:	80 81       	ld	r24, Z
    16fe:	0e 94 65 1a 	call	0x34ca	; 0x34ca <UART_sendByte>
					if(count==3)
    1702:	fe 01       	movw	r30, r28
    1704:	ed 59       	subi	r30, 0x9D	; 157
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	80 81       	ld	r24, Z
    170a:	83 30       	cpi	r24, 0x03	; 3
    170c:	11 f5       	brne	.+68     	; 0x1752 <main+0xc0c>
					{
						pass_confirmed=1;
    170e:	fe 01       	movw	r30, r28
    1710:	eb 59       	subi	r30, 0x9B	; 155
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	80 83       	st	Z, r24
						UART_sendByte(1);
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	0e 94 65 1a 	call	0x34ca	; 0x34ca <UART_sendByte>
						LCD_clearScreen();
    171e:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_clearScreen>
						LCD_displayString("error pass xxx");
    1722:	86 ef       	ldi	r24, 0xF6	; 246
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <LCD_displayString>
						TIMER_setCallBack(wait_seconds);
    172a:	80 ef       	ldi	r24, 0xF0	; 240
    172c:	9d e0       	ldi	r25, 0x0D	; 13
    172e:	0e 94 80 19 	call	0x3300	; 0x3300 <TIMER_setCallBack>
						TIMER_Init(&TIMER_Config); // initialize timer1
    1732:	ce 01       	movw	r24, r28
    1734:	8e 58       	subi	r24, 0x8E	; 142
    1736:	9f 4f       	sbci	r25, 0xFF	; 255
    1738:	0e 94 9c 18 	call	0x3138	; 0x3138 <TIMER_Init>
						seconds=60;
    173c:	8c e3       	ldi	r24, 0x3C	; 60
    173e:	80 93 2f 01 	sts	0x012F, r24
						while(g_tick < seconds){};//wait 60 seconds
    1742:	90 91 2e 01 	lds	r25, 0x012E
    1746:	80 91 2f 01 	lds	r24, 0x012F
    174a:	98 17       	cp	r25, r24
    174c:	d0 f3       	brcs	.-12     	; 0x1742 <main+0xbfc>
						g_tick=0;
    174e:	10 92 2e 01 	sts	0x012E, r1
		}
		/****************************** Step 4 ******************************/
		else if(operation=='-')
		{
			UART_sendByte(operation);
			while((count!=3)&& (!pass_confirmed))
    1752:	fe 01       	movw	r30, r28
    1754:	ed 59       	subi	r30, 0x9D	; 157
    1756:	ff 4f       	sbci	r31, 0xFF	; 255
    1758:	80 81       	ld	r24, Z
    175a:	83 30       	cpi	r24, 0x03	; 3
    175c:	09 f4       	brne	.+2      	; 0x1760 <main+0xc1a>
    175e:	44 cd       	rjmp	.-1400   	; 0x11e8 <main+0x6a2>
    1760:	fe 01       	movw	r30, r28
    1762:	eb 59       	subi	r30, 0x9B	; 155
    1764:	ff 4f       	sbci	r31, 0xFF	; 255
    1766:	80 81       	ld	r24, Z
    1768:	88 23       	and	r24, r24
    176a:	09 f4       	brne	.+2      	; 0x176e <main+0xc28>
    176c:	18 cf       	rjmp	.-464    	; 0x159e <main+0xa58>
    176e:	3c cd       	rjmp	.-1416   	; 0x11e8 <main+0x6a2>

00001770 <getPassword>:
}
/*
 * description: this function will include store the 5 letters that will be stored in password plus confirm letter
 */
void getPassword (uint8 password[])
{
    1770:	0f 93       	push	r16
    1772:	1f 93       	push	r17
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	ae 97       	sbiw	r28, 0x2e	; 46
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	9e a7       	std	Y+46, r25	; 0x2e
    178a:	8d a7       	std	Y+45, r24	; 0x2d
	uint8 i=0,flag=0;
    178c:	1c a6       	std	Y+44, r1	; 0x2c
    178e:	1b a6       	std	Y+43, r1	; 0x2b

	for (i=0 ; i<5 ;i++)
    1790:	1c a6       	std	Y+44, r1	; 0x2c
    1792:	84 c0       	rjmp	.+264    	; 0x189c <getPassword+0x12c>
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	aa ef       	ldi	r26, 0xFA	; 250
    179a:	b3 e4       	ldi	r27, 0x43	; 67
    179c:	8f a3       	std	Y+39, r24	; 0x27
    179e:	98 a7       	std	Y+40, r25	; 0x28
    17a0:	a9 a7       	std	Y+41, r26	; 0x29
    17a2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a4:	6f a1       	ldd	r22, Y+39	; 0x27
    17a6:	78 a5       	ldd	r23, Y+40	; 0x28
    17a8:	89 a5       	ldd	r24, Y+41	; 0x29
    17aa:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	4a ef       	ldi	r20, 0xFA	; 250
    17b2:	54 e4       	ldi	r21, 0x44	; 68
    17b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	8b a3       	std	Y+35, r24	; 0x23
    17be:	9c a3       	std	Y+36, r25	; 0x24
    17c0:	ad a3       	std	Y+37, r26	; 0x25
    17c2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17c4:	6b a1       	ldd	r22, Y+35	; 0x23
    17c6:	7c a1       	ldd	r23, Y+36	; 0x24
    17c8:	8d a1       	ldd	r24, Y+37	; 0x25
    17ca:	9e a1       	ldd	r25, Y+38	; 0x26
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d8:	88 23       	and	r24, r24
    17da:	2c f4       	brge	.+10     	; 0x17e6 <getPassword+0x76>
		__ticks = 1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	9a a3       	std	Y+34, r25	; 0x22
    17e2:	89 a3       	std	Y+33, r24	; 0x21
    17e4:	3f c0       	rjmp	.+126    	; 0x1864 <getPassword+0xf4>
	else if (__tmp > 65535)
    17e6:	6b a1       	ldd	r22, Y+35	; 0x23
    17e8:	7c a1       	ldd	r23, Y+36	; 0x24
    17ea:	8d a1       	ldd	r24, Y+37	; 0x25
    17ec:	9e a1       	ldd	r25, Y+38	; 0x26
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	3f ef       	ldi	r19, 0xFF	; 255
    17f2:	4f e7       	ldi	r20, 0x7F	; 127
    17f4:	57 e4       	ldi	r21, 0x47	; 71
    17f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17fa:	18 16       	cp	r1, r24
    17fc:	4c f5       	brge	.+82     	; 0x1850 <getPassword+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fe:	6f a1       	ldd	r22, Y+39	; 0x27
    1800:	78 a5       	ldd	r23, Y+40	; 0x28
    1802:	89 a5       	ldd	r24, Y+41	; 0x29
    1804:	9a a5       	ldd	r25, Y+42	; 0x2a
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e2       	ldi	r20, 0x20	; 32
    180c:	51 e4       	ldi	r21, 0x41	; 65
    180e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	bc 01       	movw	r22, r24
    1818:	cd 01       	movw	r24, r26
    181a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	9a a3       	std	Y+34, r25	; 0x22
    1824:	89 a3       	std	Y+33, r24	; 0x21
    1826:	0f c0       	rjmp	.+30     	; 0x1846 <getPassword+0xd6>
    1828:	88 ec       	ldi	r24, 0xC8	; 200
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	98 a3       	std	Y+32, r25	; 0x20
    182e:	8f 8f       	std	Y+31, r24	; 0x1f
    1830:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1832:	98 a1       	ldd	r25, Y+32	; 0x20
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <getPassword+0xc4>
    1838:	98 a3       	std	Y+32, r25	; 0x20
    183a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183c:	89 a1       	ldd	r24, Y+33	; 0x21
    183e:	9a a1       	ldd	r25, Y+34	; 0x22
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	9a a3       	std	Y+34, r25	; 0x22
    1844:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1846:	89 a1       	ldd	r24, Y+33	; 0x21
    1848:	9a a1       	ldd	r25, Y+34	; 0x22
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	69 f7       	brne	.-38     	; 0x1828 <getPassword+0xb8>
    184e:	14 c0       	rjmp	.+40     	; 0x1878 <getPassword+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1850:	6b a1       	ldd	r22, Y+35	; 0x23
    1852:	7c a1       	ldd	r23, Y+36	; 0x24
    1854:	8d a1       	ldd	r24, Y+37	; 0x25
    1856:	9e a1       	ldd	r25, Y+38	; 0x26
    1858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	9a a3       	std	Y+34, r25	; 0x22
    1862:	89 a3       	std	Y+33, r24	; 0x21
    1864:	89 a1       	ldd	r24, Y+33	; 0x21
    1866:	9a a1       	ldd	r25, Y+34	; 0x22
    1868:	9e 8f       	std	Y+30, r25	; 0x1e
    186a:	8d 8f       	std	Y+29, r24	; 0x1d
    186c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    186e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <getPassword+0x100>
    1874:	9e 8f       	std	Y+30, r25	; 0x1e
    1876:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		_delay_ms (500);
		password[i] = KEYPAD_getPressedKey();
    1878:	8c a5       	ldd	r24, Y+44	; 0x2c
    187a:	28 2f       	mov	r18, r24
    187c:	30 e0       	ldi	r19, 0x00	; 0
    187e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1880:	9e a5       	ldd	r25, Y+46	; 0x2e
    1882:	8c 01       	movw	r16, r24
    1884:	02 0f       	add	r16, r18
    1886:	13 1f       	adc	r17, r19
    1888:	0e 94 42 11 	call	0x2284	; 0x2284 <KEYPAD_getPressedKey>
    188c:	f8 01       	movw	r30, r16
    188e:	80 83       	st	Z, r24

		LCD_displayCharacter('*');
    1890:	8a e2       	ldi	r24, 0x2A	; 42
    1892:	0e 94 ca 14 	call	0x2994	; 0x2994 <LCD_displayCharacter>
 */
void getPassword (uint8 password[])
{
	uint8 i=0,flag=0;

	for (i=0 ; i<5 ;i++)
    1896:	8c a5       	ldd	r24, Y+44	; 0x2c
    1898:	8f 5f       	subi	r24, 0xFF	; 255
    189a:	8c a7       	std	Y+44, r24	; 0x2c
    189c:	8c a5       	ldd	r24, Y+44	; 0x2c
    189e:	85 30       	cpi	r24, 0x05	; 5
    18a0:	08 f4       	brcc	.+2      	; 0x18a4 <getPassword+0x134>
    18a2:	78 cf       	rjmp	.-272    	; 0x1794 <getPassword+0x24>
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	aa ef       	ldi	r26, 0xFA	; 250
    18aa:	b3 e4       	ldi	r27, 0x43	; 67
    18ac:	89 8f       	std	Y+25, r24	; 0x19
    18ae:	9a 8f       	std	Y+26, r25	; 0x1a
    18b0:	ab 8f       	std	Y+27, r26	; 0x1b
    18b2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b4:	69 8d       	ldd	r22, Y+25	; 0x19
    18b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	4a ef       	ldi	r20, 0xFA	; 250
    18c2:	54 e4       	ldi	r21, 0x44	; 68
    18c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	8d 8b       	std	Y+21, r24	; 0x15
    18ce:	9e 8b       	std	Y+22, r25	; 0x16
    18d0:	af 8b       	std	Y+23, r26	; 0x17
    18d2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18d4:	6d 89       	ldd	r22, Y+21	; 0x15
    18d6:	7e 89       	ldd	r23, Y+22	; 0x16
    18d8:	8f 89       	ldd	r24, Y+23	; 0x17
    18da:	98 8d       	ldd	r25, Y+24	; 0x18
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e8       	ldi	r20, 0x80	; 128
    18e2:	5f e3       	ldi	r21, 0x3F	; 63
    18e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18e8:	88 23       	and	r24, r24
    18ea:	2c f4       	brge	.+10     	; 0x18f6 <getPassword+0x186>
		__ticks = 1;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	9c 8b       	std	Y+20, r25	; 0x14
    18f2:	8b 8b       	std	Y+19, r24	; 0x13
    18f4:	3f c0       	rjmp	.+126    	; 0x1974 <getPassword+0x204>
	else if (__tmp > 65535)
    18f6:	6d 89       	ldd	r22, Y+21	; 0x15
    18f8:	7e 89       	ldd	r23, Y+22	; 0x16
    18fa:	8f 89       	ldd	r24, Y+23	; 0x17
    18fc:	98 8d       	ldd	r25, Y+24	; 0x18
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	3f ef       	ldi	r19, 0xFF	; 255
    1902:	4f e7       	ldi	r20, 0x7F	; 127
    1904:	57 e4       	ldi	r21, 0x47	; 71
    1906:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    190a:	18 16       	cp	r1, r24
    190c:	4c f5       	brge	.+82     	; 0x1960 <getPassword+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190e:	69 8d       	ldd	r22, Y+25	; 0x19
    1910:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1912:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1914:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e2       	ldi	r20, 0x20	; 32
    191c:	51 e4       	ldi	r21, 0x41	; 65
    191e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	bc 01       	movw	r22, r24
    1928:	cd 01       	movw	r24, r26
    192a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	9c 8b       	std	Y+20, r25	; 0x14
    1934:	8b 8b       	std	Y+19, r24	; 0x13
    1936:	0f c0       	rjmp	.+30     	; 0x1956 <getPassword+0x1e6>
    1938:	88 ec       	ldi	r24, 0xC8	; 200
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9a 8b       	std	Y+18, r25	; 0x12
    193e:	89 8b       	std	Y+17, r24	; 0x11
    1940:	89 89       	ldd	r24, Y+17	; 0x11
    1942:	9a 89       	ldd	r25, Y+18	; 0x12
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <getPassword+0x1d4>
    1948:	9a 8b       	std	Y+18, r25	; 0x12
    194a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194c:	8b 89       	ldd	r24, Y+19	; 0x13
    194e:	9c 89       	ldd	r25, Y+20	; 0x14
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	9c 8b       	std	Y+20, r25	; 0x14
    1954:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1956:	8b 89       	ldd	r24, Y+19	; 0x13
    1958:	9c 89       	ldd	r25, Y+20	; 0x14
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	69 f7       	brne	.-38     	; 0x1938 <getPassword+0x1c8>
    195e:	14 c0       	rjmp	.+40     	; 0x1988 <getPassword+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1960:	6d 89       	ldd	r22, Y+21	; 0x15
    1962:	7e 89       	ldd	r23, Y+22	; 0x16
    1964:	8f 89       	ldd	r24, Y+23	; 0x17
    1966:	98 8d       	ldd	r25, Y+24	; 0x18
    1968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	9c 8b       	std	Y+20, r25	; 0x14
    1972:	8b 8b       	std	Y+19, r24	; 0x13
    1974:	8b 89       	ldd	r24, Y+19	; 0x13
    1976:	9c 89       	ldd	r25, Y+20	; 0x14
    1978:	98 8b       	std	Y+16, r25	; 0x10
    197a:	8f 87       	std	Y+15, r24	; 0x0f
    197c:	8f 85       	ldd	r24, Y+15	; 0x0f
    197e:	98 89       	ldd	r25, Y+16	; 0x10
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <getPassword+0x210>
    1984:	98 8b       	std	Y+16, r25	; 0x10
    1986:	8f 87       	std	Y+15, r24	; 0x0f
		password[i] = KEYPAD_getPressedKey();

		LCD_displayCharacter('*');
	}
	_delay_ms(500);
	LCD_clearScreen();
    1988:	0e 94 60 17 	call	0x2ec0	; 0x2ec0 <LCD_clearScreen>
	LCD_displayString("enter = as ok");
    198c:	85 e0       	ldi	r24, 0x05	; 5
    198e:	91 e0       	ldi	r25, 0x01	; 1
    1990:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <LCD_displayString>
    1994:	7c c0       	rjmp	.+248    	; 0x1a8e <getPassword+0x31e>

	while(!flag)
	{
		flag =KEYPAD_getPressedKey();
    1996:	0e 94 42 11 	call	0x2284	; 0x2284 <KEYPAD_getPressedKey>
    199a:	8b a7       	std	Y+43, r24	; 0x2b
		if(flag =='=')
    199c:	8b a5       	ldd	r24, Y+43	; 0x2b
    199e:	8d 33       	cpi	r24, 0x3D	; 61
    19a0:	19 f4       	brne	.+6      	; 0x19a8 <getPassword+0x238>
			flag=1;
    19a2:	81 e0       	ldi	r24, 0x01	; 1
    19a4:	8b a7       	std	Y+43, r24	; 0x2b
    19a6:	01 c0       	rjmp	.+2      	; 0x19aa <getPassword+0x23a>
		else
			flag =0;
    19a8:	1b a6       	std	Y+43, r1	; 0x2b
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	aa ef       	ldi	r26, 0xFA	; 250
    19b0:	b3 e4       	ldi	r27, 0x43	; 67
    19b2:	8b 87       	std	Y+11, r24	; 0x0b
    19b4:	9c 87       	std	Y+12, r25	; 0x0c
    19b6:	ad 87       	std	Y+13, r26	; 0x0d
    19b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    19bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19be:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	4a ef       	ldi	r20, 0xFA	; 250
    19c8:	54 e4       	ldi	r21, 0x44	; 68
    19ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	8f 83       	std	Y+7, r24	; 0x07
    19d4:	98 87       	std	Y+8, r25	; 0x08
    19d6:	a9 87       	std	Y+9, r26	; 0x09
    19d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19da:	6f 81       	ldd	r22, Y+7	; 0x07
    19dc:	78 85       	ldd	r23, Y+8	; 0x08
    19de:	89 85       	ldd	r24, Y+9	; 0x09
    19e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19e2:	20 e0       	ldi	r18, 0x00	; 0
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	40 e8       	ldi	r20, 0x80	; 128
    19e8:	5f e3       	ldi	r21, 0x3F	; 63
    19ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ee:	88 23       	and	r24, r24
    19f0:	2c f4       	brge	.+10     	; 0x19fc <getPassword+0x28c>
		__ticks = 1;
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	9e 83       	std	Y+6, r25	; 0x06
    19f8:	8d 83       	std	Y+5, r24	; 0x05
    19fa:	3f c0       	rjmp	.+126    	; 0x1a7a <getPassword+0x30a>
	else if (__tmp > 65535)
    19fc:	6f 81       	ldd	r22, Y+7	; 0x07
    19fe:	78 85       	ldd	r23, Y+8	; 0x08
    1a00:	89 85       	ldd	r24, Y+9	; 0x09
    1a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	3f ef       	ldi	r19, 0xFF	; 255
    1a08:	4f e7       	ldi	r20, 0x7F	; 127
    1a0a:	57 e4       	ldi	r21, 0x47	; 71
    1a0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a10:	18 16       	cp	r1, r24
    1a12:	4c f5       	brge	.+82     	; 0x1a66 <getPassword+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a14:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a16:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a18:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	40 e2       	ldi	r20, 0x20	; 32
    1a22:	51 e4       	ldi	r21, 0x41	; 65
    1a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a28:	dc 01       	movw	r26, r24
    1a2a:	cb 01       	movw	r24, r22
    1a2c:	bc 01       	movw	r22, r24
    1a2e:	cd 01       	movw	r24, r26
    1a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a34:	dc 01       	movw	r26, r24
    1a36:	cb 01       	movw	r24, r22
    1a38:	9e 83       	std	Y+6, r25	; 0x06
    1a3a:	8d 83       	std	Y+5, r24	; 0x05
    1a3c:	0f c0       	rjmp	.+30     	; 0x1a5c <getPassword+0x2ec>
    1a3e:	88 ec       	ldi	r24, 0xC8	; 200
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	9c 83       	std	Y+4, r25	; 0x04
    1a44:	8b 83       	std	Y+3, r24	; 0x03
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	9c 81       	ldd	r25, Y+4	; 0x04
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	f1 f7       	brne	.-4      	; 0x1a4a <getPassword+0x2da>
    1a4e:	9c 83       	std	Y+4, r25	; 0x04
    1a50:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a52:	8d 81       	ldd	r24, Y+5	; 0x05
    1a54:	9e 81       	ldd	r25, Y+6	; 0x06
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	9e 83       	std	Y+6, r25	; 0x06
    1a5a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	69 f7       	brne	.-38     	; 0x1a3e <getPassword+0x2ce>
    1a64:	14 c0       	rjmp	.+40     	; 0x1a8e <getPassword+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a66:	6f 81       	ldd	r22, Y+7	; 0x07
    1a68:	78 85       	ldd	r23, Y+8	; 0x08
    1a6a:	89 85       	ldd	r24, Y+9	; 0x09
    1a6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a72:	dc 01       	movw	r26, r24
    1a74:	cb 01       	movw	r24, r22
    1a76:	9e 83       	std	Y+6, r25	; 0x06
    1a78:	8d 83       	std	Y+5, r24	; 0x05
    1a7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7e:	9a 83       	std	Y+2, r25	; 0x02
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	89 81       	ldd	r24, Y+1	; 0x01
    1a84:	9a 81       	ldd	r25, Y+2	; 0x02
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <getPassword+0x316>
    1a8a:	9a 83       	std	Y+2, r25	; 0x02
    1a8c:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(500);
	LCD_clearScreen();
	LCD_displayString("enter = as ok");

	while(!flag)
    1a8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a90:	88 23       	and	r24, r24
    1a92:	09 f4       	brne	.+2      	; 0x1a96 <getPassword+0x326>
    1a94:	80 cf       	rjmp	.-256    	; 0x1996 <getPassword+0x226>
			flag=1;
		else
			flag =0;
		_delay_ms(500);
	}
}
    1a96:	ae 96       	adiw	r28, 0x2e	; 46
    1a98:	0f b6       	in	r0, 0x3f	; 63
    1a9a:	f8 94       	cli
    1a9c:	de bf       	out	0x3e, r29	; 62
    1a9e:	0f be       	out	0x3f, r0	; 63
    1aa0:	cd bf       	out	0x3d, r28	; 61
    1aa2:	cf 91       	pop	r28
    1aa4:	df 91       	pop	r29
    1aa6:	1f 91       	pop	r17
    1aa8:	0f 91       	pop	r16
    1aaa:	08 95       	ret

00001aac <sendPassword>:
/*
 * description send the password byte after byte to the Control_ECU MC to be checked
 */
void sendPassword (uint8 password[])
{
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	61 97       	sbiw	r28, 0x11	; 17
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	99 8b       	std	Y+17, r25	; 0x11
    1ac2:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    1ac4:	1f 86       	std	Y+15, r1	; 0x0f
    1ac6:	0e c0       	rjmp	.+28     	; 0x1ae4 <sendPassword+0x38>
	{
		UART_sendByte (password[i]);
    1ac8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aca:	28 2f       	mov	r18, r24
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	88 89       	ldd	r24, Y+16	; 0x10
    1ad0:	99 89       	ldd	r25, Y+17	; 0x11
    1ad2:	fc 01       	movw	r30, r24
    1ad4:	e2 0f       	add	r30, r18
    1ad6:	f3 1f       	adc	r31, r19
    1ad8:	80 81       	ld	r24, Z
    1ada:	0e 94 65 1a 	call	0x34ca	; 0x34ca <UART_sendByte>
 */
void sendPassword (uint8 password[])
{
	uint8 i;

	for (i=0 ; i<5 ; ++i)
    1ade:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae0:	8f 5f       	subi	r24, 0xFF	; 255
    1ae2:	8f 87       	std	Y+15, r24	; 0x0f
    1ae4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ae6:	85 30       	cpi	r24, 0x05	; 5
    1ae8:	78 f3       	brcs	.-34     	; 0x1ac8 <sendPassword+0x1c>
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	a2 e0       	ldi	r26, 0x02	; 2
    1af0:	b3 e4       	ldi	r27, 0x43	; 67
    1af2:	8b 87       	std	Y+11, r24	; 0x0b
    1af4:	9c 87       	std	Y+12, r25	; 0x0c
    1af6:	ad 87       	std	Y+13, r26	; 0x0d
    1af8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1afa:	6b 85       	ldd	r22, Y+11	; 0x0b
    1afc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b00:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	4a ef       	ldi	r20, 0xFA	; 250
    1b08:	54 e4       	ldi	r21, 0x44	; 68
    1b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	8f 83       	std	Y+7, r24	; 0x07
    1b14:	98 87       	std	Y+8, r25	; 0x08
    1b16:	a9 87       	std	Y+9, r26	; 0x09
    1b18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b1c:	78 85       	ldd	r23, Y+8	; 0x08
    1b1e:	89 85       	ldd	r24, Y+9	; 0x09
    1b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b22:	20 e0       	ldi	r18, 0x00	; 0
    1b24:	30 e0       	ldi	r19, 0x00	; 0
    1b26:	40 e8       	ldi	r20, 0x80	; 128
    1b28:	5f e3       	ldi	r21, 0x3F	; 63
    1b2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b2e:	88 23       	and	r24, r24
    1b30:	2c f4       	brge	.+10     	; 0x1b3c <sendPassword+0x90>
		__ticks = 1;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	9e 83       	std	Y+6, r25	; 0x06
    1b38:	8d 83       	std	Y+5, r24	; 0x05
    1b3a:	3f c0       	rjmp	.+126    	; 0x1bba <sendPassword+0x10e>
	else if (__tmp > 65535)
    1b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b3e:	78 85       	ldd	r23, Y+8	; 0x08
    1b40:	89 85       	ldd	r24, Y+9	; 0x09
    1b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	3f ef       	ldi	r19, 0xFF	; 255
    1b48:	4f e7       	ldi	r20, 0x7F	; 127
    1b4a:	57 e4       	ldi	r21, 0x47	; 71
    1b4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b50:	18 16       	cp	r1, r24
    1b52:	4c f5       	brge	.+82     	; 0x1ba6 <sendPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b5c:	20 e0       	ldi	r18, 0x00	; 0
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	40 e2       	ldi	r20, 0x20	; 32
    1b62:	51 e4       	ldi	r21, 0x41	; 65
    1b64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b68:	dc 01       	movw	r26, r24
    1b6a:	cb 01       	movw	r24, r22
    1b6c:	bc 01       	movw	r22, r24
    1b6e:	cd 01       	movw	r24, r26
    1b70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b74:	dc 01       	movw	r26, r24
    1b76:	cb 01       	movw	r24, r22
    1b78:	9e 83       	std	Y+6, r25	; 0x06
    1b7a:	8d 83       	std	Y+5, r24	; 0x05
    1b7c:	0f c0       	rjmp	.+30     	; 0x1b9c <sendPassword+0xf0>
    1b7e:	88 ec       	ldi	r24, 0xC8	; 200
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	9c 83       	std	Y+4, r25	; 0x04
    1b84:	8b 83       	std	Y+3, r24	; 0x03
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <sendPassword+0xde>
    1b8e:	9c 83       	std	Y+4, r25	; 0x04
    1b90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	9e 81       	ldd	r25, Y+6	; 0x06
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	9e 83       	std	Y+6, r25	; 0x06
    1b9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    1ba0:	00 97       	sbiw	r24, 0x00	; 0
    1ba2:	69 f7       	brne	.-38     	; 0x1b7e <sendPassword+0xd2>
    1ba4:	14 c0       	rjmp	.+40     	; 0x1bce <sendPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba8:	78 85       	ldd	r23, Y+8	; 0x08
    1baa:	89 85       	ldd	r24, Y+9	; 0x09
    1bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9e 83       	std	Y+6, r25	; 0x06
    1bb8:	8d 83       	std	Y+5, r24	; 0x05
    1bba:	8d 81       	ldd	r24, Y+5	; 0x05
    1bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bbe:	9a 83       	std	Y+2, r25	; 0x02
    1bc0:	89 83       	std	Y+1, r24	; 0x01
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	f1 f7       	brne	.-4      	; 0x1bc6 <sendPassword+0x11a>
    1bca:	9a 83       	std	Y+2, r25	; 0x02
    1bcc:	89 83       	std	Y+1, r24	; 0x01
	{
		UART_sendByte (password[i]);
	}
	_delay_ms (130);
}
    1bce:	61 96       	adiw	r28, 0x11	; 17
    1bd0:	0f b6       	in	r0, 0x3f	; 63
    1bd2:	f8 94       	cli
    1bd4:	de bf       	out	0x3e, r29	; 62
    1bd6:	0f be       	out	0x3f, r0	; 63
    1bd8:	cd bf       	out	0x3d, r28	; 61
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <wait_seconds>:
void wait_seconds(void){
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1be8:	80 91 2e 01 	lds	r24, 0x012E
    1bec:	8f 5f       	subi	r24, 0xFF	; 255
    1bee:	80 93 2e 01 	sts	0x012E, r24
	if(g_tick==seconds)
    1bf2:	90 91 2e 01 	lds	r25, 0x012E
    1bf6:	80 91 2f 01 	lds	r24, 0x012F
    1bfa:	98 17       	cp	r25, r24
    1bfc:	11 f4       	brne	.+4      	; 0x1c02 <wait_seconds+0x22>
	{
		TIMER_DeInit();
    1bfe:	0e 94 92 19 	call	0x3324	; 0x3324 <TIMER_DeInit>
	}
}
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <GPIO_setupPinDirection+0x6>
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <GPIO_setupPinDirection+0x8>
    1c10:	0f 92       	push	r0
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	89 83       	std	Y+1, r24	; 0x01
    1c18:	6a 83       	std	Y+2, r22	; 0x02
    1c1a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	88 30       	cpi	r24, 0x08	; 8
    1c20:	08 f0       	brcs	.+2      	; 0x1c24 <GPIO_setupPinDirection+0x1c>
    1c22:	d5 c0       	rjmp	.+426    	; 0x1dce <GPIO_setupPinDirection+0x1c6>
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	84 30       	cpi	r24, 0x04	; 4
    1c28:	08 f0       	brcs	.+2      	; 0x1c2c <GPIO_setupPinDirection+0x24>
    1c2a:	d1 c0       	rjmp	.+418    	; 0x1dce <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	3d 83       	std	Y+5, r19	; 0x05
    1c34:	2c 83       	std	Y+4, r18	; 0x04
    1c36:	8c 81       	ldd	r24, Y+4	; 0x04
    1c38:	9d 81       	ldd	r25, Y+5	; 0x05
    1c3a:	81 30       	cpi	r24, 0x01	; 1
    1c3c:	91 05       	cpc	r25, r1
    1c3e:	09 f4       	brne	.+2      	; 0x1c42 <GPIO_setupPinDirection+0x3a>
    1c40:	43 c0       	rjmp	.+134    	; 0x1cc8 <GPIO_setupPinDirection+0xc0>
    1c42:	2c 81       	ldd	r18, Y+4	; 0x04
    1c44:	3d 81       	ldd	r19, Y+5	; 0x05
    1c46:	22 30       	cpi	r18, 0x02	; 2
    1c48:	31 05       	cpc	r19, r1
    1c4a:	2c f4       	brge	.+10     	; 0x1c56 <GPIO_setupPinDirection+0x4e>
    1c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	71 f0       	breq	.+28     	; 0x1c70 <GPIO_setupPinDirection+0x68>
    1c54:	bc c0       	rjmp	.+376    	; 0x1dce <GPIO_setupPinDirection+0x1c6>
    1c56:	2c 81       	ldd	r18, Y+4	; 0x04
    1c58:	3d 81       	ldd	r19, Y+5	; 0x05
    1c5a:	22 30       	cpi	r18, 0x02	; 2
    1c5c:	31 05       	cpc	r19, r1
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <GPIO_setupPinDirection+0x5a>
    1c60:	5f c0       	rjmp	.+190    	; 0x1d20 <GPIO_setupPinDirection+0x118>
    1c62:	8c 81       	ldd	r24, Y+4	; 0x04
    1c64:	9d 81       	ldd	r25, Y+5	; 0x05
    1c66:	83 30       	cpi	r24, 0x03	; 3
    1c68:	91 05       	cpc	r25, r1
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <GPIO_setupPinDirection+0x66>
    1c6c:	85 c0       	rjmp	.+266    	; 0x1d78 <GPIO_setupPinDirection+0x170>
    1c6e:	af c0       	rjmp	.+350    	; 0x1dce <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	a1 f4       	brne	.+40     	; 0x1c9e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1c76:	aa e3       	ldi	r26, 0x3A	; 58
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	ea e3       	ldi	r30, 0x3A	; 58
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	48 2f       	mov	r20, r24
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	02 2e       	mov	r0, r18
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <GPIO_setupPinDirection+0x8c>
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	0a 94       	dec	r0
    1c96:	e2 f7       	brpl	.-8      	; 0x1c90 <GPIO_setupPinDirection+0x88>
    1c98:	84 2b       	or	r24, r20
    1c9a:	8c 93       	st	X, r24
    1c9c:	98 c0       	rjmp	.+304    	; 0x1dce <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1c9e:	aa e3       	ldi	r26, 0x3A	; 58
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	ea e3       	ldi	r30, 0x3A	; 58
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	48 2f       	mov	r20, r24
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	02 2e       	mov	r0, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <GPIO_setupPinDirection+0xb4>
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	0a 94       	dec	r0
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <GPIO_setupPinDirection+0xb0>
    1cc0:	80 95       	com	r24
    1cc2:	84 23       	and	r24, r20
    1cc4:	8c 93       	st	X, r24
    1cc6:	83 c0       	rjmp	.+262    	; 0x1dce <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	a1 f4       	brne	.+40     	; 0x1cf6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1cce:	a7 e3       	ldi	r26, 0x37	; 55
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e7 e3       	ldi	r30, 0x37	; 55
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	48 2f       	mov	r20, r24
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	02 2e       	mov	r0, r18
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <GPIO_setupPinDirection+0xe4>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	0a 94       	dec	r0
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <GPIO_setupPinDirection+0xe0>
    1cf0:	84 2b       	or	r24, r20
    1cf2:	8c 93       	st	X, r24
    1cf4:	6c c0       	rjmp	.+216    	; 0x1dce <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1cf6:	a7 e3       	ldi	r26, 0x37	; 55
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e7 e3       	ldi	r30, 0x37	; 55
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <GPIO_setupPinDirection+0x10c>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <GPIO_setupPinDirection+0x108>
    1d18:	80 95       	com	r24
    1d1a:	84 23       	and	r24, r20
    1d1c:	8c 93       	st	X, r24
    1d1e:	57 c0       	rjmp	.+174    	; 0x1dce <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	a1 f4       	brne	.+40     	; 0x1d4e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1d26:	a4 e3       	ldi	r26, 0x34	; 52
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e4 e3       	ldi	r30, 0x34	; 52
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	48 2f       	mov	r20, r24
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	02 2e       	mov	r0, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <GPIO_setupPinDirection+0x13c>
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	0a 94       	dec	r0
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <GPIO_setupPinDirection+0x138>
    1d48:	84 2b       	or	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	40 c0       	rjmp	.+128    	; 0x1dce <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1d4e:	a4 e3       	ldi	r26, 0x34	; 52
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e4 e3       	ldi	r30, 0x34	; 52
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	02 2e       	mov	r0, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <GPIO_setupPinDirection+0x164>
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	0a 94       	dec	r0
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <GPIO_setupPinDirection+0x160>
    1d70:	80 95       	com	r24
    1d72:	84 23       	and	r24, r20
    1d74:	8c 93       	st	X, r24
    1d76:	2b c0       	rjmp	.+86     	; 0x1dce <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1d78:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7a:	81 30       	cpi	r24, 0x01	; 1
    1d7c:	a1 f4       	brne	.+40     	; 0x1da6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1d7e:	a1 e3       	ldi	r26, 0x31	; 49
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e1 e3       	ldi	r30, 0x31	; 49
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	48 2f       	mov	r20, r24
    1d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8c:	28 2f       	mov	r18, r24
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	02 2e       	mov	r0, r18
    1d96:	02 c0       	rjmp	.+4      	; 0x1d9c <GPIO_setupPinDirection+0x194>
    1d98:	88 0f       	add	r24, r24
    1d9a:	99 1f       	adc	r25, r25
    1d9c:	0a 94       	dec	r0
    1d9e:	e2 f7       	brpl	.-8      	; 0x1d98 <GPIO_setupPinDirection+0x190>
    1da0:	84 2b       	or	r24, r20
    1da2:	8c 93       	st	X, r24
    1da4:	14 c0       	rjmp	.+40     	; 0x1dce <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1da6:	a1 e3       	ldi	r26, 0x31	; 49
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e1 e3       	ldi	r30, 0x31	; 49
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	48 2f       	mov	r20, r24
    1db2:	8a 81       	ldd	r24, Y+2	; 0x02
    1db4:	28 2f       	mov	r18, r24
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	02 2e       	mov	r0, r18
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <GPIO_setupPinDirection+0x1bc>
    1dc0:	88 0f       	add	r24, r24
    1dc2:	99 1f       	adc	r25, r25
    1dc4:	0a 94       	dec	r0
    1dc6:	e2 f7       	brpl	.-8      	; 0x1dc0 <GPIO_setupPinDirection+0x1b8>
    1dc8:	80 95       	com	r24
    1dca:	84 23       	and	r24, r20
    1dcc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	08 95       	ret

00001dde <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	00 d0       	rcall	.+0      	; 0x1de4 <GPIO_writePin+0x6>
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <GPIO_writePin+0x8>
    1de6:	0f 92       	push	r0
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62
    1dec:	89 83       	std	Y+1, r24	; 0x01
    1dee:	6a 83       	std	Y+2, r22	; 0x02
    1df0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1df2:	8a 81       	ldd	r24, Y+2	; 0x02
    1df4:	88 30       	cpi	r24, 0x08	; 8
    1df6:	08 f0       	brcs	.+2      	; 0x1dfa <GPIO_writePin+0x1c>
    1df8:	d5 c0       	rjmp	.+426    	; 0x1fa4 <GPIO_writePin+0x1c6>
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	84 30       	cpi	r24, 0x04	; 4
    1dfe:	08 f0       	brcs	.+2      	; 0x1e02 <GPIO_writePin+0x24>
    1e00:	d1 c0       	rjmp	.+418    	; 0x1fa4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1e02:	89 81       	ldd	r24, Y+1	; 0x01
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	3d 83       	std	Y+5, r19	; 0x05
    1e0a:	2c 83       	std	Y+4, r18	; 0x04
    1e0c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e0e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e10:	81 30       	cpi	r24, 0x01	; 1
    1e12:	91 05       	cpc	r25, r1
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <GPIO_writePin+0x3a>
    1e16:	43 c0       	rjmp	.+134    	; 0x1e9e <GPIO_writePin+0xc0>
    1e18:	2c 81       	ldd	r18, Y+4	; 0x04
    1e1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e1c:	22 30       	cpi	r18, 0x02	; 2
    1e1e:	31 05       	cpc	r19, r1
    1e20:	2c f4       	brge	.+10     	; 0x1e2c <GPIO_writePin+0x4e>
    1e22:	8c 81       	ldd	r24, Y+4	; 0x04
    1e24:	9d 81       	ldd	r25, Y+5	; 0x05
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	71 f0       	breq	.+28     	; 0x1e46 <GPIO_writePin+0x68>
    1e2a:	bc c0       	rjmp	.+376    	; 0x1fa4 <GPIO_writePin+0x1c6>
    1e2c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e2e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e30:	22 30       	cpi	r18, 0x02	; 2
    1e32:	31 05       	cpc	r19, r1
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <GPIO_writePin+0x5a>
    1e36:	5f c0       	rjmp	.+190    	; 0x1ef6 <GPIO_writePin+0x118>
    1e38:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e3c:	83 30       	cpi	r24, 0x03	; 3
    1e3e:	91 05       	cpc	r25, r1
    1e40:	09 f4       	brne	.+2      	; 0x1e44 <GPIO_writePin+0x66>
    1e42:	85 c0       	rjmp	.+266    	; 0x1f4e <GPIO_writePin+0x170>
    1e44:	af c0       	rjmp	.+350    	; 0x1fa4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	a1 f4       	brne	.+40     	; 0x1e74 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1e4c:	ab e3       	ldi	r26, 0x3B	; 59
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	eb e3       	ldi	r30, 0x3B	; 59
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	48 2f       	mov	r20, r24
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	02 2e       	mov	r0, r18
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <GPIO_writePin+0x8c>
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	0a 94       	dec	r0
    1e6c:	e2 f7       	brpl	.-8      	; 0x1e66 <GPIO_writePin+0x88>
    1e6e:	84 2b       	or	r24, r20
    1e70:	8c 93       	st	X, r24
    1e72:	98 c0       	rjmp	.+304    	; 0x1fa4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1e74:	ab e3       	ldi	r26, 0x3B	; 59
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	eb e3       	ldi	r30, 0x3B	; 59
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	48 2f       	mov	r20, r24
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	02 2e       	mov	r0, r18
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <GPIO_writePin+0xb4>
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	0a 94       	dec	r0
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <GPIO_writePin+0xb0>
    1e96:	80 95       	com	r24
    1e98:	84 23       	and	r24, r20
    1e9a:	8c 93       	st	X, r24
    1e9c:	83 c0       	rjmp	.+262    	; 0x1fa4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	a1 f4       	brne	.+40     	; 0x1ecc <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1ea4:	a8 e3       	ldi	r26, 0x38	; 56
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e8 e3       	ldi	r30, 0x38	; 56
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	48 2f       	mov	r20, r24
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	02 2e       	mov	r0, r18
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <GPIO_writePin+0xe4>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	0a 94       	dec	r0
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <GPIO_writePin+0xe0>
    1ec6:	84 2b       	or	r24, r20
    1ec8:	8c 93       	st	X, r24
    1eca:	6c c0       	rjmp	.+216    	; 0x1fa4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1ecc:	a8 e3       	ldi	r26, 0x38	; 56
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e8 e3       	ldi	r30, 0x38	; 56
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	48 2f       	mov	r20, r24
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	02 2e       	mov	r0, r18
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <GPIO_writePin+0x10c>
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	0a 94       	dec	r0
    1eec:	e2 f7       	brpl	.-8      	; 0x1ee6 <GPIO_writePin+0x108>
    1eee:	80 95       	com	r24
    1ef0:	84 23       	and	r24, r20
    1ef2:	8c 93       	st	X, r24
    1ef4:	57 c0       	rjmp	.+174    	; 0x1fa4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	81 30       	cpi	r24, 0x01	; 1
    1efa:	a1 f4       	brne	.+40     	; 0x1f24 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1efc:	a5 e3       	ldi	r26, 0x35	; 53
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e5 e3       	ldi	r30, 0x35	; 53
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	48 2f       	mov	r20, r24
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	02 2e       	mov	r0, r18
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <GPIO_writePin+0x13c>
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	0a 94       	dec	r0
    1f1c:	e2 f7       	brpl	.-8      	; 0x1f16 <GPIO_writePin+0x138>
    1f1e:	84 2b       	or	r24, r20
    1f20:	8c 93       	st	X, r24
    1f22:	40 c0       	rjmp	.+128    	; 0x1fa4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1f24:	a5 e3       	ldi	r26, 0x35	; 53
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e5 e3       	ldi	r30, 0x35	; 53
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	48 2f       	mov	r20, r24
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	02 2e       	mov	r0, r18
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <GPIO_writePin+0x164>
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	0a 94       	dec	r0
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <GPIO_writePin+0x160>
    1f46:	80 95       	com	r24
    1f48:	84 23       	and	r24, r20
    1f4a:	8c 93       	st	X, r24
    1f4c:	2b c0       	rjmp	.+86     	; 0x1fa4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	81 30       	cpi	r24, 0x01	; 1
    1f52:	a1 f4       	brne	.+40     	; 0x1f7c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1f54:	a2 e3       	ldi	r26, 0x32	; 50
    1f56:	b0 e0       	ldi	r27, 0x00	; 0
    1f58:	e2 e3       	ldi	r30, 0x32	; 50
    1f5a:	f0 e0       	ldi	r31, 0x00	; 0
    1f5c:	80 81       	ld	r24, Z
    1f5e:	48 2f       	mov	r20, r24
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	28 2f       	mov	r18, r24
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	81 e0       	ldi	r24, 0x01	; 1
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	02 2e       	mov	r0, r18
    1f6c:	02 c0       	rjmp	.+4      	; 0x1f72 <GPIO_writePin+0x194>
    1f6e:	88 0f       	add	r24, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	0a 94       	dec	r0
    1f74:	e2 f7       	brpl	.-8      	; 0x1f6e <GPIO_writePin+0x190>
    1f76:	84 2b       	or	r24, r20
    1f78:	8c 93       	st	X, r24
    1f7a:	14 c0       	rjmp	.+40     	; 0x1fa4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1f7c:	a2 e3       	ldi	r26, 0x32	; 50
    1f7e:	b0 e0       	ldi	r27, 0x00	; 0
    1f80:	e2 e3       	ldi	r30, 0x32	; 50
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	80 81       	ld	r24, Z
    1f86:	48 2f       	mov	r20, r24
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	28 2f       	mov	r18, r24
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	02 2e       	mov	r0, r18
    1f94:	02 c0       	rjmp	.+4      	; 0x1f9a <GPIO_writePin+0x1bc>
    1f96:	88 0f       	add	r24, r24
    1f98:	99 1f       	adc	r25, r25
    1f9a:	0a 94       	dec	r0
    1f9c:	e2 f7       	brpl	.-8      	; 0x1f96 <GPIO_writePin+0x1b8>
    1f9e:	80 95       	com	r24
    1fa0:	84 23       	and	r24, r20
    1fa2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1fa4:	0f 90       	pop	r0
    1fa6:	0f 90       	pop	r0
    1fa8:	0f 90       	pop	r0
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1fb4:	df 93       	push	r29
    1fb6:	cf 93       	push	r28
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <GPIO_readPin+0x6>
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <GPIO_readPin+0x8>
    1fbc:	0f 92       	push	r0
    1fbe:	cd b7       	in	r28, 0x3d	; 61
    1fc0:	de b7       	in	r29, 0x3e	; 62
    1fc2:	8a 83       	std	Y+2, r24	; 0x02
    1fc4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1fc6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fca:	88 30       	cpi	r24, 0x08	; 8
    1fcc:	08 f0       	brcs	.+2      	; 0x1fd0 <GPIO_readPin+0x1c>
    1fce:	84 c0       	rjmp	.+264    	; 0x20d8 <GPIO_readPin+0x124>
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	84 30       	cpi	r24, 0x04	; 4
    1fd4:	08 f0       	brcs	.+2      	; 0x1fd8 <GPIO_readPin+0x24>
    1fd6:	80 c0       	rjmp	.+256    	; 0x20d8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	3d 83       	std	Y+5, r19	; 0x05
    1fe0:	2c 83       	std	Y+4, r18	; 0x04
    1fe2:	4c 81       	ldd	r20, Y+4	; 0x04
    1fe4:	5d 81       	ldd	r21, Y+5	; 0x05
    1fe6:	41 30       	cpi	r20, 0x01	; 1
    1fe8:	51 05       	cpc	r21, r1
    1fea:	79 f1       	breq	.+94     	; 0x204a <GPIO_readPin+0x96>
    1fec:	8c 81       	ldd	r24, Y+4	; 0x04
    1fee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff0:	82 30       	cpi	r24, 0x02	; 2
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	34 f4       	brge	.+12     	; 0x2002 <GPIO_readPin+0x4e>
    1ff6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff8:	3d 81       	ldd	r19, Y+5	; 0x05
    1ffa:	21 15       	cp	r18, r1
    1ffc:	31 05       	cpc	r19, r1
    1ffe:	69 f0       	breq	.+26     	; 0x201a <GPIO_readPin+0x66>
    2000:	6b c0       	rjmp	.+214    	; 0x20d8 <GPIO_readPin+0x124>
    2002:	4c 81       	ldd	r20, Y+4	; 0x04
    2004:	5d 81       	ldd	r21, Y+5	; 0x05
    2006:	42 30       	cpi	r20, 0x02	; 2
    2008:	51 05       	cpc	r21, r1
    200a:	b9 f1       	breq	.+110    	; 0x207a <GPIO_readPin+0xc6>
    200c:	8c 81       	ldd	r24, Y+4	; 0x04
    200e:	9d 81       	ldd	r25, Y+5	; 0x05
    2010:	83 30       	cpi	r24, 0x03	; 3
    2012:	91 05       	cpc	r25, r1
    2014:	09 f4       	brne	.+2      	; 0x2018 <GPIO_readPin+0x64>
    2016:	49 c0       	rjmp	.+146    	; 0x20aa <GPIO_readPin+0xf6>
    2018:	5f c0       	rjmp	.+190    	; 0x20d8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    201a:	e9 e3       	ldi	r30, 0x39	; 57
    201c:	f0 e0       	ldi	r31, 0x00	; 0
    201e:	80 81       	ld	r24, Z
    2020:	28 2f       	mov	r18, r24
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	88 2f       	mov	r24, r24
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a9 01       	movw	r20, r18
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <GPIO_readPin+0x7e>
    202e:	55 95       	asr	r21
    2030:	47 95       	ror	r20
    2032:	8a 95       	dec	r24
    2034:	e2 f7       	brpl	.-8      	; 0x202e <GPIO_readPin+0x7a>
    2036:	ca 01       	movw	r24, r20
    2038:	81 70       	andi	r24, 0x01	; 1
    203a:	90 70       	andi	r25, 0x00	; 0
    203c:	88 23       	and	r24, r24
    203e:	19 f0       	breq	.+6      	; 0x2046 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	89 83       	std	Y+1, r24	; 0x01
    2044:	49 c0       	rjmp	.+146    	; 0x20d8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2046:	19 82       	std	Y+1, r1	; 0x01
    2048:	47 c0       	rjmp	.+142    	; 0x20d8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    204a:	e6 e3       	ldi	r30, 0x36	; 54
    204c:	f0 e0       	ldi	r31, 0x00	; 0
    204e:	80 81       	ld	r24, Z
    2050:	28 2f       	mov	r18, r24
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	88 2f       	mov	r24, r24
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	a9 01       	movw	r20, r18
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <GPIO_readPin+0xae>
    205e:	55 95       	asr	r21
    2060:	47 95       	ror	r20
    2062:	8a 95       	dec	r24
    2064:	e2 f7       	brpl	.-8      	; 0x205e <GPIO_readPin+0xaa>
    2066:	ca 01       	movw	r24, r20
    2068:	81 70       	andi	r24, 0x01	; 1
    206a:	90 70       	andi	r25, 0x00	; 0
    206c:	88 23       	and	r24, r24
    206e:	19 f0       	breq	.+6      	; 0x2076 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	89 83       	std	Y+1, r24	; 0x01
    2074:	31 c0       	rjmp	.+98     	; 0x20d8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2076:	19 82       	std	Y+1, r1	; 0x01
    2078:	2f c0       	rjmp	.+94     	; 0x20d8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    207a:	e3 e3       	ldi	r30, 0x33	; 51
    207c:	f0 e0       	ldi	r31, 0x00	; 0
    207e:	80 81       	ld	r24, Z
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	88 2f       	mov	r24, r24
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	a9 01       	movw	r20, r18
    208c:	02 c0       	rjmp	.+4      	; 0x2092 <GPIO_readPin+0xde>
    208e:	55 95       	asr	r21
    2090:	47 95       	ror	r20
    2092:	8a 95       	dec	r24
    2094:	e2 f7       	brpl	.-8      	; 0x208e <GPIO_readPin+0xda>
    2096:	ca 01       	movw	r24, r20
    2098:	81 70       	andi	r24, 0x01	; 1
    209a:	90 70       	andi	r25, 0x00	; 0
    209c:	88 23       	and	r24, r24
    209e:	19 f0       	breq	.+6      	; 0x20a6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	89 83       	std	Y+1, r24	; 0x01
    20a4:	19 c0       	rjmp	.+50     	; 0x20d8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20a6:	19 82       	std	Y+1, r1	; 0x01
    20a8:	17 c0       	rjmp	.+46     	; 0x20d8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    20aa:	e0 e3       	ldi	r30, 0x30	; 48
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	80 81       	ld	r24, Z
    20b0:	28 2f       	mov	r18, r24
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	88 2f       	mov	r24, r24
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	a9 01       	movw	r20, r18
    20bc:	02 c0       	rjmp	.+4      	; 0x20c2 <GPIO_readPin+0x10e>
    20be:	55 95       	asr	r21
    20c0:	47 95       	ror	r20
    20c2:	8a 95       	dec	r24
    20c4:	e2 f7       	brpl	.-8      	; 0x20be <GPIO_readPin+0x10a>
    20c6:	ca 01       	movw	r24, r20
    20c8:	81 70       	andi	r24, 0x01	; 1
    20ca:	90 70       	andi	r25, 0x00	; 0
    20cc:	88 23       	and	r24, r24
    20ce:	19 f0       	breq	.+6      	; 0x20d6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	89 83       	std	Y+1, r24	; 0x01
    20d4:	01 c0       	rjmp	.+2      	; 0x20d8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20d6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    20da:	0f 90       	pop	r0
    20dc:	0f 90       	pop	r0
    20de:	0f 90       	pop	r0
    20e0:	0f 90       	pop	r0
    20e2:	0f 90       	pop	r0
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	08 95       	ret

000020ea <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    20ea:	df 93       	push	r29
    20ec:	cf 93       	push	r28
    20ee:	00 d0       	rcall	.+0      	; 0x20f0 <GPIO_setupPortDirection+0x6>
    20f0:	00 d0       	rcall	.+0      	; 0x20f2 <GPIO_setupPortDirection+0x8>
    20f2:	cd b7       	in	r28, 0x3d	; 61
    20f4:	de b7       	in	r29, 0x3e	; 62
    20f6:	89 83       	std	Y+1, r24	; 0x01
    20f8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	84 30       	cpi	r24, 0x04	; 4
    20fe:	90 f5       	brcc	.+100    	; 0x2164 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	28 2f       	mov	r18, r24
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	3c 83       	std	Y+4, r19	; 0x04
    2108:	2b 83       	std	Y+3, r18	; 0x03
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	81 30       	cpi	r24, 0x01	; 1
    2110:	91 05       	cpc	r25, r1
    2112:	d1 f0       	breq	.+52     	; 0x2148 <GPIO_setupPortDirection+0x5e>
    2114:	2b 81       	ldd	r18, Y+3	; 0x03
    2116:	3c 81       	ldd	r19, Y+4	; 0x04
    2118:	22 30       	cpi	r18, 0x02	; 2
    211a:	31 05       	cpc	r19, r1
    211c:	2c f4       	brge	.+10     	; 0x2128 <GPIO_setupPortDirection+0x3e>
    211e:	8b 81       	ldd	r24, Y+3	; 0x03
    2120:	9c 81       	ldd	r25, Y+4	; 0x04
    2122:	00 97       	sbiw	r24, 0x00	; 0
    2124:	61 f0       	breq	.+24     	; 0x213e <GPIO_setupPortDirection+0x54>
    2126:	1e c0       	rjmp	.+60     	; 0x2164 <GPIO_setupPortDirection+0x7a>
    2128:	2b 81       	ldd	r18, Y+3	; 0x03
    212a:	3c 81       	ldd	r19, Y+4	; 0x04
    212c:	22 30       	cpi	r18, 0x02	; 2
    212e:	31 05       	cpc	r19, r1
    2130:	81 f0       	breq	.+32     	; 0x2152 <GPIO_setupPortDirection+0x68>
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	9c 81       	ldd	r25, Y+4	; 0x04
    2136:	83 30       	cpi	r24, 0x03	; 3
    2138:	91 05       	cpc	r25, r1
    213a:	81 f0       	breq	.+32     	; 0x215c <GPIO_setupPortDirection+0x72>
    213c:	13 c0       	rjmp	.+38     	; 0x2164 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    213e:	ea e3       	ldi	r30, 0x3A	; 58
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	80 83       	st	Z, r24
    2146:	0e c0       	rjmp	.+28     	; 0x2164 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2148:	e7 e3       	ldi	r30, 0x37	; 55
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	8a 81       	ldd	r24, Y+2	; 0x02
    214e:	80 83       	st	Z, r24
    2150:	09 c0       	rjmp	.+18     	; 0x2164 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2152:	e4 e3       	ldi	r30, 0x34	; 52
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	80 83       	st	Z, r24
    215a:	04 c0       	rjmp	.+8      	; 0x2164 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    215c:	e1 e3       	ldi	r30, 0x31	; 49
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	80 83       	st	Z, r24
			break;
		}
	}
}
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	0f 90       	pop	r0
    216c:	cf 91       	pop	r28
    216e:	df 91       	pop	r29
    2170:	08 95       	ret

00002172 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	00 d0       	rcall	.+0      	; 0x2178 <GPIO_writePort+0x6>
    2178:	00 d0       	rcall	.+0      	; 0x217a <GPIO_writePort+0x8>
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	89 83       	std	Y+1, r24	; 0x01
    2180:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2182:	89 81       	ldd	r24, Y+1	; 0x01
    2184:	84 30       	cpi	r24, 0x04	; 4
    2186:	90 f5       	brcc	.+100    	; 0x21ec <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	3c 83       	std	Y+4, r19	; 0x04
    2190:	2b 83       	std	Y+3, r18	; 0x03
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	81 30       	cpi	r24, 0x01	; 1
    2198:	91 05       	cpc	r25, r1
    219a:	d1 f0       	breq	.+52     	; 0x21d0 <GPIO_writePort+0x5e>
    219c:	2b 81       	ldd	r18, Y+3	; 0x03
    219e:	3c 81       	ldd	r19, Y+4	; 0x04
    21a0:	22 30       	cpi	r18, 0x02	; 2
    21a2:	31 05       	cpc	r19, r1
    21a4:	2c f4       	brge	.+10     	; 0x21b0 <GPIO_writePort+0x3e>
    21a6:	8b 81       	ldd	r24, Y+3	; 0x03
    21a8:	9c 81       	ldd	r25, Y+4	; 0x04
    21aa:	00 97       	sbiw	r24, 0x00	; 0
    21ac:	61 f0       	breq	.+24     	; 0x21c6 <GPIO_writePort+0x54>
    21ae:	1e c0       	rjmp	.+60     	; 0x21ec <GPIO_writePort+0x7a>
    21b0:	2b 81       	ldd	r18, Y+3	; 0x03
    21b2:	3c 81       	ldd	r19, Y+4	; 0x04
    21b4:	22 30       	cpi	r18, 0x02	; 2
    21b6:	31 05       	cpc	r19, r1
    21b8:	81 f0       	breq	.+32     	; 0x21da <GPIO_writePort+0x68>
    21ba:	8b 81       	ldd	r24, Y+3	; 0x03
    21bc:	9c 81       	ldd	r25, Y+4	; 0x04
    21be:	83 30       	cpi	r24, 0x03	; 3
    21c0:	91 05       	cpc	r25, r1
    21c2:	81 f0       	breq	.+32     	; 0x21e4 <GPIO_writePort+0x72>
    21c4:	13 c0       	rjmp	.+38     	; 0x21ec <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    21c6:	eb e3       	ldi	r30, 0x3B	; 59
    21c8:	f0 e0       	ldi	r31, 0x00	; 0
    21ca:	8a 81       	ldd	r24, Y+2	; 0x02
    21cc:	80 83       	st	Z, r24
    21ce:	0e c0       	rjmp	.+28     	; 0x21ec <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    21d0:	e8 e3       	ldi	r30, 0x38	; 56
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	80 83       	st	Z, r24
    21d8:	09 c0       	rjmp	.+18     	; 0x21ec <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    21da:	e5 e3       	ldi	r30, 0x35	; 53
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	80 83       	st	Z, r24
    21e2:	04 c0       	rjmp	.+8      	; 0x21ec <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    21e4:	e2 e3       	ldi	r30, 0x32	; 50
    21e6:	f0 e0       	ldi	r31, 0x00	; 0
    21e8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ea:	80 83       	st	Z, r24
			break;
		}
	}
}
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	cf 91       	pop	r28
    21f6:	df 91       	pop	r29
    21f8:	08 95       	ret

000021fa <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	00 d0       	rcall	.+0      	; 0x2200 <GPIO_readPort+0x6>
    2200:	00 d0       	rcall	.+0      	; 0x2202 <GPIO_readPort+0x8>
    2202:	cd b7       	in	r28, 0x3d	; 61
    2204:	de b7       	in	r29, 0x3e	; 62
    2206:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2208:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	84 30       	cpi	r24, 0x04	; 4
    220e:	90 f5       	brcc	.+100    	; 0x2274 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	3c 83       	std	Y+4, r19	; 0x04
    2218:	2b 83       	std	Y+3, r18	; 0x03
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	9c 81       	ldd	r25, Y+4	; 0x04
    221e:	81 30       	cpi	r24, 0x01	; 1
    2220:	91 05       	cpc	r25, r1
    2222:	d1 f0       	breq	.+52     	; 0x2258 <GPIO_readPort+0x5e>
    2224:	2b 81       	ldd	r18, Y+3	; 0x03
    2226:	3c 81       	ldd	r19, Y+4	; 0x04
    2228:	22 30       	cpi	r18, 0x02	; 2
    222a:	31 05       	cpc	r19, r1
    222c:	2c f4       	brge	.+10     	; 0x2238 <GPIO_readPort+0x3e>
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	9c 81       	ldd	r25, Y+4	; 0x04
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	61 f0       	breq	.+24     	; 0x224e <GPIO_readPort+0x54>
    2236:	1e c0       	rjmp	.+60     	; 0x2274 <GPIO_readPort+0x7a>
    2238:	2b 81       	ldd	r18, Y+3	; 0x03
    223a:	3c 81       	ldd	r19, Y+4	; 0x04
    223c:	22 30       	cpi	r18, 0x02	; 2
    223e:	31 05       	cpc	r19, r1
    2240:	81 f0       	breq	.+32     	; 0x2262 <GPIO_readPort+0x68>
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	9c 81       	ldd	r25, Y+4	; 0x04
    2246:	83 30       	cpi	r24, 0x03	; 3
    2248:	91 05       	cpc	r25, r1
    224a:	81 f0       	breq	.+32     	; 0x226c <GPIO_readPort+0x72>
    224c:	13 c0       	rjmp	.+38     	; 0x2274 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    224e:	e9 e3       	ldi	r30, 0x39	; 57
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	89 83       	std	Y+1, r24	; 0x01
    2256:	0e c0       	rjmp	.+28     	; 0x2274 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2258:	e6 e3       	ldi	r30, 0x36	; 54
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	89 83       	std	Y+1, r24	; 0x01
    2260:	09 c0       	rjmp	.+18     	; 0x2274 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2262:	e3 e3       	ldi	r30, 0x33	; 51
    2264:	f0 e0       	ldi	r31, 0x00	; 0
    2266:	80 81       	ld	r24, Z
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	04 c0       	rjmp	.+8      	; 0x2274 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    226c:	e0 e3       	ldi	r30, 0x30	; 48
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2274:	89 81       	ldd	r24, Y+1	; 0x01
}
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	00 d0       	rcall	.+0      	; 0x228a <KEYPAD_getPressedKey+0x6>
    228a:	0f 92       	push	r0
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2290:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2292:	1b 82       	std	Y+3, r1	; 0x03
    2294:	43 c0       	rjmp	.+134    	; 0x231c <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2296:	82 e0       	ldi	r24, 0x02	; 2
    2298:	60 e0       	ldi	r22, 0x00	; 0
    229a:	0e 94 75 10 	call	0x20ea	; 0x20ea <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col,PIN_OUTPUT);
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	98 2f       	mov	r25, r24
    22a2:	9c 5f       	subi	r25, 0xFC	; 252
    22a4:	82 e0       	ldi	r24, 0x02	; 2
    22a6:	69 2f       	mov	r22, r25
    22a8:	41 e0       	ldi	r20, 0x01	; 1
    22aa:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COL_PIN_ID+col));
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	88 2f       	mov	r24, r24
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	9c 01       	movw	r18, r24
    22b6:	2c 5f       	subi	r18, 0xFC	; 252
    22b8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	02 c0       	rjmp	.+4      	; 0x22c4 <KEYPAD_getPressedKey+0x40>
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	2a 95       	dec	r18
    22c6:	e2 f7       	brpl	.-8      	; 0x22c0 <KEYPAD_getPressedKey+0x3c>
    22c8:	80 95       	com	r24
    22ca:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    22cc:	82 e0       	ldi	r24, 0x02	; 2
    22ce:	69 81       	ldd	r22, Y+1	; 0x01
    22d0:	0e 94 b9 10 	call	0x2172	; 0x2172 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    22d4:	1a 82       	std	Y+2, r1	; 0x02
    22d6:	1c c0       	rjmp	.+56     	; 0x2310 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    22d8:	82 e0       	ldi	r24, 0x02	; 2
    22da:	6a 81       	ldd	r22, Y+2	; 0x02
    22dc:	0e 94 da 0f 	call	0x1fb4	; 0x1fb4 <GPIO_readPin>
    22e0:	88 23       	and	r24, r24
    22e2:	99 f4       	brne	.+38     	; 0x230a <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	88 2f       	mov	r24, r24
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	88 0f       	add	r24, r24
    22ec:	99 1f       	adc	r25, r25
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	98 2f       	mov	r25, r24
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	89 0f       	add	r24, r25
    22f8:	8f 5f       	subi	r24, 0xFF	; 255
    22fa:	0e 94 93 11 	call	0x2326	; 0x2326 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    22fe:	0f 90       	pop	r0
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	8f 5f       	subi	r24, 0xFF	; 255
    230e:	8a 83       	std	Y+2, r24	; 0x02
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	84 30       	cpi	r24, 0x04	; 4
    2314:	08 f3       	brcs	.-62     	; 0x22d8 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2316:	8b 81       	ldd	r24, Y+3	; 0x03
    2318:	8f 5f       	subi	r24, 0xFF	; 255
    231a:	8b 83       	std	Y+3, r24	; 0x03
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	84 30       	cpi	r24, 0x04	; 4
    2320:	08 f4       	brcc	.+2      	; 0x2324 <KEYPAD_getPressedKey+0xa0>
    2322:	b9 cf       	rjmp	.-142    	; 0x2296 <KEYPAD_getPressedKey+0x12>
    2324:	b6 cf       	rjmp	.-148    	; 0x2292 <KEYPAD_getPressedKey+0xe>

00002326 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	00 d0       	rcall	.+0      	; 0x232c <KEYPAD_4x4_adjustKeyNumber+0x6>
    232c:	00 d0       	rcall	.+0      	; 0x232e <KEYPAD_4x4_adjustKeyNumber+0x8>
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2334:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	3c 83       	std	Y+4, r19	; 0x04
    233e:	2b 83       	std	Y+3, r18	; 0x03
    2340:	8b 81       	ldd	r24, Y+3	; 0x03
    2342:	9c 81       	ldd	r25, Y+4	; 0x04
    2344:	88 30       	cpi	r24, 0x08	; 8
    2346:	91 05       	cpc	r25, r1
    2348:	09 f4       	brne	.+2      	; 0x234c <KEYPAD_4x4_adjustKeyNumber+0x26>
    234a:	70 c0       	rjmp	.+224    	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x106>
    234c:	2b 81       	ldd	r18, Y+3	; 0x03
    234e:	3c 81       	ldd	r19, Y+4	; 0x04
    2350:	29 30       	cpi	r18, 0x09	; 9
    2352:	31 05       	cpc	r19, r1
    2354:	5c f5       	brge	.+86     	; 0x23ac <KEYPAD_4x4_adjustKeyNumber+0x86>
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	9c 81       	ldd	r25, Y+4	; 0x04
    235a:	84 30       	cpi	r24, 0x04	; 4
    235c:	91 05       	cpc	r25, r1
    235e:	09 f4       	brne	.+2      	; 0x2362 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2360:	59 c0       	rjmp	.+178    	; 0x2414 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2362:	2b 81       	ldd	r18, Y+3	; 0x03
    2364:	3c 81       	ldd	r19, Y+4	; 0x04
    2366:	25 30       	cpi	r18, 0x05	; 5
    2368:	31 05       	cpc	r19, r1
    236a:	9c f4       	brge	.+38     	; 0x2392 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    236c:	8b 81       	ldd	r24, Y+3	; 0x03
    236e:	9c 81       	ldd	r25, Y+4	; 0x04
    2370:	82 30       	cpi	r24, 0x02	; 2
    2372:	91 05       	cpc	r25, r1
    2374:	09 f4       	brne	.+2      	; 0x2378 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2376:	48 c0       	rjmp	.+144    	; 0x2408 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2378:	2b 81       	ldd	r18, Y+3	; 0x03
    237a:	3c 81       	ldd	r19, Y+4	; 0x04
    237c:	23 30       	cpi	r18, 0x03	; 3
    237e:	31 05       	cpc	r19, r1
    2380:	0c f0       	brlt	.+2      	; 0x2384 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2382:	45 c0       	rjmp	.+138    	; 0x240e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	9c 81       	ldd	r25, Y+4	; 0x04
    2388:	81 30       	cpi	r24, 0x01	; 1
    238a:	91 05       	cpc	r25, r1
    238c:	09 f4       	brne	.+2      	; 0x2390 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    238e:	39 c0       	rjmp	.+114    	; 0x2402 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2390:	67 c0       	rjmp	.+206    	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2392:	2b 81       	ldd	r18, Y+3	; 0x03
    2394:	3c 81       	ldd	r19, Y+4	; 0x04
    2396:	26 30       	cpi	r18, 0x06	; 6
    2398:	31 05       	cpc	r19, r1
    239a:	09 f4       	brne	.+2      	; 0x239e <KEYPAD_4x4_adjustKeyNumber+0x78>
    239c:	41 c0       	rjmp	.+130    	; 0x2420 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	9c 81       	ldd	r25, Y+4	; 0x04
    23a2:	87 30       	cpi	r24, 0x07	; 7
    23a4:	91 05       	cpc	r25, r1
    23a6:	0c f0       	brlt	.+2      	; 0x23aa <KEYPAD_4x4_adjustKeyNumber+0x84>
    23a8:	3e c0       	rjmp	.+124    	; 0x2426 <KEYPAD_4x4_adjustKeyNumber+0x100>
    23aa:	37 c0       	rjmp	.+110    	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    23ac:	2b 81       	ldd	r18, Y+3	; 0x03
    23ae:	3c 81       	ldd	r19, Y+4	; 0x04
    23b0:	2c 30       	cpi	r18, 0x0C	; 12
    23b2:	31 05       	cpc	r19, r1
    23b4:	09 f4       	brne	.+2      	; 0x23b8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    23b6:	46 c0       	rjmp	.+140    	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	9c 81       	ldd	r25, Y+4	; 0x04
    23bc:	8d 30       	cpi	r24, 0x0D	; 13
    23be:	91 05       	cpc	r25, r1
    23c0:	5c f4       	brge	.+22     	; 0x23d8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    23c2:	2b 81       	ldd	r18, Y+3	; 0x03
    23c4:	3c 81       	ldd	r19, Y+4	; 0x04
    23c6:	2a 30       	cpi	r18, 0x0A	; 10
    23c8:	31 05       	cpc	r19, r1
    23ca:	b1 f1       	breq	.+108    	; 0x2438 <KEYPAD_4x4_adjustKeyNumber+0x112>
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	9c 81       	ldd	r25, Y+4	; 0x04
    23d0:	8b 30       	cpi	r24, 0x0B	; 11
    23d2:	91 05       	cpc	r25, r1
    23d4:	a4 f5       	brge	.+104    	; 0x243e <KEYPAD_4x4_adjustKeyNumber+0x118>
    23d6:	2d c0       	rjmp	.+90     	; 0x2432 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    23d8:	2b 81       	ldd	r18, Y+3	; 0x03
    23da:	3c 81       	ldd	r19, Y+4	; 0x04
    23dc:	2e 30       	cpi	r18, 0x0E	; 14
    23de:	31 05       	cpc	r19, r1
    23e0:	b9 f1       	breq	.+110    	; 0x2450 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	9c 81       	ldd	r25, Y+4	; 0x04
    23e6:	8e 30       	cpi	r24, 0x0E	; 14
    23e8:	91 05       	cpc	r25, r1
    23ea:	7c f1       	brlt	.+94     	; 0x244a <KEYPAD_4x4_adjustKeyNumber+0x124>
    23ec:	2b 81       	ldd	r18, Y+3	; 0x03
    23ee:	3c 81       	ldd	r19, Y+4	; 0x04
    23f0:	2f 30       	cpi	r18, 0x0F	; 15
    23f2:	31 05       	cpc	r19, r1
    23f4:	79 f1       	breq	.+94     	; 0x2454 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    23f6:	8b 81       	ldd	r24, Y+3	; 0x03
    23f8:	9c 81       	ldd	r25, Y+4	; 0x04
    23fa:	80 31       	cpi	r24, 0x10	; 16
    23fc:	91 05       	cpc	r25, r1
    23fe:	69 f1       	breq	.+90     	; 0x245a <KEYPAD_4x4_adjustKeyNumber+0x134>
    2400:	2f c0       	rjmp	.+94     	; 0x2460 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2402:	87 e0       	ldi	r24, 0x07	; 7
    2404:	89 83       	std	Y+1, r24	; 0x01
    2406:	2e c0       	rjmp	.+92     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2408:	88 e0       	ldi	r24, 0x08	; 8
    240a:	89 83       	std	Y+1, r24	; 0x01
    240c:	2b c0       	rjmp	.+86     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    240e:	89 e0       	ldi	r24, 0x09	; 9
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	28 c0       	rjmp	.+80     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2414:	85 e2       	ldi	r24, 0x25	; 37
    2416:	89 83       	std	Y+1, r24	; 0x01
    2418:	25 c0       	rjmp	.+74     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    241a:	84 e0       	ldi	r24, 0x04	; 4
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	22 c0       	rjmp	.+68     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2420:	85 e0       	ldi	r24, 0x05	; 5
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	1f c0       	rjmp	.+62     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2426:	86 e0       	ldi	r24, 0x06	; 6
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	1c c0       	rjmp	.+56     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    242c:	8a e2       	ldi	r24, 0x2A	; 42
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	19 c0       	rjmp	.+50     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	16 c0       	rjmp	.+44     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2438:	82 e0       	ldi	r24, 0x02	; 2
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	13 c0       	rjmp	.+38     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    243e:	83 e0       	ldi	r24, 0x03	; 3
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	10 c0       	rjmp	.+32     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2444:	8d e2       	ldi	r24, 0x2D	; 45
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	0d c0       	rjmp	.+26     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    244a:	8d e0       	ldi	r24, 0x0D	; 13
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	0a c0       	rjmp	.+20     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    2450:	19 82       	std	Y+1, r1	; 0x01
    2452:	08 c0       	rjmp	.+16     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2454:	8d e3       	ldi	r24, 0x3D	; 61
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	05 c0       	rjmp	.+10     	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    245a:	8b e2       	ldi	r24, 0x2B	; 43
    245c:	89 83       	std	Y+1, r24	; 0x01
    245e:	02 c0       	rjmp	.+4      	; 0x2464 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2464:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	2e 97       	sbiw	r28, 0x0e	; 14
    247e:	0f b6       	in	r0, 0x3f	; 63
    2480:	f8 94       	cli
    2482:	de bf       	out	0x3e, r29	; 62
    2484:	0f be       	out	0x3f, r0	; 63
    2486:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS, RW and  E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	60 e0       	ldi	r22, 0x00	; 0
    248c:	41 e0       	ldi	r20, 0x01	; 1
    248e:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	41 e0       	ldi	r20, 0x01	; 1
    2498:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	62 e0       	ldi	r22, 0x02	; 2
    24a0:	41 e0       	ldi	r20, 0x01	; 1
    24a2:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <GPIO_setupPinDirection>
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	a0 ea       	ldi	r26, 0xA0	; 160
    24ac:	b1 e4       	ldi	r27, 0x41	; 65
    24ae:	8b 87       	std	Y+11, r24	; 0x0b
    24b0:	9c 87       	std	Y+12, r25	; 0x0c
    24b2:	ad 87       	std	Y+13, r26	; 0x0d
    24b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    24b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    24bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	4a ef       	ldi	r20, 0xFA	; 250
    24c4:	54 e4       	ldi	r21, 0x44	; 68
    24c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	8f 83       	std	Y+7, r24	; 0x07
    24d0:	98 87       	std	Y+8, r25	; 0x08
    24d2:	a9 87       	std	Y+9, r26	; 0x09
    24d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24d6:	6f 81       	ldd	r22, Y+7	; 0x07
    24d8:	78 85       	ldd	r23, Y+8	; 0x08
    24da:	89 85       	ldd	r24, Y+9	; 0x09
    24dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	2c f4       	brge	.+10     	; 0x24f8 <LCD_init+0x84>
		__ticks = 1;
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9e 83       	std	Y+6, r25	; 0x06
    24f4:	8d 83       	std	Y+5, r24	; 0x05
    24f6:	3f c0       	rjmp	.+126    	; 0x2576 <LCD_init+0x102>
	else if (__tmp > 65535)
    24f8:	6f 81       	ldd	r22, Y+7	; 0x07
    24fa:	78 85       	ldd	r23, Y+8	; 0x08
    24fc:	89 85       	ldd	r24, Y+9	; 0x09
    24fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2500:	20 e0       	ldi	r18, 0x00	; 0
    2502:	3f ef       	ldi	r19, 0xFF	; 255
    2504:	4f e7       	ldi	r20, 0x7F	; 127
    2506:	57 e4       	ldi	r21, 0x47	; 71
    2508:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    250c:	18 16       	cp	r1, r24
    250e:	4c f5       	brge	.+82     	; 0x2562 <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2510:	6b 85       	ldd	r22, Y+11	; 0x0b
    2512:	7c 85       	ldd	r23, Y+12	; 0x0c
    2514:	8d 85       	ldd	r24, Y+13	; 0x0d
    2516:	9e 85       	ldd	r25, Y+14	; 0x0e
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	40 e2       	ldi	r20, 0x20	; 32
    251e:	51 e4       	ldi	r21, 0x41	; 65
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	bc 01       	movw	r22, r24
    252a:	cd 01       	movw	r24, r26
    252c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2530:	dc 01       	movw	r26, r24
    2532:	cb 01       	movw	r24, r22
    2534:	9e 83       	std	Y+6, r25	; 0x06
    2536:	8d 83       	std	Y+5, r24	; 0x05
    2538:	0f c0       	rjmp	.+30     	; 0x2558 <LCD_init+0xe4>
    253a:	88 ec       	ldi	r24, 0xC8	; 200
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9c 83       	std	Y+4, r25	; 0x04
    2540:	8b 83       	std	Y+3, r24	; 0x03
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	9c 81       	ldd	r25, Y+4	; 0x04
    2546:	01 97       	sbiw	r24, 0x01	; 1
    2548:	f1 f7       	brne	.-4      	; 0x2546 <LCD_init+0xd2>
    254a:	9c 83       	std	Y+4, r25	; 0x04
    254c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    254e:	8d 81       	ldd	r24, Y+5	; 0x05
    2550:	9e 81       	ldd	r25, Y+6	; 0x06
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	9e 83       	std	Y+6, r25	; 0x06
    2556:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2558:	8d 81       	ldd	r24, Y+5	; 0x05
    255a:	9e 81       	ldd	r25, Y+6	; 0x06
    255c:	00 97       	sbiw	r24, 0x00	; 0
    255e:	69 f7       	brne	.-38     	; 0x253a <LCD_init+0xc6>
    2560:	14 c0       	rjmp	.+40     	; 0x258a <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2562:	6f 81       	ldd	r22, Y+7	; 0x07
    2564:	78 85       	ldd	r23, Y+8	; 0x08
    2566:	89 85       	ldd	r24, Y+9	; 0x09
    2568:	9a 85       	ldd	r25, Y+10	; 0x0a
    256a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	9e 83       	std	Y+6, r25	; 0x06
    2574:	8d 83       	std	Y+5, r24	; 0x05
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	9e 81       	ldd	r25, Y+6	; 0x06
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	89 83       	std	Y+1, r24	; 0x01
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	9a 81       	ldd	r25, Y+2	; 0x02
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	f1 f7       	brne	.-4      	; 0x2582 <LCD_init+0x10e>
    2586:	9a 83       	std	Y+2, r25	; 0x02
    2588:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    258a:	80 e0       	ldi	r24, 0x00	; 0
    258c:	6f ef       	ldi	r22, 0xFF	; 255
    258e:	0e 94 75 10 	call	0x20ea	; 0x20ea <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2592:	88 e3       	ldi	r24, 0x38	; 56
    2594:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2598:	8c e0       	ldi	r24, 0x0C	; 12
    259a:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_sendCommand>
}
    25a4:	2e 96       	adiw	r28, 0x0e	; 14
    25a6:	0f b6       	in	r0, 0x3f	; 63
    25a8:	f8 94       	cli
    25aa:	de bf       	out	0x3e, r29	; 62
    25ac:	0f be       	out	0x3f, r0	; 63
    25ae:	cd bf       	out	0x3d, r28	; 61
    25b0:	cf 91       	pop	r28
    25b2:	df 91       	pop	r29
    25b4:	08 95       	ret

000025b6 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    25b6:	df 93       	push	r29
    25b8:	cf 93       	push	r28
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	e9 97       	sbiw	r28, 0x39	; 57
    25c0:	0f b6       	in	r0, 0x3f	; 63
    25c2:	f8 94       	cli
    25c4:	de bf       	out	0x3e, r29	; 62
    25c6:	0f be       	out	0x3f, r0	; 63
    25c8:	cd bf       	out	0x3d, r28	; 61
    25ca:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	60 e0       	ldi	r22, 0x00	; 0
    25d0:	40 e0       	ldi	r20, 0x00	; 0
    25d2:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <GPIO_writePin>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 e8       	ldi	r26, 0x80	; 128
    25dc:	bf e3       	ldi	r27, 0x3F	; 63
    25de:	8d ab       	std	Y+53, r24	; 0x35
    25e0:	9e ab       	std	Y+54, r25	; 0x36
    25e2:	af ab       	std	Y+55, r26	; 0x37
    25e4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e6:	6d a9       	ldd	r22, Y+53	; 0x35
    25e8:	7e a9       	ldd	r23, Y+54	; 0x36
    25ea:	8f a9       	ldd	r24, Y+55	; 0x37
    25ec:	98 ad       	ldd	r25, Y+56	; 0x38
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	4a ef       	ldi	r20, 0xFA	; 250
    25f4:	54 e4       	ldi	r21, 0x44	; 68
    25f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	89 ab       	std	Y+49, r24	; 0x31
    2600:	9a ab       	std	Y+50, r25	; 0x32
    2602:	ab ab       	std	Y+51, r26	; 0x33
    2604:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2606:	69 a9       	ldd	r22, Y+49	; 0x31
    2608:	7a a9       	ldd	r23, Y+50	; 0x32
    260a:	8b a9       	ldd	r24, Y+51	; 0x33
    260c:	9c a9       	ldd	r25, Y+52	; 0x34
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e8       	ldi	r20, 0x80	; 128
    2614:	5f e3       	ldi	r21, 0x3F	; 63
    2616:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    261a:	88 23       	and	r24, r24
    261c:	2c f4       	brge	.+10     	; 0x2628 <LCD_sendCommand+0x72>
		__ticks = 1;
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	98 ab       	std	Y+48, r25	; 0x30
    2624:	8f a7       	std	Y+47, r24	; 0x2f
    2626:	3f c0       	rjmp	.+126    	; 0x26a6 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2628:	69 a9       	ldd	r22, Y+49	; 0x31
    262a:	7a a9       	ldd	r23, Y+50	; 0x32
    262c:	8b a9       	ldd	r24, Y+51	; 0x33
    262e:	9c a9       	ldd	r25, Y+52	; 0x34
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	3f ef       	ldi	r19, 0xFF	; 255
    2634:	4f e7       	ldi	r20, 0x7F	; 127
    2636:	57 e4       	ldi	r21, 0x47	; 71
    2638:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    263c:	18 16       	cp	r1, r24
    263e:	4c f5       	brge	.+82     	; 0x2692 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2640:	6d a9       	ldd	r22, Y+53	; 0x35
    2642:	7e a9       	ldd	r23, Y+54	; 0x36
    2644:	8f a9       	ldd	r24, Y+55	; 0x37
    2646:	98 ad       	ldd	r25, Y+56	; 0x38
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e2       	ldi	r20, 0x20	; 32
    264e:	51 e4       	ldi	r21, 0x41	; 65
    2650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	98 ab       	std	Y+48, r25	; 0x30
    2666:	8f a7       	std	Y+47, r24	; 0x2f
    2668:	0f c0       	rjmp	.+30     	; 0x2688 <LCD_sendCommand+0xd2>
    266a:	88 ec       	ldi	r24, 0xC8	; 200
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9e a7       	std	Y+46, r25	; 0x2e
    2670:	8d a7       	std	Y+45, r24	; 0x2d
    2672:	8d a5       	ldd	r24, Y+45	; 0x2d
    2674:	9e a5       	ldd	r25, Y+46	; 0x2e
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <LCD_sendCommand+0xc0>
    267a:	9e a7       	std	Y+46, r25	; 0x2e
    267c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2680:	98 a9       	ldd	r25, Y+48	; 0x30
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	98 ab       	std	Y+48, r25	; 0x30
    2686:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2688:	8f a5       	ldd	r24, Y+47	; 0x2f
    268a:	98 a9       	ldd	r25, Y+48	; 0x30
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	69 f7       	brne	.-38     	; 0x266a <LCD_sendCommand+0xb4>
    2690:	14 c0       	rjmp	.+40     	; 0x26ba <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2692:	69 a9       	ldd	r22, Y+49	; 0x31
    2694:	7a a9       	ldd	r23, Y+50	; 0x32
    2696:	8b a9       	ldd	r24, Y+51	; 0x33
    2698:	9c a9       	ldd	r25, Y+52	; 0x34
    269a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	98 ab       	std	Y+48, r25	; 0x30
    26a4:	8f a7       	std	Y+47, r24	; 0x2f
    26a6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26a8:	98 a9       	ldd	r25, Y+48	; 0x30
    26aa:	9c a7       	std	Y+44, r25	; 0x2c
    26ac:	8b a7       	std	Y+43, r24	; 0x2b
    26ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    26b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <LCD_sendCommand+0xfc>
    26b6:	9c a7       	std	Y+44, r25	; 0x2c
    26b8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	62 e0       	ldi	r22, 0x02	; 2
    26be:	41 e0       	ldi	r20, 0x01	; 1
    26c0:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <GPIO_writePin>
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	a0 e8       	ldi	r26, 0x80	; 128
    26ca:	bf e3       	ldi	r27, 0x3F	; 63
    26cc:	8f a3       	std	Y+39, r24	; 0x27
    26ce:	98 a7       	std	Y+40, r25	; 0x28
    26d0:	a9 a7       	std	Y+41, r26	; 0x29
    26d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d4:	6f a1       	ldd	r22, Y+39	; 0x27
    26d6:	78 a5       	ldd	r23, Y+40	; 0x28
    26d8:	89 a5       	ldd	r24, Y+41	; 0x29
    26da:	9a a5       	ldd	r25, Y+42	; 0x2a
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	4a ef       	ldi	r20, 0xFA	; 250
    26e2:	54 e4       	ldi	r21, 0x44	; 68
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	8b a3       	std	Y+35, r24	; 0x23
    26ee:	9c a3       	std	Y+36, r25	; 0x24
    26f0:	ad a3       	std	Y+37, r26	; 0x25
    26f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26f4:	6b a1       	ldd	r22, Y+35	; 0x23
    26f6:	7c a1       	ldd	r23, Y+36	; 0x24
    26f8:	8d a1       	ldd	r24, Y+37	; 0x25
    26fa:	9e a1       	ldd	r25, Y+38	; 0x26
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e8       	ldi	r20, 0x80	; 128
    2702:	5f e3       	ldi	r21, 0x3F	; 63
    2704:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2708:	88 23       	and	r24, r24
    270a:	2c f4       	brge	.+10     	; 0x2716 <LCD_sendCommand+0x160>
		__ticks = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9a a3       	std	Y+34, r25	; 0x22
    2712:	89 a3       	std	Y+33, r24	; 0x21
    2714:	3f c0       	rjmp	.+126    	; 0x2794 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    2716:	6b a1       	ldd	r22, Y+35	; 0x23
    2718:	7c a1       	ldd	r23, Y+36	; 0x24
    271a:	8d a1       	ldd	r24, Y+37	; 0x25
    271c:	9e a1       	ldd	r25, Y+38	; 0x26
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	3f ef       	ldi	r19, 0xFF	; 255
    2722:	4f e7       	ldi	r20, 0x7F	; 127
    2724:	57 e4       	ldi	r21, 0x47	; 71
    2726:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    272a:	18 16       	cp	r1, r24
    272c:	4c f5       	brge	.+82     	; 0x2780 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272e:	6f a1       	ldd	r22, Y+39	; 0x27
    2730:	78 a5       	ldd	r23, Y+40	; 0x28
    2732:	89 a5       	ldd	r24, Y+41	; 0x29
    2734:	9a a5       	ldd	r25, Y+42	; 0x2a
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e2       	ldi	r20, 0x20	; 32
    273c:	51 e4       	ldi	r21, 0x41	; 65
    273e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	bc 01       	movw	r22, r24
    2748:	cd 01       	movw	r24, r26
    274a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9a a3       	std	Y+34, r25	; 0x22
    2754:	89 a3       	std	Y+33, r24	; 0x21
    2756:	0f c0       	rjmp	.+30     	; 0x2776 <LCD_sendCommand+0x1c0>
    2758:	88 ec       	ldi	r24, 0xC8	; 200
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	98 a3       	std	Y+32, r25	; 0x20
    275e:	8f 8f       	std	Y+31, r24	; 0x1f
    2760:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2762:	98 a1       	ldd	r25, Y+32	; 0x20
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <LCD_sendCommand+0x1ae>
    2768:	98 a3       	std	Y+32, r25	; 0x20
    276a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276c:	89 a1       	ldd	r24, Y+33	; 0x21
    276e:	9a a1       	ldd	r25, Y+34	; 0x22
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	9a a3       	std	Y+34, r25	; 0x22
    2774:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2776:	89 a1       	ldd	r24, Y+33	; 0x21
    2778:	9a a1       	ldd	r25, Y+34	; 0x22
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	69 f7       	brne	.-38     	; 0x2758 <LCD_sendCommand+0x1a2>
    277e:	14 c0       	rjmp	.+40     	; 0x27a8 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2780:	6b a1       	ldd	r22, Y+35	; 0x23
    2782:	7c a1       	ldd	r23, Y+36	; 0x24
    2784:	8d a1       	ldd	r24, Y+37	; 0x25
    2786:	9e a1       	ldd	r25, Y+38	; 0x26
    2788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	9a a3       	std	Y+34, r25	; 0x22
    2792:	89 a3       	std	Y+33, r24	; 0x21
    2794:	89 a1       	ldd	r24, Y+33	; 0x21
    2796:	9a a1       	ldd	r25, Y+34	; 0x22
    2798:	9e 8f       	std	Y+30, r25	; 0x1e
    279a:	8d 8f       	std	Y+29, r24	; 0x1d
    279c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    279e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <LCD_sendCommand+0x1ea>
    27a4:	9e 8f       	std	Y+30, r25	; 0x1e
    27a6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    27a8:	80 e0       	ldi	r24, 0x00	; 0
    27aa:	69 ad       	ldd	r22, Y+57	; 0x39
    27ac:	0e 94 b9 10 	call	0x2172	; 0x2172 <GPIO_writePort>
    27b0:	80 e0       	ldi	r24, 0x00	; 0
    27b2:	90 e0       	ldi	r25, 0x00	; 0
    27b4:	a0 e8       	ldi	r26, 0x80	; 128
    27b6:	bf e3       	ldi	r27, 0x3F	; 63
    27b8:	89 8f       	std	Y+25, r24	; 0x19
    27ba:	9a 8f       	std	Y+26, r25	; 0x1a
    27bc:	ab 8f       	std	Y+27, r26	; 0x1b
    27be:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27c0:	69 8d       	ldd	r22, Y+25	; 0x19
    27c2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	4a ef       	ldi	r20, 0xFA	; 250
    27ce:	54 e4       	ldi	r21, 0x44	; 68
    27d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d4:	dc 01       	movw	r26, r24
    27d6:	cb 01       	movw	r24, r22
    27d8:	8d 8b       	std	Y+21, r24	; 0x15
    27da:	9e 8b       	std	Y+22, r25	; 0x16
    27dc:	af 8b       	std	Y+23, r26	; 0x17
    27de:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27e0:	6d 89       	ldd	r22, Y+21	; 0x15
    27e2:	7e 89       	ldd	r23, Y+22	; 0x16
    27e4:	8f 89       	ldd	r24, Y+23	; 0x17
    27e6:	98 8d       	ldd	r25, Y+24	; 0x18
    27e8:	20 e0       	ldi	r18, 0x00	; 0
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	40 e8       	ldi	r20, 0x80	; 128
    27ee:	5f e3       	ldi	r21, 0x3F	; 63
    27f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27f4:	88 23       	and	r24, r24
    27f6:	2c f4       	brge	.+10     	; 0x2802 <LCD_sendCommand+0x24c>
		__ticks = 1;
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	9c 8b       	std	Y+20, r25	; 0x14
    27fe:	8b 8b       	std	Y+19, r24	; 0x13
    2800:	3f c0       	rjmp	.+126    	; 0x2880 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2802:	6d 89       	ldd	r22, Y+21	; 0x15
    2804:	7e 89       	ldd	r23, Y+22	; 0x16
    2806:	8f 89       	ldd	r24, Y+23	; 0x17
    2808:	98 8d       	ldd	r25, Y+24	; 0x18
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	3f ef       	ldi	r19, 0xFF	; 255
    280e:	4f e7       	ldi	r20, 0x7F	; 127
    2810:	57 e4       	ldi	r21, 0x47	; 71
    2812:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2816:	18 16       	cp	r1, r24
    2818:	4c f5       	brge	.+82     	; 0x286c <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    281a:	69 8d       	ldd	r22, Y+25	; 0x19
    281c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    281e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2820:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e2       	ldi	r20, 0x20	; 32
    2828:	51 e4       	ldi	r21, 0x41	; 65
    282a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	bc 01       	movw	r22, r24
    2834:	cd 01       	movw	r24, r26
    2836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	9c 8b       	std	Y+20, r25	; 0x14
    2840:	8b 8b       	std	Y+19, r24	; 0x13
    2842:	0f c0       	rjmp	.+30     	; 0x2862 <LCD_sendCommand+0x2ac>
    2844:	88 ec       	ldi	r24, 0xC8	; 200
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	9a 8b       	std	Y+18, r25	; 0x12
    284a:	89 8b       	std	Y+17, r24	; 0x11
    284c:	89 89       	ldd	r24, Y+17	; 0x11
    284e:	9a 89       	ldd	r25, Y+18	; 0x12
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	f1 f7       	brne	.-4      	; 0x2850 <LCD_sendCommand+0x29a>
    2854:	9a 8b       	std	Y+18, r25	; 0x12
    2856:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2858:	8b 89       	ldd	r24, Y+19	; 0x13
    285a:	9c 89       	ldd	r25, Y+20	; 0x14
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	9c 8b       	std	Y+20, r25	; 0x14
    2860:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2862:	8b 89       	ldd	r24, Y+19	; 0x13
    2864:	9c 89       	ldd	r25, Y+20	; 0x14
    2866:	00 97       	sbiw	r24, 0x00	; 0
    2868:	69 f7       	brne	.-38     	; 0x2844 <LCD_sendCommand+0x28e>
    286a:	14 c0       	rjmp	.+40     	; 0x2894 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    286c:	6d 89       	ldd	r22, Y+21	; 0x15
    286e:	7e 89       	ldd	r23, Y+22	; 0x16
    2870:	8f 89       	ldd	r24, Y+23	; 0x17
    2872:	98 8d       	ldd	r25, Y+24	; 0x18
    2874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	9c 8b       	std	Y+20, r25	; 0x14
    287e:	8b 8b       	std	Y+19, r24	; 0x13
    2880:	8b 89       	ldd	r24, Y+19	; 0x13
    2882:	9c 89       	ldd	r25, Y+20	; 0x14
    2884:	98 8b       	std	Y+16, r25	; 0x10
    2886:	8f 87       	std	Y+15, r24	; 0x0f
    2888:	8f 85       	ldd	r24, Y+15	; 0x0f
    288a:	98 89       	ldd	r25, Y+16	; 0x10
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <LCD_sendCommand+0x2d6>
    2890:	98 8b       	std	Y+16, r25	; 0x10
    2892:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	62 e0       	ldi	r22, 0x02	; 2
    2898:	40 e0       	ldi	r20, 0x00	; 0
    289a:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <GPIO_writePin>
    289e:	80 e0       	ldi	r24, 0x00	; 0
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	a0 e8       	ldi	r26, 0x80	; 128
    28a4:	bf e3       	ldi	r27, 0x3F	; 63
    28a6:	8b 87       	std	Y+11, r24	; 0x0b
    28a8:	9c 87       	std	Y+12, r25	; 0x0c
    28aa:	ad 87       	std	Y+13, r26	; 0x0d
    28ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	4a ef       	ldi	r20, 0xFA	; 250
    28bc:	54 e4       	ldi	r21, 0x44	; 68
    28be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	8f 83       	std	Y+7, r24	; 0x07
    28c8:	98 87       	std	Y+8, r25	; 0x08
    28ca:	a9 87       	std	Y+9, r26	; 0x09
    28cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28ce:	6f 81       	ldd	r22, Y+7	; 0x07
    28d0:	78 85       	ldd	r23, Y+8	; 0x08
    28d2:	89 85       	ldd	r24, Y+9	; 0x09
    28d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d6:	20 e0       	ldi	r18, 0x00	; 0
    28d8:	30 e0       	ldi	r19, 0x00	; 0
    28da:	40 e8       	ldi	r20, 0x80	; 128
    28dc:	5f e3       	ldi	r21, 0x3F	; 63
    28de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28e2:	88 23       	and	r24, r24
    28e4:	2c f4       	brge	.+10     	; 0x28f0 <LCD_sendCommand+0x33a>
		__ticks = 1;
    28e6:	81 e0       	ldi	r24, 0x01	; 1
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	9e 83       	std	Y+6, r25	; 0x06
    28ec:	8d 83       	std	Y+5, r24	; 0x05
    28ee:	3f c0       	rjmp	.+126    	; 0x296e <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    28f0:	6f 81       	ldd	r22, Y+7	; 0x07
    28f2:	78 85       	ldd	r23, Y+8	; 0x08
    28f4:	89 85       	ldd	r24, Y+9	; 0x09
    28f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	3f ef       	ldi	r19, 0xFF	; 255
    28fc:	4f e7       	ldi	r20, 0x7F	; 127
    28fe:	57 e4       	ldi	r21, 0x47	; 71
    2900:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2904:	18 16       	cp	r1, r24
    2906:	4c f5       	brge	.+82     	; 0x295a <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2908:	6b 85       	ldd	r22, Y+11	; 0x0b
    290a:	7c 85       	ldd	r23, Y+12	; 0x0c
    290c:	8d 85       	ldd	r24, Y+13	; 0x0d
    290e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e2       	ldi	r20, 0x20	; 32
    2916:	51 e4       	ldi	r21, 0x41	; 65
    2918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	bc 01       	movw	r22, r24
    2922:	cd 01       	movw	r24, r26
    2924:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	9e 83       	std	Y+6, r25	; 0x06
    292e:	8d 83       	std	Y+5, r24	; 0x05
    2930:	0f c0       	rjmp	.+30     	; 0x2950 <LCD_sendCommand+0x39a>
    2932:	88 ec       	ldi	r24, 0xC8	; 200
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9c 83       	std	Y+4, r25	; 0x04
    2938:	8b 83       	std	Y+3, r24	; 0x03
    293a:	8b 81       	ldd	r24, Y+3	; 0x03
    293c:	9c 81       	ldd	r25, Y+4	; 0x04
    293e:	01 97       	sbiw	r24, 0x01	; 1
    2940:	f1 f7       	brne	.-4      	; 0x293e <LCD_sendCommand+0x388>
    2942:	9c 83       	std	Y+4, r25	; 0x04
    2944:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2946:	8d 81       	ldd	r24, Y+5	; 0x05
    2948:	9e 81       	ldd	r25, Y+6	; 0x06
    294a:	01 97       	sbiw	r24, 0x01	; 1
    294c:	9e 83       	std	Y+6, r25	; 0x06
    294e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2950:	8d 81       	ldd	r24, Y+5	; 0x05
    2952:	9e 81       	ldd	r25, Y+6	; 0x06
    2954:	00 97       	sbiw	r24, 0x00	; 0
    2956:	69 f7       	brne	.-38     	; 0x2932 <LCD_sendCommand+0x37c>
    2958:	14 c0       	rjmp	.+40     	; 0x2982 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    295a:	6f 81       	ldd	r22, Y+7	; 0x07
    295c:	78 85       	ldd	r23, Y+8	; 0x08
    295e:	89 85       	ldd	r24, Y+9	; 0x09
    2960:	9a 85       	ldd	r25, Y+10	; 0x0a
    2962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	9e 83       	std	Y+6, r25	; 0x06
    296c:	8d 83       	std	Y+5, r24	; 0x05
    296e:	8d 81       	ldd	r24, Y+5	; 0x05
    2970:	9e 81       	ldd	r25, Y+6	; 0x06
    2972:	9a 83       	std	Y+2, r25	; 0x02
    2974:	89 83       	std	Y+1, r24	; 0x01
    2976:	89 81       	ldd	r24, Y+1	; 0x01
    2978:	9a 81       	ldd	r25, Y+2	; 0x02
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	f1 f7       	brne	.-4      	; 0x297a <LCD_sendCommand+0x3c4>
    297e:	9a 83       	std	Y+2, r25	; 0x02
    2980:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2982:	e9 96       	adiw	r28, 0x39	; 57
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	08 95       	ret

00002994 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	e9 97       	sbiw	r28, 0x39	; 57
    299e:	0f b6       	in	r0, 0x3f	; 63
    29a0:	f8 94       	cli
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	0f be       	out	0x3f, r0	; 63
    29a6:	cd bf       	out	0x3d, r28	; 61
    29a8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	60 e0       	ldi	r22, 0x00	; 0
    29ae:	41 e0       	ldi	r20, 0x01	; 1
    29b0:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <GPIO_writePin>
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	a0 e8       	ldi	r26, 0x80	; 128
    29ba:	bf e3       	ldi	r27, 0x3F	; 63
    29bc:	8d ab       	std	Y+53, r24	; 0x35
    29be:	9e ab       	std	Y+54, r25	; 0x36
    29c0:	af ab       	std	Y+55, r26	; 0x37
    29c2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c4:	6d a9       	ldd	r22, Y+53	; 0x35
    29c6:	7e a9       	ldd	r23, Y+54	; 0x36
    29c8:	8f a9       	ldd	r24, Y+55	; 0x37
    29ca:	98 ad       	ldd	r25, Y+56	; 0x38
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	4a ef       	ldi	r20, 0xFA	; 250
    29d2:	54 e4       	ldi	r21, 0x44	; 68
    29d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	89 ab       	std	Y+49, r24	; 0x31
    29de:	9a ab       	std	Y+50, r25	; 0x32
    29e0:	ab ab       	std	Y+51, r26	; 0x33
    29e2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29e4:	69 a9       	ldd	r22, Y+49	; 0x31
    29e6:	7a a9       	ldd	r23, Y+50	; 0x32
    29e8:	8b a9       	ldd	r24, Y+51	; 0x33
    29ea:	9c a9       	ldd	r25, Y+52	; 0x34
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 e8       	ldi	r20, 0x80	; 128
    29f2:	5f e3       	ldi	r21, 0x3F	; 63
    29f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f8:	88 23       	and	r24, r24
    29fa:	2c f4       	brge	.+10     	; 0x2a06 <LCD_displayCharacter+0x72>
		__ticks = 1;
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	98 ab       	std	Y+48, r25	; 0x30
    2a02:	8f a7       	std	Y+47, r24	; 0x2f
    2a04:	3f c0       	rjmp	.+126    	; 0x2a84 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    2a06:	69 a9       	ldd	r22, Y+49	; 0x31
    2a08:	7a a9       	ldd	r23, Y+50	; 0x32
    2a0a:	8b a9       	ldd	r24, Y+51	; 0x33
    2a0c:	9c a9       	ldd	r25, Y+52	; 0x34
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	3f ef       	ldi	r19, 0xFF	; 255
    2a12:	4f e7       	ldi	r20, 0x7F	; 127
    2a14:	57 e4       	ldi	r21, 0x47	; 71
    2a16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a1a:	18 16       	cp	r1, r24
    2a1c:	4c f5       	brge	.+82     	; 0x2a70 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1e:	6d a9       	ldd	r22, Y+53	; 0x35
    2a20:	7e a9       	ldd	r23, Y+54	; 0x36
    2a22:	8f a9       	ldd	r24, Y+55	; 0x37
    2a24:	98 ad       	ldd	r25, Y+56	; 0x38
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e2       	ldi	r20, 0x20	; 32
    2a2c:	51 e4       	ldi	r21, 0x41	; 65
    2a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	bc 01       	movw	r22, r24
    2a38:	cd 01       	movw	r24, r26
    2a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	98 ab       	std	Y+48, r25	; 0x30
    2a44:	8f a7       	std	Y+47, r24	; 0x2f
    2a46:	0f c0       	rjmp	.+30     	; 0x2a66 <LCD_displayCharacter+0xd2>
    2a48:	88 ec       	ldi	r24, 0xC8	; 200
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	9e a7       	std	Y+46, r25	; 0x2e
    2a4e:	8d a7       	std	Y+45, r24	; 0x2d
    2a50:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a52:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <LCD_displayCharacter+0xc0>
    2a58:	9e a7       	std	Y+46, r25	; 0x2e
    2a5a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a5e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	98 ab       	std	Y+48, r25	; 0x30
    2a64:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a66:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a68:	98 a9       	ldd	r25, Y+48	; 0x30
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	69 f7       	brne	.-38     	; 0x2a48 <LCD_displayCharacter+0xb4>
    2a6e:	14 c0       	rjmp	.+40     	; 0x2a98 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a70:	69 a9       	ldd	r22, Y+49	; 0x31
    2a72:	7a a9       	ldd	r23, Y+50	; 0x32
    2a74:	8b a9       	ldd	r24, Y+51	; 0x33
    2a76:	9c a9       	ldd	r25, Y+52	; 0x34
    2a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	98 ab       	std	Y+48, r25	; 0x30
    2a82:	8f a7       	std	Y+47, r24	; 0x2f
    2a84:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a86:	98 a9       	ldd	r25, Y+48	; 0x30
    2a88:	9c a7       	std	Y+44, r25	; 0x2c
    2a8a:	8b a7       	std	Y+43, r24	; 0x2b
    2a8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a8e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <LCD_displayCharacter+0xfc>
    2a94:	9c a7       	std	Y+44, r25	; 0x2c
    2a96:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	62 e0       	ldi	r22, 0x02	; 2
    2a9c:	41 e0       	ldi	r20, 0x01	; 1
    2a9e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <GPIO_writePin>
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	a0 e8       	ldi	r26, 0x80	; 128
    2aa8:	bf e3       	ldi	r27, 0x3F	; 63
    2aaa:	8f a3       	std	Y+39, r24	; 0x27
    2aac:	98 a7       	std	Y+40, r25	; 0x28
    2aae:	a9 a7       	std	Y+41, r26	; 0x29
    2ab0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab2:	6f a1       	ldd	r22, Y+39	; 0x27
    2ab4:	78 a5       	ldd	r23, Y+40	; 0x28
    2ab6:	89 a5       	ldd	r24, Y+41	; 0x29
    2ab8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	4a ef       	ldi	r20, 0xFA	; 250
    2ac0:	54 e4       	ldi	r21, 0x44	; 68
    2ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	8b a3       	std	Y+35, r24	; 0x23
    2acc:	9c a3       	std	Y+36, r25	; 0x24
    2ace:	ad a3       	std	Y+37, r26	; 0x25
    2ad0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ad2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ad4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ad6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ad8:	9e a1       	ldd	r25, Y+38	; 0x26
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e8       	ldi	r20, 0x80	; 128
    2ae0:	5f e3       	ldi	r21, 0x3F	; 63
    2ae2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ae6:	88 23       	and	r24, r24
    2ae8:	2c f4       	brge	.+10     	; 0x2af4 <LCD_displayCharacter+0x160>
		__ticks = 1;
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	9a a3       	std	Y+34, r25	; 0x22
    2af0:	89 a3       	std	Y+33, r24	; 0x21
    2af2:	3f c0       	rjmp	.+126    	; 0x2b72 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2af4:	6b a1       	ldd	r22, Y+35	; 0x23
    2af6:	7c a1       	ldd	r23, Y+36	; 0x24
    2af8:	8d a1       	ldd	r24, Y+37	; 0x25
    2afa:	9e a1       	ldd	r25, Y+38	; 0x26
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	3f ef       	ldi	r19, 0xFF	; 255
    2b00:	4f e7       	ldi	r20, 0x7F	; 127
    2b02:	57 e4       	ldi	r21, 0x47	; 71
    2b04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b08:	18 16       	cp	r1, r24
    2b0a:	4c f5       	brge	.+82     	; 0x2b5e <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b0c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b0e:	78 a5       	ldd	r23, Y+40	; 0x28
    2b10:	89 a5       	ldd	r24, Y+41	; 0x29
    2b12:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e2       	ldi	r20, 0x20	; 32
    2b1a:	51 e4       	ldi	r21, 0x41	; 65
    2b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	bc 01       	movw	r22, r24
    2b26:	cd 01       	movw	r24, r26
    2b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	9a a3       	std	Y+34, r25	; 0x22
    2b32:	89 a3       	std	Y+33, r24	; 0x21
    2b34:	0f c0       	rjmp	.+30     	; 0x2b54 <LCD_displayCharacter+0x1c0>
    2b36:	88 ec       	ldi	r24, 0xC8	; 200
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	98 a3       	std	Y+32, r25	; 0x20
    2b3c:	8f 8f       	std	Y+31, r24	; 0x1f
    2b3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b40:	98 a1       	ldd	r25, Y+32	; 0x20
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <LCD_displayCharacter+0x1ae>
    2b46:	98 a3       	std	Y+32, r25	; 0x20
    2b48:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b4c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	9a a3       	std	Y+34, r25	; 0x22
    2b52:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b54:	89 a1       	ldd	r24, Y+33	; 0x21
    2b56:	9a a1       	ldd	r25, Y+34	; 0x22
    2b58:	00 97       	sbiw	r24, 0x00	; 0
    2b5a:	69 f7       	brne	.-38     	; 0x2b36 <LCD_displayCharacter+0x1a2>
    2b5c:	14 c0       	rjmp	.+40     	; 0x2b86 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5e:	6b a1       	ldd	r22, Y+35	; 0x23
    2b60:	7c a1       	ldd	r23, Y+36	; 0x24
    2b62:	8d a1       	ldd	r24, Y+37	; 0x25
    2b64:	9e a1       	ldd	r25, Y+38	; 0x26
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	9a a3       	std	Y+34, r25	; 0x22
    2b70:	89 a3       	std	Y+33, r24	; 0x21
    2b72:	89 a1       	ldd	r24, Y+33	; 0x21
    2b74:	9a a1       	ldd	r25, Y+34	; 0x22
    2b76:	9e 8f       	std	Y+30, r25	; 0x1e
    2b78:	8d 8f       	std	Y+29, r24	; 0x1d
    2b7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b7c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	f1 f7       	brne	.-4      	; 0x2b7e <LCD_displayCharacter+0x1ea>
    2b82:	9e 8f       	std	Y+30, r25	; 0x1e
    2b84:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	69 ad       	ldd	r22, Y+57	; 0x39
    2b8a:	0e 94 b9 10 	call	0x2172	; 0x2172 <GPIO_writePort>
    2b8e:	80 e0       	ldi	r24, 0x00	; 0
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	a0 e8       	ldi	r26, 0x80	; 128
    2b94:	bf e3       	ldi	r27, 0x3F	; 63
    2b96:	89 8f       	std	Y+25, r24	; 0x19
    2b98:	9a 8f       	std	Y+26, r25	; 0x1a
    2b9a:	ab 8f       	std	Y+27, r26	; 0x1b
    2b9c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b9e:	69 8d       	ldd	r22, Y+25	; 0x19
    2ba0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ba2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ba4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	4a ef       	ldi	r20, 0xFA	; 250
    2bac:	54 e4       	ldi	r21, 0x44	; 68
    2bae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	8d 8b       	std	Y+21, r24	; 0x15
    2bb8:	9e 8b       	std	Y+22, r25	; 0x16
    2bba:	af 8b       	std	Y+23, r26	; 0x17
    2bbc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bbe:	6d 89       	ldd	r22, Y+21	; 0x15
    2bc0:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc6:	20 e0       	ldi	r18, 0x00	; 0
    2bc8:	30 e0       	ldi	r19, 0x00	; 0
    2bca:	40 e8       	ldi	r20, 0x80	; 128
    2bcc:	5f e3       	ldi	r21, 0x3F	; 63
    2bce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bd2:	88 23       	and	r24, r24
    2bd4:	2c f4       	brge	.+10     	; 0x2be0 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	9c 8b       	std	Y+20, r25	; 0x14
    2bdc:	8b 8b       	std	Y+19, r24	; 0x13
    2bde:	3f c0       	rjmp	.+126    	; 0x2c5e <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2be0:	6d 89       	ldd	r22, Y+21	; 0x15
    2be2:	7e 89       	ldd	r23, Y+22	; 0x16
    2be4:	8f 89       	ldd	r24, Y+23	; 0x17
    2be6:	98 8d       	ldd	r25, Y+24	; 0x18
    2be8:	20 e0       	ldi	r18, 0x00	; 0
    2bea:	3f ef       	ldi	r19, 0xFF	; 255
    2bec:	4f e7       	ldi	r20, 0x7F	; 127
    2bee:	57 e4       	ldi	r21, 0x47	; 71
    2bf0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bf4:	18 16       	cp	r1, r24
    2bf6:	4c f5       	brge	.+82     	; 0x2c4a <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf8:	69 8d       	ldd	r22, Y+25	; 0x19
    2bfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c00:	20 e0       	ldi	r18, 0x00	; 0
    2c02:	30 e0       	ldi	r19, 0x00	; 0
    2c04:	40 e2       	ldi	r20, 0x20	; 32
    2c06:	51 e4       	ldi	r21, 0x41	; 65
    2c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	cb 01       	movw	r24, r22
    2c10:	bc 01       	movw	r22, r24
    2c12:	cd 01       	movw	r24, r26
    2c14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	9c 8b       	std	Y+20, r25	; 0x14
    2c1e:	8b 8b       	std	Y+19, r24	; 0x13
    2c20:	0f c0       	rjmp	.+30     	; 0x2c40 <LCD_displayCharacter+0x2ac>
    2c22:	88 ec       	ldi	r24, 0xC8	; 200
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	9a 8b       	std	Y+18, r25	; 0x12
    2c28:	89 8b       	std	Y+17, r24	; 0x11
    2c2a:	89 89       	ldd	r24, Y+17	; 0x11
    2c2c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c2e:	01 97       	sbiw	r24, 0x01	; 1
    2c30:	f1 f7       	brne	.-4      	; 0x2c2e <LCD_displayCharacter+0x29a>
    2c32:	9a 8b       	std	Y+18, r25	; 0x12
    2c34:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c36:	8b 89       	ldd	r24, Y+19	; 0x13
    2c38:	9c 89       	ldd	r25, Y+20	; 0x14
    2c3a:	01 97       	sbiw	r24, 0x01	; 1
    2c3c:	9c 8b       	std	Y+20, r25	; 0x14
    2c3e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c40:	8b 89       	ldd	r24, Y+19	; 0x13
    2c42:	9c 89       	ldd	r25, Y+20	; 0x14
    2c44:	00 97       	sbiw	r24, 0x00	; 0
    2c46:	69 f7       	brne	.-38     	; 0x2c22 <LCD_displayCharacter+0x28e>
    2c48:	14 c0       	rjmp	.+40     	; 0x2c72 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c4a:	6d 89       	ldd	r22, Y+21	; 0x15
    2c4c:	7e 89       	ldd	r23, Y+22	; 0x16
    2c4e:	8f 89       	ldd	r24, Y+23	; 0x17
    2c50:	98 8d       	ldd	r25, Y+24	; 0x18
    2c52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c56:	dc 01       	movw	r26, r24
    2c58:	cb 01       	movw	r24, r22
    2c5a:	9c 8b       	std	Y+20, r25	; 0x14
    2c5c:	8b 8b       	std	Y+19, r24	; 0x13
    2c5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c60:	9c 89       	ldd	r25, Y+20	; 0x14
    2c62:	98 8b       	std	Y+16, r25	; 0x10
    2c64:	8f 87       	std	Y+15, r24	; 0x0f
    2c66:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c68:	98 89       	ldd	r25, Y+16	; 0x10
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	f1 f7       	brne	.-4      	; 0x2c6a <LCD_displayCharacter+0x2d6>
    2c6e:	98 8b       	std	Y+16, r25	; 0x10
    2c70:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	62 e0       	ldi	r22, 0x02	; 2
    2c76:	40 e0       	ldi	r20, 0x00	; 0
    2c78:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <GPIO_writePin>
    2c7c:	80 e0       	ldi	r24, 0x00	; 0
    2c7e:	90 e0       	ldi	r25, 0x00	; 0
    2c80:	a0 e8       	ldi	r26, 0x80	; 128
    2c82:	bf e3       	ldi	r27, 0x3F	; 63
    2c84:	8b 87       	std	Y+11, r24	; 0x0b
    2c86:	9c 87       	std	Y+12, r25	; 0x0c
    2c88:	ad 87       	std	Y+13, r26	; 0x0d
    2c8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	4a ef       	ldi	r20, 0xFA	; 250
    2c9a:	54 e4       	ldi	r21, 0x44	; 68
    2c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca0:	dc 01       	movw	r26, r24
    2ca2:	cb 01       	movw	r24, r22
    2ca4:	8f 83       	std	Y+7, r24	; 0x07
    2ca6:	98 87       	std	Y+8, r25	; 0x08
    2ca8:	a9 87       	std	Y+9, r26	; 0x09
    2caa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cac:	6f 81       	ldd	r22, Y+7	; 0x07
    2cae:	78 85       	ldd	r23, Y+8	; 0x08
    2cb0:	89 85       	ldd	r24, Y+9	; 0x09
    2cb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb4:	20 e0       	ldi	r18, 0x00	; 0
    2cb6:	30 e0       	ldi	r19, 0x00	; 0
    2cb8:	40 e8       	ldi	r20, 0x80	; 128
    2cba:	5f e3       	ldi	r21, 0x3F	; 63
    2cbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cc0:	88 23       	and	r24, r24
    2cc2:	2c f4       	brge	.+10     	; 0x2cce <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	9e 83       	std	Y+6, r25	; 0x06
    2cca:	8d 83       	std	Y+5, r24	; 0x05
    2ccc:	3f c0       	rjmp	.+126    	; 0x2d4c <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2cce:	6f 81       	ldd	r22, Y+7	; 0x07
    2cd0:	78 85       	ldd	r23, Y+8	; 0x08
    2cd2:	89 85       	ldd	r24, Y+9	; 0x09
    2cd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cd6:	20 e0       	ldi	r18, 0x00	; 0
    2cd8:	3f ef       	ldi	r19, 0xFF	; 255
    2cda:	4f e7       	ldi	r20, 0x7F	; 127
    2cdc:	57 e4       	ldi	r21, 0x47	; 71
    2cde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ce2:	18 16       	cp	r1, r24
    2ce4:	4c f5       	brge	.+82     	; 0x2d38 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cee:	20 e0       	ldi	r18, 0x00	; 0
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	40 e2       	ldi	r20, 0x20	; 32
    2cf4:	51 e4       	ldi	r21, 0x41	; 65
    2cf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	bc 01       	movw	r22, r24
    2d00:	cd 01       	movw	r24, r26
    2d02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d06:	dc 01       	movw	r26, r24
    2d08:	cb 01       	movw	r24, r22
    2d0a:	9e 83       	std	Y+6, r25	; 0x06
    2d0c:	8d 83       	std	Y+5, r24	; 0x05
    2d0e:	0f c0       	rjmp	.+30     	; 0x2d2e <LCD_displayCharacter+0x39a>
    2d10:	88 ec       	ldi	r24, 0xC8	; 200
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	9c 83       	std	Y+4, r25	; 0x04
    2d16:	8b 83       	std	Y+3, r24	; 0x03
    2d18:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	f1 f7       	brne	.-4      	; 0x2d1c <LCD_displayCharacter+0x388>
    2d20:	9c 83       	std	Y+4, r25	; 0x04
    2d22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d24:	8d 81       	ldd	r24, Y+5	; 0x05
    2d26:	9e 81       	ldd	r25, Y+6	; 0x06
    2d28:	01 97       	sbiw	r24, 0x01	; 1
    2d2a:	9e 83       	std	Y+6, r25	; 0x06
    2d2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d30:	9e 81       	ldd	r25, Y+6	; 0x06
    2d32:	00 97       	sbiw	r24, 0x00	; 0
    2d34:	69 f7       	brne	.-38     	; 0x2d10 <LCD_displayCharacter+0x37c>
    2d36:	14 c0       	rjmp	.+40     	; 0x2d60 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d38:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3a:	78 85       	ldd	r23, Y+8	; 0x08
    2d3c:	89 85       	ldd	r24, Y+9	; 0x09
    2d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	9e 83       	std	Y+6, r25	; 0x06
    2d4a:	8d 83       	std	Y+5, r24	; 0x05
    2d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d50:	9a 83       	std	Y+2, r25	; 0x02
    2d52:	89 83       	std	Y+1, r24	; 0x01
    2d54:	89 81       	ldd	r24, Y+1	; 0x01
    2d56:	9a 81       	ldd	r25, Y+2	; 0x02
    2d58:	01 97       	sbiw	r24, 0x01	; 1
    2d5a:	f1 f7       	brne	.-4      	; 0x2d58 <LCD_displayCharacter+0x3c4>
    2d5c:	9a 83       	std	Y+2, r25	; 0x02
    2d5e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2d60:	e9 96       	adiw	r28, 0x39	; 57
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	f8 94       	cli
    2d66:	de bf       	out	0x3e, r29	; 62
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	cd bf       	out	0x3d, r28	; 61
    2d6c:	cf 91       	pop	r28
    2d6e:	df 91       	pop	r29
    2d70:	08 95       	ret

00002d72 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2d72:	df 93       	push	r29
    2d74:	cf 93       	push	r28
    2d76:	00 d0       	rcall	.+0      	; 0x2d78 <LCD_displayString+0x6>
    2d78:	0f 92       	push	r0
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	9b 83       	std	Y+3, r25	; 0x03
    2d80:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d82:	19 82       	std	Y+1, r1	; 0x01
    2d84:	0e c0       	rjmp	.+28     	; 0x2da2 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2d86:	89 81       	ldd	r24, Y+1	; 0x01
    2d88:	28 2f       	mov	r18, r24
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d90:	fc 01       	movw	r30, r24
    2d92:	e2 0f       	add	r30, r18
    2d94:	f3 1f       	adc	r31, r19
    2d96:	80 81       	ld	r24, Z
    2d98:	0e 94 ca 14 	call	0x2994	; 0x2994 <LCD_displayCharacter>
		i++;
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	8f 5f       	subi	r24, 0xFF	; 255
    2da0:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2da2:	89 81       	ldd	r24, Y+1	; 0x01
    2da4:	28 2f       	mov	r18, r24
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	8a 81       	ldd	r24, Y+2	; 0x02
    2daa:	9b 81       	ldd	r25, Y+3	; 0x03
    2dac:	fc 01       	movw	r30, r24
    2dae:	e2 0f       	add	r30, r18
    2db0:	f3 1f       	adc	r31, r19
    2db2:	80 81       	ld	r24, Z
    2db4:	88 23       	and	r24, r24
    2db6:	39 f7       	brne	.-50     	; 0x2d86 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	0f 90       	pop	r0
    2dbe:	cf 91       	pop	r28
    2dc0:	df 91       	pop	r29
    2dc2:	08 95       	ret

00002dc4 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2dc4:	df 93       	push	r29
    2dc6:	cf 93       	push	r28
    2dc8:	00 d0       	rcall	.+0      	; 0x2dca <LCD_moveCursor+0x6>
    2dca:	00 d0       	rcall	.+0      	; 0x2dcc <LCD_moveCursor+0x8>
    2dcc:	0f 92       	push	r0
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
    2dd2:	8a 83       	std	Y+2, r24	; 0x02
    2dd4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd8:	28 2f       	mov	r18, r24
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	3d 83       	std	Y+5, r19	; 0x05
    2dde:	2c 83       	std	Y+4, r18	; 0x04
    2de0:	8c 81       	ldd	r24, Y+4	; 0x04
    2de2:	9d 81       	ldd	r25, Y+5	; 0x05
    2de4:	81 30       	cpi	r24, 0x01	; 1
    2de6:	91 05       	cpc	r25, r1
    2de8:	c1 f0       	breq	.+48     	; 0x2e1a <LCD_moveCursor+0x56>
    2dea:	2c 81       	ldd	r18, Y+4	; 0x04
    2dec:	3d 81       	ldd	r19, Y+5	; 0x05
    2dee:	22 30       	cpi	r18, 0x02	; 2
    2df0:	31 05       	cpc	r19, r1
    2df2:	2c f4       	brge	.+10     	; 0x2dfe <LCD_moveCursor+0x3a>
    2df4:	8c 81       	ldd	r24, Y+4	; 0x04
    2df6:	9d 81       	ldd	r25, Y+5	; 0x05
    2df8:	00 97       	sbiw	r24, 0x00	; 0
    2dfa:	61 f0       	breq	.+24     	; 0x2e14 <LCD_moveCursor+0x50>
    2dfc:	19 c0       	rjmp	.+50     	; 0x2e30 <LCD_moveCursor+0x6c>
    2dfe:	2c 81       	ldd	r18, Y+4	; 0x04
    2e00:	3d 81       	ldd	r19, Y+5	; 0x05
    2e02:	22 30       	cpi	r18, 0x02	; 2
    2e04:	31 05       	cpc	r19, r1
    2e06:	69 f0       	breq	.+26     	; 0x2e22 <LCD_moveCursor+0x5e>
    2e08:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e0c:	83 30       	cpi	r24, 0x03	; 3
    2e0e:	91 05       	cpc	r25, r1
    2e10:	61 f0       	breq	.+24     	; 0x2e2a <LCD_moveCursor+0x66>
    2e12:	0e c0       	rjmp	.+28     	; 0x2e30 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2e14:	8b 81       	ldd	r24, Y+3	; 0x03
    2e16:	89 83       	std	Y+1, r24	; 0x01
    2e18:	0b c0       	rjmp	.+22     	; 0x2e30 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e1c:	80 5c       	subi	r24, 0xC0	; 192
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	07 c0       	rjmp	.+14     	; 0x2e30 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2e22:	8b 81       	ldd	r24, Y+3	; 0x03
    2e24:	80 5f       	subi	r24, 0xF0	; 240
    2e26:	89 83       	std	Y+1, r24	; 0x01
    2e28:	03 c0       	rjmp	.+6      	; 0x2e30 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e2c:	80 5b       	subi	r24, 0xB0	; 176
    2e2e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2e30:	89 81       	ldd	r24, Y+1	; 0x01
    2e32:	80 68       	ori	r24, 0x80	; 128
    2e34:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_sendCommand>
}
    2e38:	0f 90       	pop	r0
    2e3a:	0f 90       	pop	r0
    2e3c:	0f 90       	pop	r0
    2e3e:	0f 90       	pop	r0
    2e40:	0f 90       	pop	r0
    2e42:	cf 91       	pop	r28
    2e44:	df 91       	pop	r29
    2e46:	08 95       	ret

00002e48 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2e48:	df 93       	push	r29
    2e4a:	cf 93       	push	r28
    2e4c:	00 d0       	rcall	.+0      	; 0x2e4e <LCD_displayStringRowColumn+0x6>
    2e4e:	00 d0       	rcall	.+0      	; 0x2e50 <LCD_displayStringRowColumn+0x8>
    2e50:	cd b7       	in	r28, 0x3d	; 61
    2e52:	de b7       	in	r29, 0x3e	; 62
    2e54:	89 83       	std	Y+1, r24	; 0x01
    2e56:	6a 83       	std	Y+2, r22	; 0x02
    2e58:	5c 83       	std	Y+4, r21	; 0x04
    2e5a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2e5c:	89 81       	ldd	r24, Y+1	; 0x01
    2e5e:	6a 81       	ldd	r22, Y+2	; 0x02
    2e60:	0e 94 e2 16 	call	0x2dc4	; 0x2dc4 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2e64:	8b 81       	ldd	r24, Y+3	; 0x03
    2e66:	9c 81       	ldd	r25, Y+4	; 0x04
    2e68:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <LCD_displayString>
}
    2e6c:	0f 90       	pop	r0
    2e6e:	0f 90       	pop	r0
    2e70:	0f 90       	pop	r0
    2e72:	0f 90       	pop	r0
    2e74:	cf 91       	pop	r28
    2e76:	df 91       	pop	r29
    2e78:	08 95       	ret

00002e7a <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2e7a:	df 93       	push	r29
    2e7c:	cf 93       	push	r28
    2e7e:	cd b7       	in	r28, 0x3d	; 61
    2e80:	de b7       	in	r29, 0x3e	; 62
    2e82:	62 97       	sbiw	r28, 0x12	; 18
    2e84:	0f b6       	in	r0, 0x3f	; 63
    2e86:	f8 94       	cli
    2e88:	de bf       	out	0x3e, r29	; 62
    2e8a:	0f be       	out	0x3f, r0	; 63
    2e8c:	cd bf       	out	0x3d, r28	; 61
    2e8e:	9a 8b       	std	Y+18, r25	; 0x12
    2e90:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2e92:	89 89       	ldd	r24, Y+17	; 0x11
    2e94:	9a 89       	ldd	r25, Y+18	; 0x12
    2e96:	9e 01       	movw	r18, r28
    2e98:	2f 5f       	subi	r18, 0xFF	; 255
    2e9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e9c:	b9 01       	movw	r22, r18
    2e9e:	4a e0       	ldi	r20, 0x0A	; 10
    2ea0:	50 e0       	ldi	r21, 0x00	; 0
    2ea2:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <itoa>
   LCD_displayString(buff); /* Display the string */
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	01 96       	adiw	r24, 0x01	; 1
    2eaa:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <LCD_displayString>
}
    2eae:	62 96       	adiw	r28, 0x12	; 18
    2eb0:	0f b6       	in	r0, 0x3f	; 63
    2eb2:	f8 94       	cli
    2eb4:	de bf       	out	0x3e, r29	; 62
    2eb6:	0f be       	out	0x3f, r0	; 63
    2eb8:	cd bf       	out	0x3d, r28	; 61
    2eba:	cf 91       	pop	r28
    2ebc:	df 91       	pop	r29
    2ebe:	08 95       	ret

00002ec0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2ec0:	df 93       	push	r29
    2ec2:	cf 93       	push	r28
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	0e 94 db 12 	call	0x25b6	; 0x25b6 <LCD_sendCommand>
}
    2ece:	cf 91       	pop	r28
    2ed0:	df 91       	pop	r29
    2ed2:	08 95       	ret

00002ed4 <__vector_11>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

	/************************ TIMER0 ************************/
ISR(TIMER0_OVF_vect)
{
    2ed4:	1f 92       	push	r1
    2ed6:	0f 92       	push	r0
    2ed8:	0f b6       	in	r0, 0x3f	; 63
    2eda:	0f 92       	push	r0
    2edc:	11 24       	eor	r1, r1
    2ede:	2f 93       	push	r18
    2ee0:	3f 93       	push	r19
    2ee2:	4f 93       	push	r20
    2ee4:	5f 93       	push	r21
    2ee6:	6f 93       	push	r22
    2ee8:	7f 93       	push	r23
    2eea:	8f 93       	push	r24
    2eec:	9f 93       	push	r25
    2eee:	af 93       	push	r26
    2ef0:	bf 93       	push	r27
    2ef2:	ef 93       	push	r30
    2ef4:	ff 93       	push	r31
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	cd b7       	in	r28, 0x3d	; 61
    2efc:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2efe:	80 91 30 01 	lds	r24, 0x0130
    2f02:	90 91 31 01 	lds	r25, 0x0131
    2f06:	00 97       	sbiw	r24, 0x00	; 0
    2f08:	29 f0       	breq	.+10     	; 0x2f14 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)();
    2f0a:	e0 91 30 01 	lds	r30, 0x0130
    2f0e:	f0 91 31 01 	lds	r31, 0x0131
    2f12:	09 95       	icall
	}
}
    2f14:	cf 91       	pop	r28
    2f16:	df 91       	pop	r29
    2f18:	ff 91       	pop	r31
    2f1a:	ef 91       	pop	r30
    2f1c:	bf 91       	pop	r27
    2f1e:	af 91       	pop	r26
    2f20:	9f 91       	pop	r25
    2f22:	8f 91       	pop	r24
    2f24:	7f 91       	pop	r23
    2f26:	6f 91       	pop	r22
    2f28:	5f 91       	pop	r21
    2f2a:	4f 91       	pop	r20
    2f2c:	3f 91       	pop	r19
    2f2e:	2f 91       	pop	r18
    2f30:	0f 90       	pop	r0
    2f32:	0f be       	out	0x3f, r0	; 63
    2f34:	0f 90       	pop	r0
    2f36:	1f 90       	pop	r1
    2f38:	18 95       	reti

00002f3a <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    2f3a:	1f 92       	push	r1
    2f3c:	0f 92       	push	r0
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	0f 92       	push	r0
    2f42:	11 24       	eor	r1, r1
    2f44:	2f 93       	push	r18
    2f46:	3f 93       	push	r19
    2f48:	4f 93       	push	r20
    2f4a:	5f 93       	push	r21
    2f4c:	6f 93       	push	r22
    2f4e:	7f 93       	push	r23
    2f50:	8f 93       	push	r24
    2f52:	9f 93       	push	r25
    2f54:	af 93       	push	r26
    2f56:	bf 93       	push	r27
    2f58:	ef 93       	push	r30
    2f5a:	ff 93       	push	r31
    2f5c:	df 93       	push	r29
    2f5e:	cf 93       	push	r28
    2f60:	cd b7       	in	r28, 0x3d	; 61
    2f62:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2f64:	80 91 30 01 	lds	r24, 0x0130
    2f68:	90 91 31 01 	lds	r25, 0x0131
    2f6c:	00 97       	sbiw	r24, 0x00	; 0
    2f6e:	29 f0       	breq	.+10     	; 0x2f7a <__vector_10+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)();
    2f70:	e0 91 30 01 	lds	r30, 0x0130
    2f74:	f0 91 31 01 	lds	r31, 0x0131
    2f78:	09 95       	icall
	}
}
    2f7a:	cf 91       	pop	r28
    2f7c:	df 91       	pop	r29
    2f7e:	ff 91       	pop	r31
    2f80:	ef 91       	pop	r30
    2f82:	bf 91       	pop	r27
    2f84:	af 91       	pop	r26
    2f86:	9f 91       	pop	r25
    2f88:	8f 91       	pop	r24
    2f8a:	7f 91       	pop	r23
    2f8c:	6f 91       	pop	r22
    2f8e:	5f 91       	pop	r21
    2f90:	4f 91       	pop	r20
    2f92:	3f 91       	pop	r19
    2f94:	2f 91       	pop	r18
    2f96:	0f 90       	pop	r0
    2f98:	0f be       	out	0x3f, r0	; 63
    2f9a:	0f 90       	pop	r0
    2f9c:	1f 90       	pop	r1
    2f9e:	18 95       	reti

00002fa0 <__vector_9>:

	/************************ TIMER1 ************************/
ISR(TIMER1_OVF_vect)
{
    2fa0:	1f 92       	push	r1
    2fa2:	0f 92       	push	r0
    2fa4:	0f b6       	in	r0, 0x3f	; 63
    2fa6:	0f 92       	push	r0
    2fa8:	11 24       	eor	r1, r1
    2faa:	2f 93       	push	r18
    2fac:	3f 93       	push	r19
    2fae:	4f 93       	push	r20
    2fb0:	5f 93       	push	r21
    2fb2:	6f 93       	push	r22
    2fb4:	7f 93       	push	r23
    2fb6:	8f 93       	push	r24
    2fb8:	9f 93       	push	r25
    2fba:	af 93       	push	r26
    2fbc:	bf 93       	push	r27
    2fbe:	ef 93       	push	r30
    2fc0:	ff 93       	push	r31
    2fc2:	df 93       	push	r29
    2fc4:	cf 93       	push	r28
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2fca:	80 91 30 01 	lds	r24, 0x0130
    2fce:	90 91 31 01 	lds	r25, 0x0131
    2fd2:	00 97       	sbiw	r24, 0x00	; 0
    2fd4:	29 f0       	breq	.+10     	; 0x2fe0 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)();
    2fd6:	e0 91 30 01 	lds	r30, 0x0130
    2fda:	f0 91 31 01 	lds	r31, 0x0131
    2fde:	09 95       	icall
	}
}
    2fe0:	cf 91       	pop	r28
    2fe2:	df 91       	pop	r29
    2fe4:	ff 91       	pop	r31
    2fe6:	ef 91       	pop	r30
    2fe8:	bf 91       	pop	r27
    2fea:	af 91       	pop	r26
    2fec:	9f 91       	pop	r25
    2fee:	8f 91       	pop	r24
    2ff0:	7f 91       	pop	r23
    2ff2:	6f 91       	pop	r22
    2ff4:	5f 91       	pop	r21
    2ff6:	4f 91       	pop	r20
    2ff8:	3f 91       	pop	r19
    2ffa:	2f 91       	pop	r18
    2ffc:	0f 90       	pop	r0
    2ffe:	0f be       	out	0x3f, r0	; 63
    3000:	0f 90       	pop	r0
    3002:	1f 90       	pop	r1
    3004:	18 95       	reti

00003006 <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
    3006:	1f 92       	push	r1
    3008:	0f 92       	push	r0
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	0f 92       	push	r0
    300e:	11 24       	eor	r1, r1
    3010:	2f 93       	push	r18
    3012:	3f 93       	push	r19
    3014:	4f 93       	push	r20
    3016:	5f 93       	push	r21
    3018:	6f 93       	push	r22
    301a:	7f 93       	push	r23
    301c:	8f 93       	push	r24
    301e:	9f 93       	push	r25
    3020:	af 93       	push	r26
    3022:	bf 93       	push	r27
    3024:	ef 93       	push	r30
    3026:	ff 93       	push	r31
    3028:	df 93       	push	r29
    302a:	cf 93       	push	r28
    302c:	cd b7       	in	r28, 0x3d	; 61
    302e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3030:	80 91 30 01 	lds	r24, 0x0130
    3034:	90 91 31 01 	lds	r25, 0x0131
    3038:	00 97       	sbiw	r24, 0x00	; 0
    303a:	29 f0       	breq	.+10     	; 0x3046 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)();
    303c:	e0 91 30 01 	lds	r30, 0x0130
    3040:	f0 91 31 01 	lds	r31, 0x0131
    3044:	09 95       	icall
	}
}
    3046:	cf 91       	pop	r28
    3048:	df 91       	pop	r29
    304a:	ff 91       	pop	r31
    304c:	ef 91       	pop	r30
    304e:	bf 91       	pop	r27
    3050:	af 91       	pop	r26
    3052:	9f 91       	pop	r25
    3054:	8f 91       	pop	r24
    3056:	7f 91       	pop	r23
    3058:	6f 91       	pop	r22
    305a:	5f 91       	pop	r21
    305c:	4f 91       	pop	r20
    305e:	3f 91       	pop	r19
    3060:	2f 91       	pop	r18
    3062:	0f 90       	pop	r0
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	0f 90       	pop	r0
    3068:	1f 90       	pop	r1
    306a:	18 95       	reti

0000306c <__vector_5>:

	/************************ TIMER2 ************************/
ISR(TIMER2_OVF_vect)
{
    306c:	1f 92       	push	r1
    306e:	0f 92       	push	r0
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	0f 92       	push	r0
    3074:	11 24       	eor	r1, r1
    3076:	2f 93       	push	r18
    3078:	3f 93       	push	r19
    307a:	4f 93       	push	r20
    307c:	5f 93       	push	r21
    307e:	6f 93       	push	r22
    3080:	7f 93       	push	r23
    3082:	8f 93       	push	r24
    3084:	9f 93       	push	r25
    3086:	af 93       	push	r26
    3088:	bf 93       	push	r27
    308a:	ef 93       	push	r30
    308c:	ff 93       	push	r31
    308e:	df 93       	push	r29
    3090:	cf 93       	push	r28
    3092:	cd b7       	in	r28, 0x3d	; 61
    3094:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3096:	80 91 30 01 	lds	r24, 0x0130
    309a:	90 91 31 01 	lds	r25, 0x0131
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	29 f0       	breq	.+10     	; 0x30ac <__vector_5+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)();
    30a2:	e0 91 30 01 	lds	r30, 0x0130
    30a6:	f0 91 31 01 	lds	r31, 0x0131
    30aa:	09 95       	icall
	}
}
    30ac:	cf 91       	pop	r28
    30ae:	df 91       	pop	r29
    30b0:	ff 91       	pop	r31
    30b2:	ef 91       	pop	r30
    30b4:	bf 91       	pop	r27
    30b6:	af 91       	pop	r26
    30b8:	9f 91       	pop	r25
    30ba:	8f 91       	pop	r24
    30bc:	7f 91       	pop	r23
    30be:	6f 91       	pop	r22
    30c0:	5f 91       	pop	r21
    30c2:	4f 91       	pop	r20
    30c4:	3f 91       	pop	r19
    30c6:	2f 91       	pop	r18
    30c8:	0f 90       	pop	r0
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	0f 90       	pop	r0
    30ce:	1f 90       	pop	r1
    30d0:	18 95       	reti

000030d2 <__vector_4>:

ISR(TIMER2_COMP_vect)
{
    30d2:	1f 92       	push	r1
    30d4:	0f 92       	push	r0
    30d6:	0f b6       	in	r0, 0x3f	; 63
    30d8:	0f 92       	push	r0
    30da:	11 24       	eor	r1, r1
    30dc:	2f 93       	push	r18
    30de:	3f 93       	push	r19
    30e0:	4f 93       	push	r20
    30e2:	5f 93       	push	r21
    30e4:	6f 93       	push	r22
    30e6:	7f 93       	push	r23
    30e8:	8f 93       	push	r24
    30ea:	9f 93       	push	r25
    30ec:	af 93       	push	r26
    30ee:	bf 93       	push	r27
    30f0:	ef 93       	push	r30
    30f2:	ff 93       	push	r31
    30f4:	df 93       	push	r29
    30f6:	cf 93       	push	r28
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    30fc:	80 91 30 01 	lds	r24, 0x0130
    3100:	90 91 31 01 	lds	r25, 0x0131
    3104:	00 97       	sbiw	r24, 0x00	; 0
    3106:	29 f0       	breq	.+10     	; 0x3112 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application */
		(*g_callBackPtr)();
    3108:	e0 91 30 01 	lds	r30, 0x0130
    310c:	f0 91 31 01 	lds	r31, 0x0131
    3110:	09 95       	icall
	}
}
    3112:	cf 91       	pop	r28
    3114:	df 91       	pop	r29
    3116:	ff 91       	pop	r31
    3118:	ef 91       	pop	r30
    311a:	bf 91       	pop	r27
    311c:	af 91       	pop	r26
    311e:	9f 91       	pop	r25
    3120:	8f 91       	pop	r24
    3122:	7f 91       	pop	r23
    3124:	6f 91       	pop	r22
    3126:	5f 91       	pop	r21
    3128:	4f 91       	pop	r20
    312a:	3f 91       	pop	r19
    312c:	2f 91       	pop	r18
    312e:	0f 90       	pop	r0
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	0f 90       	pop	r0
    3134:	1f 90       	pop	r1
    3136:	18 95       	reti

00003138 <TIMER_Init>:
/*
 * Description :
 * Function responsible for initializing the Timer.
 */
void TIMER_Init(const TIMER_ConfigType * Config_Ptr)
{
    3138:	df 93       	push	r29
    313a:	cf 93       	push	r28
    313c:	00 d0       	rcall	.+0      	; 0x313e <TIMER_Init+0x6>
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	9a 83       	std	Y+2, r25	; 0x02
    3144:	89 83       	std	Y+1, r24	; 0x01
	/************************ TIMER0 ************************/
	if(Config_Ptr->TIMER_id == TIMER0)
    3146:	e9 81       	ldd	r30, Y+1	; 0x01
    3148:	fa 81       	ldd	r31, Y+2	; 0x02
    314a:	80 81       	ld	r24, Z
    314c:	88 23       	and	r24, r24
    314e:	09 f0       	breq	.+2      	; 0x3152 <TIMER_Init+0x1a>
    3150:	3f c0       	rjmp	.+126    	; 0x31d0 <TIMER_Init+0x98>
	{
		if(Config_Ptr->TIMER_mode == TIMER_NORMAL_MODE)
    3152:	e9 81       	ldd	r30, Y+1	; 0x01
    3154:	fa 81       	ldd	r31, Y+2	; 0x02
    3156:	81 81       	ldd	r24, Z+1	; 0x01
    3158:	88 23       	and	r24, r24
    315a:	61 f4       	brne	.+24     	; 0x3174 <TIMER_Init+0x3c>
			/* configure the timer0 control register
			 * 1. Normal mode FOC0=1
			 * 2. Normal Mode WGM01=0 & WGM00=0
			 * 3. Normal port operation COM00=0 & COM01=0
			 */
			TCCR0 = (1<<FOC0);
    315c:	e3 e5       	ldi	r30, 0x53	; 83
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 e8       	ldi	r24, 0x80	; 128
    3162:	80 83       	st	Z, r24

			/* Enable Timer0 Overflow Interrupt */
			TIMSK |= (1<<TOIE0);
    3164:	a9 e5       	ldi	r26, 0x59	; 89
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	e9 e5       	ldi	r30, 0x59	; 89
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	81 60       	ori	r24, 0x01	; 1
    3170:	8c 93       	st	X, r24
    3172:	1a c0       	rjmp	.+52     	; 0x31a8 <TIMER_Init+0x70>
		}

		else if(Config_Ptr->TIMER_mode == TIMER_COMPARE_MODE)
    3174:	e9 81       	ldd	r30, Y+1	; 0x01
    3176:	fa 81       	ldd	r31, Y+2	; 0x02
    3178:	81 81       	ldd	r24, Z+1	; 0x01
    317a:	81 30       	cpi	r24, 0x01	; 1
    317c:	a9 f4       	brne	.+42     	; 0x31a8 <TIMER_Init+0x70>
			/* configure the timer0 control register
			 * 1. Compare mode FOC0=1
			 * 2. Compare Mode WGM01=1 & WGM00=0
			 * 3. Normal port operation COM00=0 & COM01=0
			 */
			TCCR0 = (1<<FOC0) | (1<<WGM01);
    317e:	e3 e5       	ldi	r30, 0x53	; 83
    3180:	f0 e0       	ldi	r31, 0x00	; 0
    3182:	88 e8       	ldi	r24, 0x88	; 136
    3184:	80 83       	st	Z, r24

			/* Enable Timer0 Compare Interrupt */
			TIMSK |= (1<<OCIE0);
    3186:	a9 e5       	ldi	r26, 0x59	; 89
    3188:	b0 e0       	ldi	r27, 0x00	; 0
    318a:	e9 e5       	ldi	r30, 0x59	; 89
    318c:	f0 e0       	ldi	r31, 0x00	; 0
    318e:	80 81       	ld	r24, Z
    3190:	82 60       	ori	r24, 0x02	; 2
    3192:	8c 93       	st	X, r24

			/* Set Timer0 Compare Value */
			OCR0 = (Config_Ptr->TIMER_compareValue);
    3194:	2c e5       	ldi	r18, 0x5C	; 92
    3196:	30 e0       	ldi	r19, 0x00	; 0
    3198:	e9 81       	ldd	r30, Y+1	; 0x01
    319a:	fa 81       	ldd	r31, Y+2	; 0x02
    319c:	87 81       	ldd	r24, Z+7	; 0x07
    319e:	90 85       	ldd	r25, Z+8	; 0x08
    31a0:	a1 85       	ldd	r26, Z+9	; 0x09
    31a2:	b2 85       	ldd	r27, Z+10	; 0x0a
    31a4:	f9 01       	movw	r30, r18
    31a6:	80 83       	st	Z, r24

		/*
		 * Adjust the prescaler by inserting the three bits of the required prescaler
		 * value in bits ( CS00 & CS01 & CS02 ) of TCCR0 Register
		 */
		TCCR0 |= (Config_Ptr->presaler);
    31a8:	a3 e5       	ldi	r26, 0x53	; 83
    31aa:	b0 e0       	ldi	r27, 0x00	; 0
    31ac:	e3 e5       	ldi	r30, 0x53	; 83
    31ae:	f0 e0       	ldi	r31, 0x00	; 0
    31b0:	90 81       	ld	r25, Z
    31b2:	e9 81       	ldd	r30, Y+1	; 0x01
    31b4:	fa 81       	ldd	r31, Y+2	; 0x02
    31b6:	82 81       	ldd	r24, Z+2	; 0x02
    31b8:	89 2b       	or	r24, r25
    31ba:	8c 93       	st	X, r24

		/* Set Timer0 Initial Value */
		TCNT0 = (Config_Ptr->TIMER_initialValue);
    31bc:	22 e5       	ldi	r18, 0x52	; 82
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	e9 81       	ldd	r30, Y+1	; 0x01
    31c2:	fa 81       	ldd	r31, Y+2	; 0x02
    31c4:	83 81       	ldd	r24, Z+3	; 0x03
    31c6:	94 81       	ldd	r25, Z+4	; 0x04
    31c8:	a5 81       	ldd	r26, Z+5	; 0x05
    31ca:	b6 81       	ldd	r27, Z+6	; 0x06
    31cc:	f9 01       	movw	r30, r18
    31ce:	80 83       	st	Z, r24
	}

	/************************ TIMER1 ************************/

	if(Config_Ptr->TIMER_id == TIMER1)
    31d0:	e9 81       	ldd	r30, Y+1	; 0x01
    31d2:	fa 81       	ldd	r31, Y+2	; 0x02
    31d4:	80 81       	ld	r24, Z
    31d6:	81 30       	cpi	r24, 0x01	; 1
    31d8:	09 f0       	breq	.+2      	; 0x31dc <TIMER_Init+0xa4>
    31da:	48 c0       	rjmp	.+144    	; 0x326c <TIMER_Init+0x134>
	{
		if(Config_Ptr->TIMER_mode == TIMER_NORMAL_MODE)
    31dc:	e9 81       	ldd	r30, Y+1	; 0x01
    31de:	fa 81       	ldd	r31, Y+2	; 0x02
    31e0:	81 81       	ldd	r24, Z+1	; 0x01
    31e2:	88 23       	and	r24, r24
    31e4:	79 f4       	brne	.+30     	; 0x3204 <TIMER_Init+0xcc>
			/* configure the timer1 control register TCCR1A
			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=1 FOC1B=0
			 * 3. Normal Mode WGM10=1 WGM11=1
			 */
			TCCR1A = (1<<FOC1A) | (1<<WGM10) | (1<<WGM11);
    31e6:	ef e4       	ldi	r30, 0x4F	; 79
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	8b e0       	ldi	r24, 0x0B	; 11
    31ec:	80 83       	st	Z, r24

			/* configure the timer1 control register TCCR1B
			 * 1. Normal Mode WGM12=0 WGM13=0
			 */
			TCCR1B = 0;
    31ee:	ee e4       	ldi	r30, 0x4E	; 78
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	10 82       	st	Z, r1

			/* Enable Timer1 Overflow Interrupt */
			TIMSK |= (1<<TOIE1);
    31f4:	a9 e5       	ldi	r26, 0x59	; 89
    31f6:	b0 e0       	ldi	r27, 0x00	; 0
    31f8:	e9 e5       	ldi	r30, 0x59	; 89
    31fa:	f0 e0       	ldi	r31, 0x00	; 0
    31fc:	80 81       	ld	r24, Z
    31fe:	84 60       	ori	r24, 0x04	; 4
    3200:	8c 93       	st	X, r24
    3202:	1f c0       	rjmp	.+62     	; 0x3242 <TIMER_Init+0x10a>
		}

		else if(Config_Ptr->TIMER_mode == TIMER_COMPARE_MODE)
    3204:	e9 81       	ldd	r30, Y+1	; 0x01
    3206:	fa 81       	ldd	r31, Y+2	; 0x02
    3208:	81 81       	ldd	r24, Z+1	; 0x01
    320a:	81 30       	cpi	r24, 0x01	; 1
    320c:	d1 f4       	brne	.+52     	; 0x3242 <TIMER_Init+0x10a>
			/* Configure timer1 control register TCCR1A
			 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
			 * 2. FOC1A=1 FOC1B=0
			 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
			 */
			TCCR1A = (1<<FOC1A);
    320e:	ef e4       	ldi	r30, 0x4F	; 79
    3210:	f0 e0       	ldi	r31, 0x00	; 0
    3212:	88 e0       	ldi	r24, 0x08	; 8
    3214:	80 83       	st	Z, r24

			/* Configure timer1 control register TCCR1B
			 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
			 */
			TCCR1B = (1<<WGM12);
    3216:	ee e4       	ldi	r30, 0x4E	; 78
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	88 e0       	ldi	r24, 0x08	; 8
    321c:	80 83       	st	Z, r24

			/* Enable Timer1 Compare Interrupt */
			TIMSK |= (1<<OCIE1A);
    321e:	a9 e5       	ldi	r26, 0x59	; 89
    3220:	b0 e0       	ldi	r27, 0x00	; 0
    3222:	e9 e5       	ldi	r30, 0x59	; 89
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	80 81       	ld	r24, Z
    3228:	80 61       	ori	r24, 0x10	; 16
    322a:	8c 93       	st	X, r24

			/* Set Timer1 Compare Value */
			OCR1A = (Config_Ptr->TIMER_compareValue);
    322c:	2a e4       	ldi	r18, 0x4A	; 74
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	e9 81       	ldd	r30, Y+1	; 0x01
    3232:	fa 81       	ldd	r31, Y+2	; 0x02
    3234:	87 81       	ldd	r24, Z+7	; 0x07
    3236:	90 85       	ldd	r25, Z+8	; 0x08
    3238:	a1 85       	ldd	r26, Z+9	; 0x09
    323a:	b2 85       	ldd	r27, Z+10	; 0x0a
    323c:	f9 01       	movw	r30, r18
    323e:	91 83       	std	Z+1, r25	; 0x01
    3240:	80 83       	st	Z, r24

		/*
		 * Adjust the prescaler by inserting the three bits of the required prescaler
		 * value in bits ( CS10 & CS11 & CS12 ) of TCCR1B Register
		 */
		TCCR1B |= (Config_Ptr->presaler);
    3242:	ae e4       	ldi	r26, 0x4E	; 78
    3244:	b0 e0       	ldi	r27, 0x00	; 0
    3246:	ee e4       	ldi	r30, 0x4E	; 78
    3248:	f0 e0       	ldi	r31, 0x00	; 0
    324a:	90 81       	ld	r25, Z
    324c:	e9 81       	ldd	r30, Y+1	; 0x01
    324e:	fa 81       	ldd	r31, Y+2	; 0x02
    3250:	82 81       	ldd	r24, Z+2	; 0x02
    3252:	89 2b       	or	r24, r25
    3254:	8c 93       	st	X, r24

		/* Set Timer1 Initial Value */
		TCNT1 = (Config_Ptr->TIMER_initialValue);
    3256:	2c e4       	ldi	r18, 0x4C	; 76
    3258:	30 e0       	ldi	r19, 0x00	; 0
    325a:	e9 81       	ldd	r30, Y+1	; 0x01
    325c:	fa 81       	ldd	r31, Y+2	; 0x02
    325e:	83 81       	ldd	r24, Z+3	; 0x03
    3260:	94 81       	ldd	r25, Z+4	; 0x04
    3262:	a5 81       	ldd	r26, Z+5	; 0x05
    3264:	b6 81       	ldd	r27, Z+6	; 0x06
    3266:	f9 01       	movw	r30, r18
    3268:	91 83       	std	Z+1, r25	; 0x01
    326a:	80 83       	st	Z, r24
	}

	/************************ TIMER2 ************************/

	if(Config_Ptr->TIMER_id == TIMER2)
    326c:	e9 81       	ldd	r30, Y+1	; 0x01
    326e:	fa 81       	ldd	r31, Y+2	; 0x02
    3270:	80 81       	ld	r24, Z
    3272:	82 30       	cpi	r24, 0x02	; 2
    3274:	09 f0       	breq	.+2      	; 0x3278 <TIMER_Init+0x140>
    3276:	3f c0       	rjmp	.+126    	; 0x32f6 <TIMER_Init+0x1be>
	{
		if(Config_Ptr->TIMER_mode == TIMER_NORMAL_MODE)
    3278:	e9 81       	ldd	r30, Y+1	; 0x01
    327a:	fa 81       	ldd	r31, Y+2	; 0x02
    327c:	81 81       	ldd	r24, Z+1	; 0x01
    327e:	88 23       	and	r24, r24
    3280:	61 f4       	brne	.+24     	; 0x329a <TIMER_Init+0x162>
			/* configure the timer2 control register
			 * 1. Normal mode FOC2=1
			 * 2. Normal Mode WGM21=0 & WGM20=0
			 * 3. Normal port operation COM00=0 & COM01=0
			 */
			TCCR2 = (1<<FOC2);
    3282:	e5 e4       	ldi	r30, 0x45	; 69
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	80 e8       	ldi	r24, 0x80	; 128
    3288:	80 83       	st	Z, r24

			/* Enable Timer2 Overflow Interrupt */
			TIMSK |= (1<<TOIE2);
    328a:	a9 e5       	ldi	r26, 0x59	; 89
    328c:	b0 e0       	ldi	r27, 0x00	; 0
    328e:	e9 e5       	ldi	r30, 0x59	; 89
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	80 64       	ori	r24, 0x40	; 64
    3296:	8c 93       	st	X, r24
    3298:	1a c0       	rjmp	.+52     	; 0x32ce <TIMER_Init+0x196>
		}

		else if(Config_Ptr->TIMER_mode == TIMER_COMPARE_MODE)
    329a:	e9 81       	ldd	r30, Y+1	; 0x01
    329c:	fa 81       	ldd	r31, Y+2	; 0x02
    329e:	81 81       	ldd	r24, Z+1	; 0x01
    32a0:	81 30       	cpi	r24, 0x01	; 1
    32a2:	a9 f4       	brne	.+42     	; 0x32ce <TIMER_Init+0x196>
			/* configure the timer2 control register
			 * 1. Compare mode FOC2=1
			 * 2. Compare Mode WGM21=1 & WGM20=0
			 * 3. Normal port operation COM00=0 & COM01=0
			 */
			TCCR2 = (1<<FOC2) | (1<<WGM21);
    32a4:	e5 e4       	ldi	r30, 0x45	; 69
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	88 e8       	ldi	r24, 0x88	; 136
    32aa:	80 83       	st	Z, r24

			/* Enable Timer2 Compare Interrupt */
			TIMSK |= (1<<OCIE2);
    32ac:	a9 e5       	ldi	r26, 0x59	; 89
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	e9 e5       	ldi	r30, 0x59	; 89
    32b2:	f0 e0       	ldi	r31, 0x00	; 0
    32b4:	80 81       	ld	r24, Z
    32b6:	80 68       	ori	r24, 0x80	; 128
    32b8:	8c 93       	st	X, r24

			/* Set Timer2 Compare Value */
			OCR2 = (Config_Ptr->TIMER_compareValue);
    32ba:	23 e4       	ldi	r18, 0x43	; 67
    32bc:	30 e0       	ldi	r19, 0x00	; 0
    32be:	e9 81       	ldd	r30, Y+1	; 0x01
    32c0:	fa 81       	ldd	r31, Y+2	; 0x02
    32c2:	87 81       	ldd	r24, Z+7	; 0x07
    32c4:	90 85       	ldd	r25, Z+8	; 0x08
    32c6:	a1 85       	ldd	r26, Z+9	; 0x09
    32c8:	b2 85       	ldd	r27, Z+10	; 0x0a
    32ca:	f9 01       	movw	r30, r18
    32cc:	80 83       	st	Z, r24

		/*
		 * Adjust the prescaler by inserting the three bits of the required prescaler
		 * value in bits ( CS20 & CS21 & CS22 ) of TCCR2 Register
		 */
		TCCR2 |= (Config_Ptr->presaler);
    32ce:	a5 e4       	ldi	r26, 0x45	; 69
    32d0:	b0 e0       	ldi	r27, 0x00	; 0
    32d2:	e5 e4       	ldi	r30, 0x45	; 69
    32d4:	f0 e0       	ldi	r31, 0x00	; 0
    32d6:	90 81       	ld	r25, Z
    32d8:	e9 81       	ldd	r30, Y+1	; 0x01
    32da:	fa 81       	ldd	r31, Y+2	; 0x02
    32dc:	82 81       	ldd	r24, Z+2	; 0x02
    32de:	89 2b       	or	r24, r25
    32e0:	8c 93       	st	X, r24

		/* Set Timer2 Initial Value */
		TCNT2 = (Config_Ptr->TIMER_initialValue);
    32e2:	24 e4       	ldi	r18, 0x44	; 68
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	e9 81       	ldd	r30, Y+1	; 0x01
    32e8:	fa 81       	ldd	r31, Y+2	; 0x02
    32ea:	83 81       	ldd	r24, Z+3	; 0x03
    32ec:	94 81       	ldd	r25, Z+4	; 0x04
    32ee:	a5 81       	ldd	r26, Z+5	; 0x05
    32f0:	b6 81       	ldd	r27, Z+6	; 0x06
    32f2:	f9 01       	movw	r30, r18
    32f4:	80 83       	st	Z, r24
	}
}
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	08 95       	ret

00003300 <TIMER_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void TIMER_setCallBack(void(*a_ptr)(void))
{
    3300:	df 93       	push	r29
    3302:	cf 93       	push	r28
    3304:	00 d0       	rcall	.+0      	; 0x3306 <TIMER_setCallBack+0x6>
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	9a 83       	std	Y+2, r25	; 0x02
    330c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	9a 81       	ldd	r25, Y+2	; 0x02
    3312:	90 93 31 01 	sts	0x0131, r25
    3316:	80 93 30 01 	sts	0x0130, r24
}
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	cf 91       	pop	r28
    3320:	df 91       	pop	r29
    3322:	08 95       	ret

00003324 <TIMER_DeInit>:
/*
 * Description :
 * Function to disable the Timer.
 */
void TIMER_DeInit(void)
{
    3324:	df 93       	push	r29
    3326:	cf 93       	push	r28
    3328:	cd b7       	in	r28, 0x3d	; 61
    332a:	de b7       	in	r29, 0x3e	; 62
	/************************ TIMER0 ************************/

	/* Clear All Timer0 Registers and stop the clock */
	TCCR0 = 0;
    332c:	e3 e5       	ldi	r30, 0x53	; 83
    332e:	f0 e0       	ldi	r31, 0x00	; 0
    3330:	10 82       	st	Z, r1
	TCNT0 = 0;
    3332:	e2 e5       	ldi	r30, 0x52	; 82
    3334:	f0 e0       	ldi	r31, 0x00	; 0
    3336:	10 82       	st	Z, r1

	/* Disable Timer0 Overflow Interrupt */
	TIMSK &= ~(1<<TOIE0);
    3338:	a9 e5       	ldi	r26, 0x59	; 89
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	e9 e5       	ldi	r30, 0x59	; 89
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	8e 7f       	andi	r24, 0xFE	; 254
    3344:	8c 93       	st	X, r24

	/* Disable Timer0 Compare Interrupt */
	TIMSK &= ~(1<<OCIE0);
    3346:	a9 e5       	ldi	r26, 0x59	; 89
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	e9 e5       	ldi	r30, 0x59	; 89
    334c:	f0 e0       	ldi	r31, 0x00	; 0
    334e:	80 81       	ld	r24, Z
    3350:	8d 7f       	andi	r24, 0xFD	; 253
    3352:	8c 93       	st	X, r24

	/************************ TIMER1 ************************/

	/* Clear All Timer1 Registers and stop the clock */
	TCCR1A = 0;
    3354:	ef e4       	ldi	r30, 0x4F	; 79
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	10 82       	st	Z, r1
	TCCR1B = 0;
    335a:	ee e4       	ldi	r30, 0x4E	; 78
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	10 82       	st	Z, r1
	TCNT1 = 0;
    3360:	ec e4       	ldi	r30, 0x4C	; 76
    3362:	f0 e0       	ldi	r31, 0x00	; 0
    3364:	11 82       	std	Z+1, r1	; 0x01
    3366:	10 82       	st	Z, r1

	/* Disable Timer1 Overflow Interrupt */
	TIMSK &= ~(1<<TOIE1);
    3368:	a9 e5       	ldi	r26, 0x59	; 89
    336a:	b0 e0       	ldi	r27, 0x00	; 0
    336c:	e9 e5       	ldi	r30, 0x59	; 89
    336e:	f0 e0       	ldi	r31, 0x00	; 0
    3370:	80 81       	ld	r24, Z
    3372:	8b 7f       	andi	r24, 0xFB	; 251
    3374:	8c 93       	st	X, r24

	/* Disable Timer1 Compare Interrupt */
	TIMSK &= ~(1<<OCIE1A);
    3376:	a9 e5       	ldi	r26, 0x59	; 89
    3378:	b0 e0       	ldi	r27, 0x00	; 0
    337a:	e9 e5       	ldi	r30, 0x59	; 89
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	80 81       	ld	r24, Z
    3380:	8f 7e       	andi	r24, 0xEF	; 239
    3382:	8c 93       	st	X, r24

	/************************ TIMER2 ************************/

	/* Clear All Timer2 Registers and stop the clock */
	TCCR2 = 0;
    3384:	e5 e4       	ldi	r30, 0x45	; 69
    3386:	f0 e0       	ldi	r31, 0x00	; 0
    3388:	10 82       	st	Z, r1
	TCNT2 = 0;
    338a:	e4 e4       	ldi	r30, 0x44	; 68
    338c:	f0 e0       	ldi	r31, 0x00	; 0
    338e:	10 82       	st	Z, r1

	/* Disable Timer2 Overflow Interrupt */
	TIMSK &= ~(1<<TOIE2);
    3390:	a9 e5       	ldi	r26, 0x59	; 89
    3392:	b0 e0       	ldi	r27, 0x00	; 0
    3394:	e9 e5       	ldi	r30, 0x59	; 89
    3396:	f0 e0       	ldi	r31, 0x00	; 0
    3398:	80 81       	ld	r24, Z
    339a:	8f 7b       	andi	r24, 0xBF	; 191
    339c:	8c 93       	st	X, r24

	/* Disable Timer2 Compare Interrupt */
	TIMSK &= ~(1<<OCIE2);
    339e:	a9 e5       	ldi	r26, 0x59	; 89
    33a0:	b0 e0       	ldi	r27, 0x00	; 0
    33a2:	e9 e5       	ldi	r30, 0x59	; 89
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	80 81       	ld	r24, Z
    33a8:	8f 77       	andi	r24, 0x7F	; 127
    33aa:	8c 93       	st	X, r24
}
    33ac:	cf 91       	pop	r28
    33ae:	df 91       	pop	r29
    33b0:	08 95       	ret

000033b2 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    33b2:	df 93       	push	r29
    33b4:	cf 93       	push	r28
    33b6:	00 d0       	rcall	.+0      	; 0x33b8 <UART_init+0x6>
    33b8:	00 d0       	rcall	.+0      	; 0x33ba <UART_init+0x8>
    33ba:	cd b7       	in	r28, 0x3d	; 61
    33bc:	de b7       	in	r29, 0x3e	; 62
    33be:	9c 83       	std	Y+4, r25	; 0x04
    33c0:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    33c2:	1a 82       	std	Y+2, r1	; 0x02
    33c4:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    33c6:	eb e2       	ldi	r30, 0x2B	; 43
    33c8:	f0 e0       	ldi	r31, 0x00	; 0
    33ca:	82 e0       	ldi	r24, 0x02	; 2
    33cc:	80 83       	st	Z, r24
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    33ce:	ea e2       	ldi	r30, 0x2A	; 42
    33d0:	f0 e0       	ldi	r31, 0x00	; 0
    33d2:	88 e1       	ldi	r24, 0x18	; 24
    33d4:	80 83       	st	Z, r24
	
	/*
	 * Insert the third bit of the required bit per frame value in bit ( UCSZ2 )
	 * of UCSRB Register
	 */
	UCSRB |= ((Config_Ptr->bit_data) & 0x04);
    33d6:	aa e2       	ldi	r26, 0x2A	; 42
    33d8:	b0 e0       	ldi	r27, 0x00	; 0
    33da:	ea e2       	ldi	r30, 0x2A	; 42
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	80 81       	ld	r24, Z
    33e0:	98 2f       	mov	r25, r24
    33e2:	eb 81       	ldd	r30, Y+3	; 0x03
    33e4:	fc 81       	ldd	r31, Y+4	; 0x04
    33e6:	80 81       	ld	r24, Z
    33e8:	84 70       	andi	r24, 0x04	; 4
    33ea:	89 2b       	or	r24, r25
    33ec:	8c 93       	st	X, r24
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * USBS    = 0 One stop bit
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    33ee:	e0 e4       	ldi	r30, 0x40	; 64
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	80 e8       	ldi	r24, 0x80	; 128
    33f4:	80 83       	st	Z, r24

	/*
	 * Insert the two bits of the required parity type value in bits ( UPM0 & UPM1 )
	 * of UCSRC Register
	 */
	UCSRC |= ((Config_Ptr->parity) << 4);
    33f6:	a0 e4       	ldi	r26, 0x40	; 64
    33f8:	b0 e0       	ldi	r27, 0x00	; 0
    33fa:	e0 e4       	ldi	r30, 0x40	; 64
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	80 81       	ld	r24, Z
    3400:	28 2f       	mov	r18, r24
    3402:	eb 81       	ldd	r30, Y+3	; 0x03
    3404:	fc 81       	ldd	r31, Y+4	; 0x04
    3406:	81 81       	ldd	r24, Z+1	; 0x01
    3408:	88 2f       	mov	r24, r24
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	82 95       	swap	r24
    340e:	92 95       	swap	r25
    3410:	90 7f       	andi	r25, 0xF0	; 240
    3412:	98 27       	eor	r25, r24
    3414:	80 7f       	andi	r24, 0xF0	; 240
    3416:	98 27       	eor	r25, r24
    3418:	82 2b       	or	r24, r18
    341a:	8c 93       	st	X, r24

	/*
	 * Insert the required stop bit value in bit ( USBS )
	 * of UCSRC Register
	 */
	UCSRC |= ((Config_Ptr->stop_bit) << 3);
    341c:	a0 e4       	ldi	r26, 0x40	; 64
    341e:	b0 e0       	ldi	r27, 0x00	; 0
    3420:	e0 e4       	ldi	r30, 0x40	; 64
    3422:	f0 e0       	ldi	r31, 0x00	; 0
    3424:	80 81       	ld	r24, Z
    3426:	28 2f       	mov	r18, r24
    3428:	eb 81       	ldd	r30, Y+3	; 0x03
    342a:	fc 81       	ldd	r31, Y+4	; 0x04
    342c:	82 81       	ldd	r24, Z+2	; 0x02
    342e:	88 2f       	mov	r24, r24
    3430:	90 e0       	ldi	r25, 0x00	; 0
    3432:	88 0f       	add	r24, r24
    3434:	99 1f       	adc	r25, r25
    3436:	88 0f       	add	r24, r24
    3438:	99 1f       	adc	r25, r25
    343a:	88 0f       	add	r24, r24
    343c:	99 1f       	adc	r25, r25
    343e:	82 2b       	or	r24, r18
    3440:	8c 93       	st	X, r24

	/*
	 * Insert the first two bits of the required bit per frame value in bits ( UCSZ0 & UCSZ1 )
	 * of UCSRC Register
	 */
	UCSRC |= (((Config_Ptr->bit_data) & 0x03) << 1);
    3442:	a0 e4       	ldi	r26, 0x40	; 64
    3444:	b0 e0       	ldi	r27, 0x00	; 0
    3446:	e0 e4       	ldi	r30, 0x40	; 64
    3448:	f0 e0       	ldi	r31, 0x00	; 0
    344a:	80 81       	ld	r24, Z
    344c:	28 2f       	mov	r18, r24
    344e:	eb 81       	ldd	r30, Y+3	; 0x03
    3450:	fc 81       	ldd	r31, Y+4	; 0x04
    3452:	80 81       	ld	r24, Z
    3454:	88 2f       	mov	r24, r24
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	83 70       	andi	r24, 0x03	; 3
    345a:	90 70       	andi	r25, 0x00	; 0
    345c:	88 0f       	add	r24, r24
    345e:	99 1f       	adc	r25, r25
    3460:	82 2b       	or	r24, r18
    3462:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    3464:	eb 81       	ldd	r30, Y+3	; 0x03
    3466:	fc 81       	ldd	r31, Y+4	; 0x04
    3468:	83 81       	ldd	r24, Z+3	; 0x03
    346a:	94 81       	ldd	r25, Z+4	; 0x04
    346c:	a5 81       	ldd	r26, Z+5	; 0x05
    346e:	b6 81       	ldd	r27, Z+6	; 0x06
    3470:	88 0f       	add	r24, r24
    3472:	99 1f       	adc	r25, r25
    3474:	aa 1f       	adc	r26, r26
    3476:	bb 1f       	adc	r27, r27
    3478:	88 0f       	add	r24, r24
    347a:	99 1f       	adc	r25, r25
    347c:	aa 1f       	adc	r26, r26
    347e:	bb 1f       	adc	r27, r27
    3480:	88 0f       	add	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	aa 1f       	adc	r26, r26
    3486:	bb 1f       	adc	r27, r27
    3488:	9c 01       	movw	r18, r24
    348a:	ad 01       	movw	r20, r26
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	92 e1       	ldi	r25, 0x12	; 18
    3490:	aa e7       	ldi	r26, 0x7A	; 122
    3492:	b0 e0       	ldi	r27, 0x00	; 0
    3494:	bc 01       	movw	r22, r24
    3496:	cd 01       	movw	r24, r26
    3498:	0e 94 f7 1a 	call	0x35ee	; 0x35ee <__udivmodsi4>
    349c:	da 01       	movw	r26, r20
    349e:	c9 01       	movw	r24, r18
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	9a 83       	std	Y+2, r25	; 0x02
    34a4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH */
	UBRRH = ubrr_value>>8;
    34a6:	e0 e4       	ldi	r30, 0x40	; 64
    34a8:	f0 e0       	ldi	r31, 0x00	; 0
    34aa:	89 81       	ldd	r24, Y+1	; 0x01
    34ac:	9a 81       	ldd	r25, Y+2	; 0x02
    34ae:	89 2f       	mov	r24, r25
    34b0:	99 27       	eor	r25, r25
    34b2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    34b4:	e9 e2       	ldi	r30, 0x29	; 41
    34b6:	f0 e0       	ldi	r31, 0x00	; 0
    34b8:	89 81       	ldd	r24, Y+1	; 0x01
    34ba:	80 83       	st	Z, r24
}
    34bc:	0f 90       	pop	r0
    34be:	0f 90       	pop	r0
    34c0:	0f 90       	pop	r0
    34c2:	0f 90       	pop	r0
    34c4:	cf 91       	pop	r28
    34c6:	df 91       	pop	r29
    34c8:	08 95       	ret

000034ca <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    34ca:	df 93       	push	r29
    34cc:	cf 93       	push	r28
    34ce:	0f 92       	push	r0
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
    34d4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    34d6:	eb e2       	ldi	r30, 0x2B	; 43
    34d8:	f0 e0       	ldi	r31, 0x00	; 0
    34da:	80 81       	ld	r24, Z
    34dc:	88 2f       	mov	r24, r24
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	80 72       	andi	r24, 0x20	; 32
    34e2:	90 70       	andi	r25, 0x00	; 0
    34e4:	00 97       	sbiw	r24, 0x00	; 0
    34e6:	b9 f3       	breq	.-18     	; 0x34d6 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    34e8:	ec e2       	ldi	r30, 0x2C	; 44
    34ea:	f0 e0       	ldi	r31, 0x00	; 0
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    34f0:	0f 90       	pop	r0
    34f2:	cf 91       	pop	r28
    34f4:	df 91       	pop	r29
    34f6:	08 95       	ret

000034f8 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    34f8:	df 93       	push	r29
    34fa:	cf 93       	push	r28
    34fc:	cd b7       	in	r28, 0x3d	; 61
    34fe:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3500:	eb e2       	ldi	r30, 0x2B	; 43
    3502:	f0 e0       	ldi	r31, 0x00	; 0
    3504:	80 81       	ld	r24, Z
    3506:	88 23       	and	r24, r24
    3508:	dc f7       	brge	.-10     	; 0x3500 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    350a:	ec e2       	ldi	r30, 0x2C	; 44
    350c:	f0 e0       	ldi	r31, 0x00	; 0
    350e:	80 81       	ld	r24, Z
}
    3510:	cf 91       	pop	r28
    3512:	df 91       	pop	r29
    3514:	08 95       	ret

00003516 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3516:	df 93       	push	r29
    3518:	cf 93       	push	r28
    351a:	00 d0       	rcall	.+0      	; 0x351c <UART_sendString+0x6>
    351c:	0f 92       	push	r0
    351e:	cd b7       	in	r28, 0x3d	; 61
    3520:	de b7       	in	r29, 0x3e	; 62
    3522:	9b 83       	std	Y+3, r25	; 0x03
    3524:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3526:	19 82       	std	Y+1, r1	; 0x01
    3528:	0e c0       	rjmp	.+28     	; 0x3546 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	28 2f       	mov	r18, r24
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	8a 81       	ldd	r24, Y+2	; 0x02
    3532:	9b 81       	ldd	r25, Y+3	; 0x03
    3534:	fc 01       	movw	r30, r24
    3536:	e2 0f       	add	r30, r18
    3538:	f3 1f       	adc	r31, r19
    353a:	80 81       	ld	r24, Z
    353c:	0e 94 65 1a 	call	0x34ca	; 0x34ca <UART_sendByte>
		i++;
    3540:	89 81       	ldd	r24, Y+1	; 0x01
    3542:	8f 5f       	subi	r24, 0xFF	; 255
    3544:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3546:	89 81       	ldd	r24, Y+1	; 0x01
    3548:	28 2f       	mov	r18, r24
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	8a 81       	ldd	r24, Y+2	; 0x02
    354e:	9b 81       	ldd	r25, Y+3	; 0x03
    3550:	fc 01       	movw	r30, r24
    3552:	e2 0f       	add	r30, r18
    3554:	f3 1f       	adc	r31, r19
    3556:	80 81       	ld	r24, Z
    3558:	88 23       	and	r24, r24
    355a:	39 f7       	brne	.-50     	; 0x352a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	cf 91       	pop	r28
    3564:	df 91       	pop	r29
    3566:	08 95       	ret

00003568 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3568:	0f 93       	push	r16
    356a:	1f 93       	push	r17
    356c:	df 93       	push	r29
    356e:	cf 93       	push	r28
    3570:	00 d0       	rcall	.+0      	; 0x3572 <UART_receiveString+0xa>
    3572:	0f 92       	push	r0
    3574:	cd b7       	in	r28, 0x3d	; 61
    3576:	de b7       	in	r29, 0x3e	; 62
    3578:	9b 83       	std	Y+3, r25	; 0x03
    357a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    357c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    357e:	89 81       	ldd	r24, Y+1	; 0x01
    3580:	28 2f       	mov	r18, r24
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	8a 81       	ldd	r24, Y+2	; 0x02
    3586:	9b 81       	ldd	r25, Y+3	; 0x03
    3588:	8c 01       	movw	r16, r24
    358a:	02 0f       	add	r16, r18
    358c:	13 1f       	adc	r17, r19
    358e:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <UART_recieveByte>
    3592:	f8 01       	movw	r30, r16
    3594:	80 83       	st	Z, r24
    3596:	0f c0       	rjmp	.+30     	; 0x35b6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	8f 5f       	subi	r24, 0xFF	; 255
    359c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    359e:	89 81       	ldd	r24, Y+1	; 0x01
    35a0:	28 2f       	mov	r18, r24
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	8a 81       	ldd	r24, Y+2	; 0x02
    35a6:	9b 81       	ldd	r25, Y+3	; 0x03
    35a8:	8c 01       	movw	r16, r24
    35aa:	02 0f       	add	r16, r18
    35ac:	13 1f       	adc	r17, r19
    35ae:	0e 94 7c 1a 	call	0x34f8	; 0x34f8 <UART_recieveByte>
    35b2:	f8 01       	movw	r30, r16
    35b4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	28 2f       	mov	r18, r24
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	8a 81       	ldd	r24, Y+2	; 0x02
    35be:	9b 81       	ldd	r25, Y+3	; 0x03
    35c0:	fc 01       	movw	r30, r24
    35c2:	e2 0f       	add	r30, r18
    35c4:	f3 1f       	adc	r31, r19
    35c6:	80 81       	ld	r24, Z
    35c8:	83 32       	cpi	r24, 0x23	; 35
    35ca:	31 f7       	brne	.-52     	; 0x3598 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	28 2f       	mov	r18, r24
    35d0:	30 e0       	ldi	r19, 0x00	; 0
    35d2:	8a 81       	ldd	r24, Y+2	; 0x02
    35d4:	9b 81       	ldd	r25, Y+3	; 0x03
    35d6:	fc 01       	movw	r30, r24
    35d8:	e2 0f       	add	r30, r18
    35da:	f3 1f       	adc	r31, r19
    35dc:	10 82       	st	Z, r1
}
    35de:	0f 90       	pop	r0
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	1f 91       	pop	r17
    35ea:	0f 91       	pop	r16
    35ec:	08 95       	ret

000035ee <__udivmodsi4>:
    35ee:	a1 e2       	ldi	r26, 0x21	; 33
    35f0:	1a 2e       	mov	r1, r26
    35f2:	aa 1b       	sub	r26, r26
    35f4:	bb 1b       	sub	r27, r27
    35f6:	fd 01       	movw	r30, r26
    35f8:	0d c0       	rjmp	.+26     	; 0x3614 <__udivmodsi4_ep>

000035fa <__udivmodsi4_loop>:
    35fa:	aa 1f       	adc	r26, r26
    35fc:	bb 1f       	adc	r27, r27
    35fe:	ee 1f       	adc	r30, r30
    3600:	ff 1f       	adc	r31, r31
    3602:	a2 17       	cp	r26, r18
    3604:	b3 07       	cpc	r27, r19
    3606:	e4 07       	cpc	r30, r20
    3608:	f5 07       	cpc	r31, r21
    360a:	20 f0       	brcs	.+8      	; 0x3614 <__udivmodsi4_ep>
    360c:	a2 1b       	sub	r26, r18
    360e:	b3 0b       	sbc	r27, r19
    3610:	e4 0b       	sbc	r30, r20
    3612:	f5 0b       	sbc	r31, r21

00003614 <__udivmodsi4_ep>:
    3614:	66 1f       	adc	r22, r22
    3616:	77 1f       	adc	r23, r23
    3618:	88 1f       	adc	r24, r24
    361a:	99 1f       	adc	r25, r25
    361c:	1a 94       	dec	r1
    361e:	69 f7       	brne	.-38     	; 0x35fa <__udivmodsi4_loop>
    3620:	60 95       	com	r22
    3622:	70 95       	com	r23
    3624:	80 95       	com	r24
    3626:	90 95       	com	r25
    3628:	9b 01       	movw	r18, r22
    362a:	ac 01       	movw	r20, r24
    362c:	bd 01       	movw	r22, r26
    362e:	cf 01       	movw	r24, r30
    3630:	08 95       	ret

00003632 <__prologue_saves__>:
    3632:	2f 92       	push	r2
    3634:	3f 92       	push	r3
    3636:	4f 92       	push	r4
    3638:	5f 92       	push	r5
    363a:	6f 92       	push	r6
    363c:	7f 92       	push	r7
    363e:	8f 92       	push	r8
    3640:	9f 92       	push	r9
    3642:	af 92       	push	r10
    3644:	bf 92       	push	r11
    3646:	cf 92       	push	r12
    3648:	df 92       	push	r13
    364a:	ef 92       	push	r14
    364c:	ff 92       	push	r15
    364e:	0f 93       	push	r16
    3650:	1f 93       	push	r17
    3652:	cf 93       	push	r28
    3654:	df 93       	push	r29
    3656:	cd b7       	in	r28, 0x3d	; 61
    3658:	de b7       	in	r29, 0x3e	; 62
    365a:	ca 1b       	sub	r28, r26
    365c:	db 0b       	sbc	r29, r27
    365e:	0f b6       	in	r0, 0x3f	; 63
    3660:	f8 94       	cli
    3662:	de bf       	out	0x3e, r29	; 62
    3664:	0f be       	out	0x3f, r0	; 63
    3666:	cd bf       	out	0x3d, r28	; 61
    3668:	09 94       	ijmp

0000366a <__epilogue_restores__>:
    366a:	2a 88       	ldd	r2, Y+18	; 0x12
    366c:	39 88       	ldd	r3, Y+17	; 0x11
    366e:	48 88       	ldd	r4, Y+16	; 0x10
    3670:	5f 84       	ldd	r5, Y+15	; 0x0f
    3672:	6e 84       	ldd	r6, Y+14	; 0x0e
    3674:	7d 84       	ldd	r7, Y+13	; 0x0d
    3676:	8c 84       	ldd	r8, Y+12	; 0x0c
    3678:	9b 84       	ldd	r9, Y+11	; 0x0b
    367a:	aa 84       	ldd	r10, Y+10	; 0x0a
    367c:	b9 84       	ldd	r11, Y+9	; 0x09
    367e:	c8 84       	ldd	r12, Y+8	; 0x08
    3680:	df 80       	ldd	r13, Y+7	; 0x07
    3682:	ee 80       	ldd	r14, Y+6	; 0x06
    3684:	fd 80       	ldd	r15, Y+5	; 0x05
    3686:	0c 81       	ldd	r16, Y+4	; 0x04
    3688:	1b 81       	ldd	r17, Y+3	; 0x03
    368a:	aa 81       	ldd	r26, Y+2	; 0x02
    368c:	b9 81       	ldd	r27, Y+1	; 0x01
    368e:	ce 0f       	add	r28, r30
    3690:	d1 1d       	adc	r29, r1
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	f8 94       	cli
    3696:	de bf       	out	0x3e, r29	; 62
    3698:	0f be       	out	0x3f, r0	; 63
    369a:	cd bf       	out	0x3d, r28	; 61
    369c:	ed 01       	movw	r28, r26
    369e:	08 95       	ret

000036a0 <itoa>:
    36a0:	fb 01       	movw	r30, r22
    36a2:	9f 01       	movw	r18, r30
    36a4:	e8 94       	clt
    36a6:	42 30       	cpi	r20, 0x02	; 2
    36a8:	c4 f0       	brlt	.+48     	; 0x36da <itoa+0x3a>
    36aa:	45 32       	cpi	r20, 0x25	; 37
    36ac:	b4 f4       	brge	.+44     	; 0x36da <itoa+0x3a>
    36ae:	4a 30       	cpi	r20, 0x0A	; 10
    36b0:	29 f4       	brne	.+10     	; 0x36bc <itoa+0x1c>
    36b2:	97 fb       	bst	r25, 7
    36b4:	1e f4       	brtc	.+6      	; 0x36bc <itoa+0x1c>
    36b6:	90 95       	com	r25
    36b8:	81 95       	neg	r24
    36ba:	9f 4f       	sbci	r25, 0xFF	; 255
    36bc:	64 2f       	mov	r22, r20
    36be:	77 27       	eor	r23, r23
    36c0:	0e 94 81 1b 	call	0x3702	; 0x3702 <__udivmodhi4>
    36c4:	80 5d       	subi	r24, 0xD0	; 208
    36c6:	8a 33       	cpi	r24, 0x3A	; 58
    36c8:	0c f0       	brlt	.+2      	; 0x36cc <itoa+0x2c>
    36ca:	89 5d       	subi	r24, 0xD9	; 217
    36cc:	81 93       	st	Z+, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	00 97       	sbiw	r24, 0x00	; 0
    36d2:	a1 f7       	brne	.-24     	; 0x36bc <itoa+0x1c>
    36d4:	16 f4       	brtc	.+4      	; 0x36da <itoa+0x3a>
    36d6:	5d e2       	ldi	r21, 0x2D	; 45
    36d8:	51 93       	st	Z+, r21
    36da:	10 82       	st	Z, r1
    36dc:	c9 01       	movw	r24, r18
    36de:	0c 94 71 1b 	jmp	0x36e2	; 0x36e2 <strrev>

000036e2 <strrev>:
    36e2:	dc 01       	movw	r26, r24
    36e4:	fc 01       	movw	r30, r24
    36e6:	67 2f       	mov	r22, r23
    36e8:	71 91       	ld	r23, Z+
    36ea:	77 23       	and	r23, r23
    36ec:	e1 f7       	brne	.-8      	; 0x36e6 <strrev+0x4>
    36ee:	32 97       	sbiw	r30, 0x02	; 2
    36f0:	04 c0       	rjmp	.+8      	; 0x36fa <strrev+0x18>
    36f2:	7c 91       	ld	r23, X
    36f4:	6d 93       	st	X+, r22
    36f6:	70 83       	st	Z, r23
    36f8:	62 91       	ld	r22, -Z
    36fa:	ae 17       	cp	r26, r30
    36fc:	bf 07       	cpc	r27, r31
    36fe:	c8 f3       	brcs	.-14     	; 0x36f2 <strrev+0x10>
    3700:	08 95       	ret

00003702 <__udivmodhi4>:
    3702:	aa 1b       	sub	r26, r26
    3704:	bb 1b       	sub	r27, r27
    3706:	51 e1       	ldi	r21, 0x11	; 17
    3708:	07 c0       	rjmp	.+14     	; 0x3718 <__udivmodhi4_ep>

0000370a <__udivmodhi4_loop>:
    370a:	aa 1f       	adc	r26, r26
    370c:	bb 1f       	adc	r27, r27
    370e:	a6 17       	cp	r26, r22
    3710:	b7 07       	cpc	r27, r23
    3712:	10 f0       	brcs	.+4      	; 0x3718 <__udivmodhi4_ep>
    3714:	a6 1b       	sub	r26, r22
    3716:	b7 0b       	sbc	r27, r23

00003718 <__udivmodhi4_ep>:
    3718:	88 1f       	adc	r24, r24
    371a:	99 1f       	adc	r25, r25
    371c:	5a 95       	dec	r21
    371e:	a9 f7       	brne	.-22     	; 0x370a <__udivmodhi4_loop>
    3720:	80 95       	com	r24
    3722:	90 95       	com	r25
    3724:	bc 01       	movw	r22, r24
    3726:	cd 01       	movw	r24, r26
    3728:	08 95       	ret

0000372a <_exit>:
    372a:	f8 94       	cli

0000372c <__stop_program>:
    372c:	ff cf       	rjmp	.-2      	; 0x372c <__stop_program>
